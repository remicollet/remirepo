Extension [ <persistent> extension #146 sphinx version 1.3.3 ] {

  - Constants [42] {
    Constant [ integer SEARCHD_OK ] { 0 }
    Constant [ integer SEARCHD_ERROR ] { 1 }
    Constant [ integer SEARCHD_RETRY ] { 2 }
    Constant [ integer SEARCHD_WARNING ] { 3 }
    Constant [ integer SPH_MATCH_ALL ] { 0 }
    Constant [ integer SPH_MATCH_ANY ] { 1 }
    Constant [ integer SPH_MATCH_PHRASE ] { 2 }
    Constant [ integer SPH_MATCH_BOOLEAN ] { 3 }
    Constant [ integer SPH_MATCH_EXTENDED ] { 4 }
    Constant [ integer SPH_MATCH_FULLSCAN ] { 5 }
    Constant [ integer SPH_MATCH_EXTENDED2 ] { 6 }
    Constant [ integer SPH_RANK_PROXIMITY_BM25 ] { 0 }
    Constant [ integer SPH_RANK_BM25 ] { 1 }
    Constant [ integer SPH_RANK_NONE ] { 2 }
    Constant [ integer SPH_RANK_WORDCOUNT ] { 3 }
    Constant [ integer SPH_RANK_PROXIMITY ] { 4 }
    Constant [ integer SPH_RANK_MATCHANY ] { 5 }
    Constant [ integer SPH_RANK_FIELDMASK ] { 6 }
    Constant [ integer SPH_RANK_SPH04 ] { 7 }
    Constant [ integer SPH_RANK_EXPR ] { 8 }
    Constant [ integer SPH_RANK_TOTAL ] { 9 }
    Constant [ integer SPH_SORT_RELEVANCE ] { 0 }
    Constant [ integer SPH_SORT_ATTR_DESC ] { 1 }
    Constant [ integer SPH_SORT_ATTR_ASC ] { 2 }
    Constant [ integer SPH_SORT_TIME_SEGMENTS ] { 3 }
    Constant [ integer SPH_SORT_EXTENDED ] { 4 }
    Constant [ integer SPH_SORT_EXPR ] { 5 }
    Constant [ integer SPH_FILTER_VALUES ] { 0 }
    Constant [ integer SPH_FILTER_RANGE ] { 1 }
    Constant [ integer SPH_FILTER_FLOATRANGE ] { 2 }
    Constant [ integer SPH_ATTR_INTEGER ] { 1 }
    Constant [ integer SPH_ATTR_TIMESTAMP ] { 2 }
    Constant [ integer SPH_ATTR_ORDINAL ] { 3 }
    Constant [ integer SPH_ATTR_BOOL ] { 4 }
    Constant [ integer SPH_ATTR_FLOAT ] { 5 }
    Constant [ integer SPH_ATTR_MULTI ] { 1073741825 }
    Constant [ integer SPH_GROUPBY_DAY ] { 0 }
    Constant [ integer SPH_GROUPBY_WEEK ] { 1 }
    Constant [ integer SPH_GROUPBY_MONTH ] { 2 }
    Constant [ integer SPH_GROUPBY_YEAR ] { 3 }
    Constant [ integer SPH_GROUPBY_ATTR ] { 4 }
    Constant [ integer SPH_GROUPBY_ATTRPAIR ] { 5 }
  }

  - Classes [1] {
    Class [ <internal:sphinx> class SphinxClient ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [38] {
        Method [ <internal:sphinx, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method addQuery ] {

          - Parameters [3] {
            Parameter #0 [ <required> $query ]
            Parameter #1 [ <optional> $index ]
            Parameter #2 [ <optional> $comment ]
          }
        }

        Method [ <internal:sphinx> public method buildExcerpts ] {

          - Parameters [4] {
            Parameter #0 [ <required> $docs ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $words ]
            Parameter #3 [ <optional> $opts ]
          }
        }

        Method [ <internal:sphinx> public method buildKeywords ] {

          - Parameters [3] {
            Parameter #0 [ <required> $query ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $hits ]
          }
        }

        Method [ <internal:sphinx> public method close ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method getLastError ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method getLastWarning ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:sphinx> public method open ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $query ]
            Parameter #1 [ <optional> $index ]
            Parameter #2 [ <optional> $comment ]
          }
        }

        Method [ <internal:sphinx> public method resetFilters ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method resetGroupBy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method runQueries ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method setArrayResult ] {

          - Parameters [1] {
            Parameter #0 [ <required> $array_result ]
          }
        }

        Method [ <internal:sphinx> public method setConnectTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout ]
          }
        }

        Method [ <internal:sphinx> public method setFieldWeights ] {

          - Parameters [1] {
            Parameter #0 [ <required> $weights ]
          }
        }

        Method [ <internal:sphinx> public method setFilter ] {

          - Parameters [3] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $values ]
            Parameter #2 [ <optional> $exclude ]
          }
        }

        Method [ <internal:sphinx> public method setFilterString ] {

          - Parameters [3] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
            Parameter #2 [ <optional> $exclude ]
          }
        }

        Method [ <internal:sphinx> public method setFilterFloatRange ] {

          - Parameters [4] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $min ]
            Parameter #2 [ <required> $max ]
            Parameter #3 [ <optional> $exclude ]
          }
        }

        Method [ <internal:sphinx> public method setFilterRange ] {

          - Parameters [4] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $min ]
            Parameter #2 [ <required> $max ]
            Parameter #3 [ <optional> $exclude ]
          }
        }

        Method [ <internal:sphinx> public method setGeoAnchor ] {

          - Parameters [4] {
            Parameter #0 [ <required> $attrlat ]
            Parameter #1 [ <required> $attrlong ]
            Parameter #2 [ <required> $latitude ]
            Parameter #3 [ <required> $longitude ]
          }
        }

        Method [ <internal:sphinx> public method setGroupBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $func ]
            Parameter #2 [ <optional> $groupsort ]
          }
        }

        Method [ <internal:sphinx> public method setGroupDistinct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:sphinx> public method setIndexWeights ] {

          - Parameters [1] {
            Parameter #0 [ <required> $weights ]
          }
        }

        Method [ <internal:sphinx> public method setIDRange ] {

          - Parameters [2] {
            Parameter #0 [ <required> $min ]
            Parameter #1 [ <required> $max ]
          }
        }

        Method [ <internal:sphinx> public method setSelect ] {

          - Parameters [1] {
            Parameter #0 [ <required> $clause ]
          }
        }

        Method [ <internal:sphinx> public method setLimits ] {

          - Parameters [4] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $limit ]
            Parameter #2 [ <optional> $max_matches ]
            Parameter #3 [ <optional> $cutoff ]
          }
        }

        Method [ <internal:sphinx> public method setMatchMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $mode ]
          }
        }

        Method [ <internal:sphinx> public method setMaxQueryTime ] {

          - Parameters [1] {
            Parameter #0 [ <required> $qtime ]
          }
        }

        Method [ <internal:sphinx> public method setOverride ] {

          - Parameters [3] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $values ]
          }
        }

        Method [ <internal:sphinx> public method setRankingMode ] {

          - Parameters [2] {
            Parameter #0 [ <required> $ranker ]
            Parameter #1 [ <optional> $rank_expression ]
          }
        }

        Method [ <internal:sphinx> public method setRetries ] {

          - Parameters [2] {
            Parameter #0 [ <required> $count ]
            Parameter #1 [ <optional> $delay ]
          }
        }

        Method [ <internal:sphinx> public method setServer ] {

          - Parameters [2] {
            Parameter #0 [ <required> $server ]
            Parameter #1 [ <required> $port ]
          }
        }

        Method [ <internal:sphinx> public method setSortMode ] {

          - Parameters [2] {
            Parameter #0 [ <required> $mode ]
            Parameter #1 [ <optional> $sortby ]
          }
        }

        Method [ <internal:sphinx> public method status ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:sphinx> public method updateAttributes ] {

          - Parameters [4] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $attributes ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $mva ]
          }
        }

        Method [ <internal:sphinx> final public method __sleep ] {
        }

        Method [ <internal:sphinx> final public method __wakeup ] {
        }
      }
    }
  }
}

