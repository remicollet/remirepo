Extension [ <persistent> extension #72 amqp version 1.8.0beta2 ] {

  - INI {
    Entry [ amqp.host <ALL> ]
      Current = 'localhost'
    }
    Entry [ amqp.vhost <ALL> ]
      Current = '/'
    }
    Entry [ amqp.port <ALL> ]
      Current = '5672'
    }
    Entry [ amqp.timeout <ALL> ]
      Current = ''
    }
    Entry [ amqp.read_timeout <ALL> ]
      Current = '0'
    }
    Entry [ amqp.write_timeout <ALL> ]
      Current = '0'
    }
    Entry [ amqp.connect_timeout <ALL> ]
      Current = '0'
    }
    Entry [ amqp.login <ALL> ]
      Current = 'guest'
    }
    Entry [ amqp.password <ALL> ]
      Current = 'guest'
    }
    Entry [ amqp.auto_ack <ALL> ]
      Current = '0'
    }
    Entry [ amqp.prefetch_count <ALL> ]
      Current = '3'
    }
    Entry [ amqp.channel_max <ALL> ]
      Current = '256'
    }
    Entry [ amqp.frame_max <ALL> ]
      Current = '131072'
    }
    Entry [ amqp.heartbeat <ALL> ]
      Current = '0'
    }
    Entry [ amqp.cacert <ALL> ]
      Current = ''
    }
    Entry [ amqp.cert <ALL> ]
      Current = ''
    }
    Entry [ amqp.key <ALL> ]
      Current = ''
    }
    Entry [ amqp.verify <ALL> ]
      Current = '1'
    }
  }

  - Constants [22] {
    Constant [ integer AMQP_NOPARAM ] { 0 }
    Constant [ integer AMQP_JUST_CONSUME ] { 1 }
    Constant [ integer AMQP_DURABLE ] { 2 }
    Constant [ integer AMQP_PASSIVE ] { 4 }
    Constant [ integer AMQP_EXCLUSIVE ] { 8 }
    Constant [ integer AMQP_AUTODELETE ] { 16 }
    Constant [ integer AMQP_INTERNAL ] { 32 }
    Constant [ integer AMQP_NOLOCAL ] { 64 }
    Constant [ integer AMQP_AUTOACK ] { 128 }
    Constant [ integer AMQP_IFEMPTY ] { 256 }
    Constant [ integer AMQP_IFUNUSED ] { 512 }
    Constant [ integer AMQP_MANDATORY ] { 1024 }
    Constant [ integer AMQP_IMMEDIATE ] { 2048 }
    Constant [ integer AMQP_MULTIPLE ] { 4096 }
    Constant [ integer AMQP_NOWAIT ] { 8192 }
    Constant [ integer AMQP_REQUEUE ] { 16384 }
    Constant [ string AMQP_EX_TYPE_DIRECT ] { direct }
    Constant [ string AMQP_EX_TYPE_FANOUT ] { fanout }
    Constant [ string AMQP_EX_TYPE_TOPIC ] { topic }
    Constant [ string AMQP_EX_TYPE_HEADERS ] { headers }
    Constant [ integer AMQP_OS_SOCKET_TIMEOUT_ERRNO ] { 536870923 }
    Constant [ integer PHP_AMQP_MAX_CHANNELS ] { 256 }
  }

  - Classes [11] {
    Class [ <internal:amqp> class AMQPConnection ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [15] {
        Property [ <default> private $login ]
        Property [ <default> private $password ]
        Property [ <default> private $host ]
        Property [ <default> private $vhost ]
        Property [ <default> private $port ]
        Property [ <default> private $read_timeout ]
        Property [ <default> private $write_timeout ]
        Property [ <default> private $connect_timeout ]
        Property [ <default> private $channel_max ]
        Property [ <default> private $frame_max ]
        Property [ <default> private $heartbeat ]
        Property [ <default> private $cacert ]
        Property [ <default> private $key ]
        Property [ <default> private $cert ]
        Property [ <default> private $verify ]
      }

      - Methods [37] {
        Method [ <internal:amqp, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array $credentials ]
          }
        }

        Method [ <internal:amqp> public method isConnected ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method connect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method pconnect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method pdisconnect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method disconnect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method reconnect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method preconnect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getLogin ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setLogin ] {

          - Parameters [1] {
            Parameter #0 [ <required> $login ]
          }
        }

        Method [ <internal:amqp> public method getPassword ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setPassword ] {

          - Parameters [1] {
            Parameter #0 [ <required> $password ]
          }
        }

        Method [ <internal:amqp> public method getHost ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setHost ] {

          - Parameters [1] {
            Parameter #0 [ <required> $host ]
          }
        }

        Method [ <internal:amqp> public method getPort ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setPort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $port ]
          }
        }

        Method [ <internal:amqp> public method getVhost ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setVhost ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vhost ]
          }
        }

        Method [ <internal:amqp> public method getTimeout ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout ]
          }
        }

        Method [ <internal:amqp> public method getReadTimeout ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setReadTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout ]
          }
        }

        Method [ <internal:amqp> public method getWriteTimeout ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setWriteTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout ]
          }
        }

        Method [ <internal:amqp> public method getUsedChannels ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getMaxChannels ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method isPersistent ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getHeartbeatInterval ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getMaxFrameSize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getCACert ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setCACert ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cacert ]
          }
        }

        Method [ <internal:amqp> public method getCert ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setCert ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cert ]
          }
        }

        Method [ <internal:amqp> public method getKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:amqp> public method getVerify ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setVerify ] {

          - Parameters [1] {
            Parameter #0 [ <required> $verify ]
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPChannel ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> private $connection ]
        Property [ <default> private $prefetch_count ]
        Property [ <default> private $prefetch_size ]
      }

      - Methods [19] {
        Method [ <internal:amqp, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> AMQPConnection $amqp_connection ]
          }
        }

        Method [ <internal:amqp> public method isConnected ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method close ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getChannelId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setPrefetchSize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $size ]
          }
        }

        Method [ <internal:amqp> public method getPrefetchSize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setPrefetchCount ] {

          - Parameters [1] {
            Parameter #0 [ <required> $count ]
          }
        }

        Method [ <internal:amqp> public method getPrefetchCount ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method qos ] {

          - Parameters [2] {
            Parameter #0 [ <required> $size ]
            Parameter #1 [ <required> $count ]
          }
        }

        Method [ <internal:amqp> public method startTransaction ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method commitTransaction ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method rollbackTransaction ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getConnection ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method basicRecover ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $requeue ]
          }
        }

        Method [ <internal:amqp> public method confirmSelect ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method waitForConfirm ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:amqp> public method setConfirmCallback ] {

          - Parameters [2] {
            Parameter #0 [ <required> $ack_callback ]
            Parameter #1 [ <optional> $nack_callback ]
          }
        }

        Method [ <internal:amqp> public method setReturnCallback ] {

          - Parameters [1] {
            Parameter #0 [ <required> $return_callback ]
          }
        }

        Method [ <internal:amqp> public method waitForBasicReturn ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPQueue ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> private $connection ]
        Property [ <default> private $channel ]
        Property [ <default> private $name ]
        Property [ <default> private $consumer_tag ]
        Property [ <default> private $passive ]
        Property [ <default> private $durable ]
        Property [ <default> private $exclusive ]
        Property [ <default> private $auto_delete ]
        Property [ <default> private $arguments ]
      }

      - Methods [25] {
        Method [ <internal:amqp, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> AMQPChannel $amqp_channel ]
          }
        }

        Method [ <internal:amqp> public method getName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $queue_name ]
          }
        }

        Method [ <internal:amqp> public method getFlags ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setFlags ] {

          - Parameters [1] {
            Parameter #0 [ <required> $flags ]
          }
        }

        Method [ <internal:amqp> public method getArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $argument ]
          }
        }

        Method [ <internal:amqp> public method getArguments ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setArgument ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:amqp> public method setArguments ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $arguments ]
          }
        }

        Method [ <internal:amqp> public method hasArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:amqp> public method declareQueue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method bind ] {

          - Parameters [3] {
            Parameter #0 [ <required> $exchange_name ]
            Parameter #1 [ <optional> $routing_key ]
            Parameter #2 [ <optional> $arguments ]
          }
        }

        Method [ <internal:amqp> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method consume ] {

          - Parameters [3] {
            Parameter #0 [ <required> $callback ]
            Parameter #1 [ <optional> $flags ]
            Parameter #2 [ <optional> $consumer_tag ]
          }
        }

        Method [ <internal:amqp> public method ack ] {

          - Parameters [2] {
            Parameter #0 [ <required> $delivery_tag ]
            Parameter #1 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method nack ] {

          - Parameters [2] {
            Parameter #0 [ <required> $delivery_tag ]
            Parameter #1 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method reject ] {

          - Parameters [2] {
            Parameter #0 [ <required> $delivery_tag ]
            Parameter #1 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method purge ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method cancel ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $consumer_tag ]
          }
        }

        Method [ <internal:amqp> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method unbind ] {

          - Parameters [3] {
            Parameter #0 [ <required> $exchange_name ]
            Parameter #1 [ <optional> $routing_key ]
            Parameter #2 [ <optional> $arguments ]
          }
        }

        Method [ <internal:amqp> public method getChannel ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getConnection ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getConsumerTag ] {

          - Parameters [0] {
          }
        }

        Method [ <internal, deprecated:amqp> public method declare ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPExchange ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> private $connection ]
        Property [ <default> private $channel ]
        Property [ <default> private $name ]
        Property [ <default> private $type ]
        Property [ <default> private $passive ]
        Property [ <default> private $durable ]
        Property [ <default> private $auto_delete ]
        Property [ <default> private $internal ]
        Property [ <default> private $arguments ]
      }

      - Methods [20] {
        Method [ <internal:amqp, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> AMQPChannel $amqp_channel ]
          }
        }

        Method [ <internal:amqp> public method getName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $exchange_name ]
          }
        }

        Method [ <internal:amqp> public method getFlags ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setFlags ] {

          - Parameters [1] {
            Parameter #0 [ <required> $flags ]
          }
        }

        Method [ <internal:amqp> public method getType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $exchange_type ]
          }
        }

        Method [ <internal:amqp> public method getArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $argument ]
          }
        }

        Method [ <internal:amqp> public method getArguments ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method setArgument ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:amqp> public method setArguments ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $arguments ]
          }
        }

        Method [ <internal:amqp> public method hasArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $argument ]
          }
        }

        Method [ <internal:amqp> public method declareExchange ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method bind ] {

          - Parameters [3] {
            Parameter #0 [ <required> $exchange_name ]
            Parameter #1 [ <required> $routing_key ]
            Parameter #2 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method unbind ] {

          - Parameters [3] {
            Parameter #0 [ <required> $exchange_name ]
            Parameter #1 [ <required> $routing_key ]
            Parameter #2 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method delete ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $exchange_name ]
            Parameter #1 [ <optional> $flags ]
          }
        }

        Method [ <internal:amqp> public method publish ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $routing_key ]
            Parameter #2 [ <optional> $flags ]
            Parameter #3 [ <optional> array $headers ]
          }
        }

        Method [ <internal:amqp> public method getChannel ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getConnection ] {

          - Parameters [0] {
          }
        }

        Method [ <internal, deprecated:amqp> public method declare ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPBasicProperties ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [14] {
        Property [ <default> private $content_type ]
        Property [ <default> private $content_encoding ]
        Property [ <default> private $headers ]
        Property [ <default> private $delivery_mode ]
        Property [ <default> private $priority ]
        Property [ <default> private $correlation_id ]
        Property [ <default> private $reply_to ]
        Property [ <default> private $expiration ]
        Property [ <default> private $message_id ]
        Property [ <default> private $timestamp ]
        Property [ <default> private $type ]
        Property [ <default> private $user_id ]
        Property [ <default> private $app_id ]
        Property [ <default> private $cluster_id ]
      }

      - Methods [15] {
        Method [ <internal:amqp, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getContentType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getContentEncoding ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getDeliveryMode ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getPriority ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getCorrelationId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getReplyTo ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getExpiration ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getMessageId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getTimestamp ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getUserId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getAppId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getClusterId ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPEnvelope extends AMQPBasicProperties ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> private $body ]
        Property [ <default> private $delivery_tag ]
        Property [ <default> private $is_redelivery ]
        Property [ <default> private $exchange_name ]
        Property [ <default> private $routing_key ]
      }

      - Methods [22] {
        Method [ <internal:amqp, overwrites AMQPBasicProperties, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getBody ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getRoutingKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getDeliveryTag ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getExchangeName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method isRedelivery ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp> public method getHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:amqp> public method hasHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getContentType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getContentEncoding ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getDeliveryMode ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getPriority ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getCorrelationId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getReplyTo ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getExpiration ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getMessageId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getTimestamp ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getUserId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getAppId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:amqp, inherits AMQPBasicProperties> public method getClusterId ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:amqp> class AMQPException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:amqp> class AMQPConnectionException extends AMQPException implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:amqp> class AMQPChannelException extends AMQPException implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:amqp> class AMQPQueueException extends AMQPException implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:amqp> class AMQPExchangeException extends AMQPException implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }
  }
}

