Extension [ <persistent> extension #97 imagick version 3.4.3RC4 ] {

  - Dependencies {
    Dependency [ spl (Required) ]
  }

  - INI {
    Entry [ imagick.locale_fix <ALL> ]
      Current = '0'
    }
    Entry [ imagick.skip_version_check <ALL> ]
      Current = '1'
    }
    Entry [ imagick.progress_monitor <SYSTEM> ]
      Current = '0'
    }
  }

  - Classes [10] {
    Class [ <internal:imagick> class ImagickException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:imagick> class ImagickDrawException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:imagick> class ImagickPixelIteratorException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:imagick> class ImagickPixelException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:imagick> class ImagickKernelException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:imagick> <iterateable> class Imagick implements Iterator, Traversable, Countable ] {

      - Constants [570] {
        Constant [ integer COLOR_BLACK ] { 11 }
        Constant [ integer COLOR_BLUE ] { 12 }
        Constant [ integer COLOR_CYAN ] { 13 }
        Constant [ integer COLOR_GREEN ] { 14 }
        Constant [ integer COLOR_RED ] { 15 }
        Constant [ integer COLOR_YELLOW ] { 16 }
        Constant [ integer COLOR_MAGENTA ] { 17 }
        Constant [ integer COLOR_OPACITY ] { 18 }
        Constant [ integer COLOR_ALPHA ] { 19 }
        Constant [ integer COLOR_FUZZ ] { 20 }
        Constant [ integer IMAGICK_EXTNUM ] { 30403 }
        Constant [ string IMAGICK_EXTVER ] { 3.4.3RC4 }
        Constant [ integer QUANTUM_RANGE ] { 65535 }
        Constant [ integer USE_ZEND_MM ] { 0 }
        Constant [ integer COMPOSITE_DEFAULT ] { 40 }
        Constant [ integer COMPOSITE_UNDEFINED ] { 0 }
        Constant [ integer COMPOSITE_NO ] { 1 }
        Constant [ integer COMPOSITE_ADD ] { 2 }
        Constant [ integer COMPOSITE_ATOP ] { 3 }
        Constant [ integer COMPOSITE_BLEND ] { 4 }
        Constant [ integer COMPOSITE_BUMPMAP ] { 5 }
        Constant [ integer COMPOSITE_CLEAR ] { 7 }
        Constant [ integer COMPOSITE_COLORBURN ] { 8 }
        Constant [ integer COMPOSITE_COLORDODGE ] { 9 }
        Constant [ integer COMPOSITE_COLORIZE ] { 10 }
        Constant [ integer COMPOSITE_COPYBLACK ] { 11 }
        Constant [ integer COMPOSITE_COPYBLUE ] { 12 }
        Constant [ integer COMPOSITE_COPY ] { 13 }
        Constant [ integer COMPOSITE_COPYCYAN ] { 14 }
        Constant [ integer COMPOSITE_COPYGREEN ] { 15 }
        Constant [ integer COMPOSITE_COPYMAGENTA ] { 16 }
        Constant [ integer COMPOSITE_COPYOPACITY ] { 17 }
        Constant [ integer COMPOSITE_COPYRED ] { 18 }
        Constant [ integer COMPOSITE_COPYYELLOW ] { 19 }
        Constant [ integer COMPOSITE_DARKEN ] { 20 }
        Constant [ integer COMPOSITE_DSTATOP ] { 21 }
        Constant [ integer COMPOSITE_DST ] { 22 }
        Constant [ integer COMPOSITE_DSTIN ] { 23 }
        Constant [ integer COMPOSITE_DSTOUT ] { 24 }
        Constant [ integer COMPOSITE_DSTOVER ] { 25 }
        Constant [ integer COMPOSITE_DIFFERENCE ] { 26 }
        Constant [ integer COMPOSITE_DISPLACE ] { 27 }
        Constant [ integer COMPOSITE_DISSOLVE ] { 28 }
        Constant [ integer COMPOSITE_EXCLUSION ] { 29 }
        Constant [ integer COMPOSITE_HARDLIGHT ] { 30 }
        Constant [ integer COMPOSITE_HUE ] { 31 }
        Constant [ integer COMPOSITE_IN ] { 32 }
        Constant [ integer COMPOSITE_LIGHTEN ] { 33 }
        Constant [ integer COMPOSITE_LUMINIZE ] { 35 }
        Constant [ integer COMPOSITE_MINUS ] { 36 }
        Constant [ integer COMPOSITE_MODULATE ] { 37 }
        Constant [ integer COMPOSITE_MULTIPLY ] { 38 }
        Constant [ integer COMPOSITE_OUT ] { 39 }
        Constant [ integer COMPOSITE_OVER ] { 40 }
        Constant [ integer COMPOSITE_OVERLAY ] { 41 }
        Constant [ integer COMPOSITE_PLUS ] { 42 }
        Constant [ integer COMPOSITE_REPLACE ] { 43 }
        Constant [ integer COMPOSITE_SATURATE ] { 44 }
        Constant [ integer COMPOSITE_SCREEN ] { 45 }
        Constant [ integer COMPOSITE_SOFTLIGHT ] { 46 }
        Constant [ integer COMPOSITE_SRCATOP ] { 47 }
        Constant [ integer COMPOSITE_SRC ] { 48 }
        Constant [ integer COMPOSITE_SRCIN ] { 49 }
        Constant [ integer COMPOSITE_SRCOUT ] { 50 }
        Constant [ integer COMPOSITE_SRCOVER ] { 51 }
        Constant [ integer COMPOSITE_SUBTRACT ] { 52 }
        Constant [ integer COMPOSITE_THRESHOLD ] { 53 }
        Constant [ integer COMPOSITE_XOR ] { 54 }
        Constant [ integer COMPOSITE_CHANGEMASK ] { 6 }
        Constant [ integer COMPOSITE_LINEARLIGHT ] { 34 }
        Constant [ integer COMPOSITE_DIVIDE ] { 55 }
        Constant [ integer COMPOSITE_DISTORT ] { 56 }
        Constant [ integer COMPOSITE_BLUR ] { 57 }
        Constant [ integer COMPOSITE_PEGTOPLIGHT ] { 58 }
        Constant [ integer COMPOSITE_VIVIDLIGHT ] { 59 }
        Constant [ integer COMPOSITE_PINLIGHT ] { 60 }
        Constant [ integer COMPOSITE_LINEARDODGE ] { 61 }
        Constant [ integer COMPOSITE_LINEARBURN ] { 62 }
        Constant [ integer COMPOSITE_MATHEMATICS ] { 63 }
        Constant [ integer COMPOSITE_MODULUSADD ] { 2 }
        Constant [ integer COMPOSITE_MODULUSSUBTRACT ] { 52 }
        Constant [ integer COMPOSITE_MINUSDST ] { 36 }
        Constant [ integer COMPOSITE_DIVIDEDST ] { 55 }
        Constant [ integer COMPOSITE_DIVIDESRC ] { 64 }
        Constant [ integer COMPOSITE_MINUSSRC ] { 65 }
        Constant [ integer COMPOSITE_DARKENINTENSITY ] { 66 }
        Constant [ integer COMPOSITE_LIGHTENINTENSITY ] { 67 }
        Constant [ integer COMPOSITE_HARDMIX ] { 68 }
        Constant [ integer MONTAGEMODE_FRAME ] { 1 }
        Constant [ integer MONTAGEMODE_UNFRAME ] { 2 }
        Constant [ integer MONTAGEMODE_CONCATENATE ] { 3 }
        Constant [ integer STYLE_NORMAL ] { 1 }
        Constant [ integer STYLE_ITALIC ] { 2 }
        Constant [ integer STYLE_OBLIQUE ] { 3 }
        Constant [ integer STYLE_ANY ] { 4 }
        Constant [ integer FILTER_UNDEFINED ] { 0 }
        Constant [ integer FILTER_POINT ] { 1 }
        Constant [ integer FILTER_BOX ] { 2 }
        Constant [ integer FILTER_TRIANGLE ] { 3 }
        Constant [ integer FILTER_HERMITE ] { 4 }
        Constant [ integer FILTER_HANNING ] { 5 }
        Constant [ integer FILTER_HAMMING ] { 6 }
        Constant [ integer FILTER_BLACKMAN ] { 7 }
        Constant [ integer FILTER_GAUSSIAN ] { 8 }
        Constant [ integer FILTER_QUADRATIC ] { 9 }
        Constant [ integer FILTER_CUBIC ] { 10 }
        Constant [ integer FILTER_CATROM ] { 11 }
        Constant [ integer FILTER_MITCHELL ] { 12 }
        Constant [ integer FILTER_LANCZOS ] { 22 }
        Constant [ integer FILTER_BESSEL ] { 13 }
        Constant [ integer FILTER_SINC ] { 14 }
        Constant [ integer FILTER_KAISER ] { 16 }
        Constant [ integer FILTER_WELSH ] { 17 }
        Constant [ integer FILTER_PARZEN ] { 18 }
        Constant [ integer FILTER_LAGRANGE ] { 21 }
        Constant [ integer FILTER_SENTINEL ] { 31 }
        Constant [ integer FILTER_BOHMAN ] { 19 }
        Constant [ integer FILTER_BARTLETT ] { 20 }
        Constant [ integer FILTER_JINC ] { 13 }
        Constant [ integer FILTER_SINCFAST ] { 15 }
        Constant [ integer FILTER_ROBIDOUX ] { 26 }
        Constant [ integer FILTER_LANCZOSSHARP ] { 23 }
        Constant [ integer FILTER_LANCZOS2 ] { 24 }
        Constant [ integer FILTER_LANCZOS2SHARP ] { 25 }
        Constant [ integer FILTER_ROBIDOUXSHARP ] { 27 }
        Constant [ integer FILTER_COSINE ] { 28 }
        Constant [ integer FILTER_SPLINE ] { 29 }
        Constant [ integer FILTER_LANCZOSRADIUS ] { 30 }
        Constant [ integer IMGTYPE_UNDEFINED ] { 0 }
        Constant [ integer IMGTYPE_BILEVEL ] { 1 }
        Constant [ integer IMGTYPE_GRAYSCALE ] { 2 }
        Constant [ integer IMGTYPE_GRAYSCALEMATTE ] { 3 }
        Constant [ integer IMGTYPE_PALETTE ] { 4 }
        Constant [ integer IMGTYPE_PALETTEMATTE ] { 5 }
        Constant [ integer IMGTYPE_TRUECOLOR ] { 6 }
        Constant [ integer IMGTYPE_TRUECOLORMATTE ] { 7 }
        Constant [ integer IMGTYPE_COLORSEPARATION ] { 8 }
        Constant [ integer IMGTYPE_COLORSEPARATIONMATTE ] { 9 }
        Constant [ integer IMGTYPE_OPTIMIZE ] { 10 }
        Constant [ integer IMGTYPE_PALETTEBILEVELMATTE ] { 11 }
        Constant [ integer RESOLUTION_UNDEFINED ] { 0 }
        Constant [ integer RESOLUTION_PIXELSPERINCH ] { 1 }
        Constant [ integer RESOLUTION_PIXELSPERCENTIMETER ] { 2 }
        Constant [ integer COMPRESSION_UNDEFINED ] { 0 }
        Constant [ integer COMPRESSION_NO ] { 1 }
        Constant [ integer COMPRESSION_BZIP ] { 2 }
        Constant [ integer COMPRESSION_FAX ] { 6 }
        Constant [ integer COMPRESSION_GROUP4 ] { 7 }
        Constant [ integer COMPRESSION_JPEG ] { 8 }
        Constant [ integer COMPRESSION_JPEG2000 ] { 9 }
        Constant [ integer COMPRESSION_LOSSLESSJPEG ] { 10 }
        Constant [ integer COMPRESSION_LZW ] { 11 }
        Constant [ integer COMPRESSION_RLE ] { 12 }
        Constant [ integer COMPRESSION_ZIP ] { 13 }
        Constant [ integer COMPRESSION_DXT1 ] { 3 }
        Constant [ integer COMPRESSION_DXT3 ] { 4 }
        Constant [ integer COMPRESSION_DXT5 ] { 5 }
        Constant [ integer COMPRESSION_ZIPS ] { 14 }
        Constant [ integer COMPRESSION_PIZ ] { 15 }
        Constant [ integer COMPRESSION_PXR24 ] { 16 }
        Constant [ integer COMPRESSION_B44 ] { 17 }
        Constant [ integer COMPRESSION_B44A ] { 18 }
        Constant [ integer COMPRESSION_LZMA ] { 19 }
        Constant [ integer COMPRESSION_JBIG1 ] { 20 }
        Constant [ integer COMPRESSION_JBIG2 ] { 21 }
        Constant [ integer PAINT_POINT ] { 1 }
        Constant [ integer PAINT_REPLACE ] { 2 }
        Constant [ integer PAINT_FLOODFILL ] { 3 }
        Constant [ integer PAINT_FILLTOBORDER ] { 4 }
        Constant [ integer PAINT_RESET ] { 5 }
        Constant [ integer GRAVITY_NORTHWEST ] { 1 }
        Constant [ integer GRAVITY_NORTH ] { 2 }
        Constant [ integer GRAVITY_NORTHEAST ] { 3 }
        Constant [ integer GRAVITY_WEST ] { 4 }
        Constant [ integer GRAVITY_CENTER ] { 5 }
        Constant [ integer GRAVITY_EAST ] { 6 }
        Constant [ integer GRAVITY_SOUTHWEST ] { 7 }
        Constant [ integer GRAVITY_SOUTH ] { 8 }
        Constant [ integer GRAVITY_SOUTHEAST ] { 9 }
        Constant [ integer GRAVITY_FORGET ] { 0 }
        Constant [ integer GRAVITY_STATIC ] { 10 }
        Constant [ integer STRETCH_NORMAL ] { 1 }
        Constant [ integer STRETCH_ULTRACONDENSED ] { 2 }
        Constant [ integer STRETCH_EXTRACONDENSED ] { 3 }
        Constant [ integer STRETCH_CONDENSED ] { 4 }
        Constant [ integer STRETCH_SEMICONDENSED ] { 5 }
        Constant [ integer STRETCH_SEMIEXPANDED ] { 6 }
        Constant [ integer STRETCH_EXPANDED ] { 7 }
        Constant [ integer STRETCH_EXTRAEXPANDED ] { 8 }
        Constant [ integer STRETCH_ULTRAEXPANDED ] { 9 }
        Constant [ integer STRETCH_ANY ] { 10 }
        Constant [ integer ALIGN_UNDEFINED ] { 0 }
        Constant [ integer ALIGN_LEFT ] { 1 }
        Constant [ integer ALIGN_CENTER ] { 2 }
        Constant [ integer ALIGN_RIGHT ] { 3 }
        Constant [ integer DECORATION_NO ] { 1 }
        Constant [ integer DECORATION_UNDERLINE ] { 2 }
        Constant [ integer DECORATION_OVERLINE ] { 3 }
        Constant [ integer DECORATION_LINETROUGH ] { 4 }
        Constant [ integer DECORATION_LINETHROUGH ] { 4 }
        Constant [ integer NOISE_UNIFORM ] { 1 }
        Constant [ integer NOISE_GAUSSIAN ] { 2 }
        Constant [ integer NOISE_MULTIPLICATIVEGAUSSIAN ] { 3 }
        Constant [ integer NOISE_IMPULSE ] { 4 }
        Constant [ integer NOISE_LAPLACIAN ] { 5 }
        Constant [ integer NOISE_POISSON ] { 6 }
        Constant [ integer NOISE_RANDOM ] { 7 }
        Constant [ integer CHANNEL_UNDEFINED ] { 0 }
        Constant [ integer CHANNEL_RED ] { 1 }
        Constant [ integer CHANNEL_GRAY ] { 1 }
        Constant [ integer CHANNEL_CYAN ] { 1 }
        Constant [ integer CHANNEL_GREEN ] { 2 }
        Constant [ integer CHANNEL_MAGENTA ] { 2 }
        Constant [ integer CHANNEL_BLUE ] { 4 }
        Constant [ integer CHANNEL_YELLOW ] { 4 }
        Constant [ integer CHANNEL_ALPHA ] { 8 }
        Constant [ integer CHANNEL_OPACITY ] { 8 }
        Constant [ integer CHANNEL_MATTE ] { 8 }
        Constant [ integer CHANNEL_BLACK ] { 32 }
        Constant [ integer CHANNEL_INDEX ] { 32 }
        Constant [ integer CHANNEL_ALL ] { 134217727 }
        Constant [ integer CHANNEL_DEFAULT ] { 134217719 }
        Constant [ integer CHANNEL_RGBA ] { 15 }
        Constant [ integer CHANNEL_TRUEALPHA ] { 64 }
        Constant [ integer CHANNEL_RGBS ] { 128 }
        Constant [ integer CHANNEL_GRAY_CHANNELS ] { 128 }
        Constant [ integer CHANNEL_SYNC ] { 256 }
        Constant [ integer CHANNEL_COMPOSITES ] { 47 }
        Constant [ integer METRIC_UNDEFINED ] { 0 }
        Constant [ integer METRIC_ABSOLUTEERRORMETRIC ] { 1 }
        Constant [ integer METRIC_MEANABSOLUTEERROR ] { 2 }
        Constant [ integer METRIC_MEANERRORPERPIXELMETRIC ] { 3 }
        Constant [ integer METRIC_MEANSQUAREERROR ] { 4 }
        Constant [ integer METRIC_PEAKABSOLUTEERROR ] { 5 }
        Constant [ integer METRIC_PEAKSIGNALTONOISERATIO ] { 6 }
        Constant [ integer METRIC_ROOTMEANSQUAREDERROR ] { 7 }
        Constant [ integer METRIC_NORMALIZEDCROSSCORRELATIONERRORMETRIC ] { 8 }
        Constant [ integer METRIC_FUZZERROR ] { 9 }
        Constant [ integer METRIC_PERCEPTUALHASH_ERROR ] { 255 }
        Constant [ integer PIXEL_CHAR ] { 1 }
        Constant [ integer PIXEL_DOUBLE ] { 2 }
        Constant [ integer PIXEL_FLOAT ] { 3 }
        Constant [ integer PIXEL_INTEGER ] { 4 }
        Constant [ integer PIXEL_LONG ] { 5 }
        Constant [ integer PIXEL_QUANTUM ] { 6 }
        Constant [ integer PIXEL_SHORT ] { 7 }
        Constant [ integer EVALUATE_UNDEFINED ] { 0 }
        Constant [ integer EVALUATE_ADD ] { 1 }
        Constant [ integer EVALUATE_AND ] { 2 }
        Constant [ integer EVALUATE_DIVIDE ] { 3 }
        Constant [ integer EVALUATE_LEFTSHIFT ] { 4 }
        Constant [ integer EVALUATE_MAX ] { 5 }
        Constant [ integer EVALUATE_MIN ] { 6 }
        Constant [ integer EVALUATE_MULTIPLY ] { 7 }
        Constant [ integer EVALUATE_OR ] { 8 }
        Constant [ integer EVALUATE_RIGHTSHIFT ] { 9 }
        Constant [ integer EVALUATE_SET ] { 10 }
        Constant [ integer EVALUATE_SUBTRACT ] { 11 }
        Constant [ integer EVALUATE_XOR ] { 12 }
        Constant [ integer EVALUATE_POW ] { 13 }
        Constant [ integer EVALUATE_LOG ] { 14 }
        Constant [ integer EVALUATE_THRESHOLD ] { 15 }
        Constant [ integer EVALUATE_THRESHOLDBLACK ] { 16 }
        Constant [ integer EVALUATE_THRESHOLDWHITE ] { 17 }
        Constant [ integer EVALUATE_GAUSSIANNOISE ] { 18 }
        Constant [ integer EVALUATE_IMPULSENOISE ] { 19 }
        Constant [ integer EVALUATE_LAPLACIANNOISE ] { 20 }
        Constant [ integer EVALUATE_MULTIPLICATIVENOISE ] { 21 }
        Constant [ integer EVALUATE_POISSONNOISE ] { 22 }
        Constant [ integer EVALUATE_UNIFORMNOISE ] { 23 }
        Constant [ integer EVALUATE_COSINE ] { 24 }
        Constant [ integer EVALUATE_SINE ] { 25 }
        Constant [ integer EVALUATE_ADDMODULUS ] { 26 }
        Constant [ integer EVALUATE_MEAN ] { 27 }
        Constant [ integer EVALUATE_ABS ] { 28 }
        Constant [ integer EVALUATE_EXPONENTIAL ] { 29 }
        Constant [ integer EVALUATE_MEDIAN ] { 30 }
        Constant [ integer EVALUATE_SUM ] { 31 }
        Constant [ integer EVALUATE_ROOT_MEAN_SQUARE ] { 32 }
        Constant [ integer COLORSPACE_UNDEFINED ] { 0 }
        Constant [ integer COLORSPACE_RGB ] { 1 }
        Constant [ integer COLORSPACE_GRAY ] { 2 }
        Constant [ integer COLORSPACE_TRANSPARENT ] { 3 }
        Constant [ integer COLORSPACE_OHTA ] { 4 }
        Constant [ integer COLORSPACE_LAB ] { 5 }
        Constant [ integer COLORSPACE_XYZ ] { 6 }
        Constant [ integer COLORSPACE_YCBCR ] { 7 }
        Constant [ integer COLORSPACE_YCC ] { 8 }
        Constant [ integer COLORSPACE_YIQ ] { 9 }
        Constant [ integer COLORSPACE_YPBPR ] { 10 }
        Constant [ integer COLORSPACE_YUV ] { 11 }
        Constant [ integer COLORSPACE_CMYK ] { 12 }
        Constant [ integer COLORSPACE_SRGB ] { 13 }
        Constant [ integer COLORSPACE_HSB ] { 14 }
        Constant [ integer COLORSPACE_HSL ] { 15 }
        Constant [ integer COLORSPACE_HWB ] { 16 }
        Constant [ integer COLORSPACE_REC601LUMA ] { 17 }
        Constant [ integer COLORSPACE_REC709LUMA ] { 19 }
        Constant [ integer COLORSPACE_LOG ] { 21 }
        Constant [ integer COLORSPACE_CMY ] { 22 }
        Constant [ integer COLORSPACE_LUV ] { 23 }
        Constant [ integer COLORSPACE_HCL ] { 24 }
        Constant [ integer COLORSPACE_LCH ] { 25 }
        Constant [ integer COLORSPACE_LMS ] { 26 }
        Constant [ integer COLORSPACE_LCHAB ] { 27 }
        Constant [ integer COLORSPACE_LCHUV ] { 28 }
        Constant [ integer COLORSPACE_SCRGB ] { 29 }
        Constant [ integer COLORSPACE_HSI ] { 30 }
        Constant [ integer COLORSPACE_HSV ] { 31 }
        Constant [ integer COLORSPACE_HCLP ] { 32 }
        Constant [ integer COLORSPACE_YDBDR ] { 33 }
        Constant [ integer COLORSPACE_REC601YCBCR ] { 18 }
        Constant [ integer COLORSPACE_REC709YCBCR ] { 20 }
        Constant [ integer COLORSPACE_XYY ] { 34 }
        Constant [ integer VIRTUALPIXELMETHOD_UNDEFINED ] { 0 }
        Constant [ integer VIRTUALPIXELMETHOD_BACKGROUND ] { 1 }
        Constant [ integer VIRTUALPIXELMETHOD_CONSTANT ] { 2 }
        Constant [ integer VIRTUALPIXELMETHOD_EDGE ] { 4 }
        Constant [ integer VIRTUALPIXELMETHOD_MIRROR ] { 5 }
        Constant [ integer VIRTUALPIXELMETHOD_TILE ] { 7 }
        Constant [ integer VIRTUALPIXELMETHOD_TRANSPARENT ] { 8 }
        Constant [ integer VIRTUALPIXELMETHOD_MASK ] { 9 }
        Constant [ integer VIRTUALPIXELMETHOD_BLACK ] { 10 }
        Constant [ integer VIRTUALPIXELMETHOD_GRAY ] { 11 }
        Constant [ integer VIRTUALPIXELMETHOD_WHITE ] { 12 }
        Constant [ integer VIRTUALPIXELMETHOD_HORIZONTALTILE ] { 13 }
        Constant [ integer VIRTUALPIXELMETHOD_VERTICALTILE ] { 14 }
        Constant [ integer VIRTUALPIXELMETHOD_HORIZONTALTILEEDGE ] { 15 }
        Constant [ integer VIRTUALPIXELMETHOD_VERTICALTILEEDGE ] { 16 }
        Constant [ integer VIRTUALPIXELMETHOD_CHECKERTILE ] { 17 }
        Constant [ integer PREVIEW_UNDEFINED ] { 0 }
        Constant [ integer PREVIEW_ROTATE ] { 1 }
        Constant [ integer PREVIEW_SHEAR ] { 2 }
        Constant [ integer PREVIEW_ROLL ] { 3 }
        Constant [ integer PREVIEW_HUE ] { 4 }
        Constant [ integer PREVIEW_SATURATION ] { 5 }
        Constant [ integer PREVIEW_BRIGHTNESS ] { 6 }
        Constant [ integer PREVIEW_GAMMA ] { 7 }
        Constant [ integer PREVIEW_SPIFF ] { 8 }
        Constant [ integer PREVIEW_DULL ] { 9 }
        Constant [ integer PREVIEW_GRAYSCALE ] { 10 }
        Constant [ integer PREVIEW_QUANTIZE ] { 11 }
        Constant [ integer PREVIEW_DESPECKLE ] { 12 }
        Constant [ integer PREVIEW_REDUCENOISE ] { 13 }
        Constant [ integer PREVIEW_ADDNOISE ] { 14 }
        Constant [ integer PREVIEW_SHARPEN ] { 15 }
        Constant [ integer PREVIEW_BLUR ] { 16 }
        Constant [ integer PREVIEW_THRESHOLD ] { 17 }
        Constant [ integer PREVIEW_EDGEDETECT ] { 18 }
        Constant [ integer PREVIEW_SPREAD ] { 19 }
        Constant [ integer PREVIEW_SOLARIZE ] { 20 }
        Constant [ integer PREVIEW_SHADE ] { 21 }
        Constant [ integer PREVIEW_RAISE ] { 22 }
        Constant [ integer PREVIEW_SEGMENT ] { 23 }
        Constant [ integer PREVIEW_SWIRL ] { 24 }
        Constant [ integer PREVIEW_IMPLODE ] { 25 }
        Constant [ integer PREVIEW_WAVE ] { 26 }
        Constant [ integer PREVIEW_OILPAINT ] { 27 }
        Constant [ integer PREVIEW_CHARCOALDRAWING ] { 28 }
        Constant [ integer PREVIEW_JPEG ] { 29 }
        Constant [ integer RENDERINGINTENT_UNDEFINED ] { 0 }
        Constant [ integer RENDERINGINTENT_SATURATION ] { 1 }
        Constant [ integer RENDERINGINTENT_PERCEPTUAL ] { 2 }
        Constant [ integer RENDERINGINTENT_ABSOLUTE ] { 3 }
        Constant [ integer RENDERINGINTENT_RELATIVE ] { 4 }
        Constant [ integer INTERLACE_UNDEFINED ] { 0 }
        Constant [ integer INTERLACE_NO ] { 1 }
        Constant [ integer INTERLACE_LINE ] { 2 }
        Constant [ integer INTERLACE_PLANE ] { 3 }
        Constant [ integer INTERLACE_PARTITION ] { 4 }
        Constant [ integer INTERLACE_GIF ] { 5 }
        Constant [ integer INTERLACE_JPEG ] { 6 }
        Constant [ integer INTERLACE_PNG ] { 7 }
        Constant [ integer FILLRULE_UNDEFINED ] { 0 }
        Constant [ integer FILLRULE_EVENODD ] { 1 }
        Constant [ integer FILLRULE_NONZERO ] { 2 }
        Constant [ integer PATHUNITS_UNDEFINED ] { 0 }
        Constant [ integer PATHUNITS_USERSPACE ] { 1 }
        Constant [ integer PATHUNITS_USERSPACEONUSE ] { 2 }
        Constant [ integer PATHUNITS_OBJECTBOUNDINGBOX ] { 3 }
        Constant [ integer LINECAP_UNDEFINED ] { 0 }
        Constant [ integer LINECAP_BUTT ] { 1 }
        Constant [ integer LINECAP_ROUND ] { 2 }
        Constant [ integer LINECAP_SQUARE ] { 3 }
        Constant [ integer LINEJOIN_UNDEFINED ] { 0 }
        Constant [ integer LINEJOIN_MITER ] { 1 }
        Constant [ integer LINEJOIN_ROUND ] { 2 }
        Constant [ integer LINEJOIN_BEVEL ] { 3 }
        Constant [ integer RESOURCETYPE_UNDEFINED ] { 0 }
        Constant [ integer RESOURCETYPE_AREA ] { 1 }
        Constant [ integer RESOURCETYPE_DISK ] { 2 }
        Constant [ integer RESOURCETYPE_FILE ] { 3 }
        Constant [ integer RESOURCETYPE_MAP ] { 4 }
        Constant [ integer RESOURCETYPE_MEMORY ] { 5 }
        Constant [ integer RESOURCETYPE_TIME ] { 7 }
        Constant [ integer RESOURCETYPE_THROTTLE ] { 8 }
        Constant [ integer RESOURCETYPE_THREAD ] { 6 }
        Constant [ integer RESOURCETYPE_WIDTH ] { 9 }
        Constant [ integer RESOURCETYPE_HEIGHT ] { 10 }
        Constant [ integer DISPOSE_UNRECOGNIZED ] { 0 }
        Constant [ integer DISPOSE_UNDEFINED ] { 0 }
        Constant [ integer DISPOSE_NONE ] { 1 }
        Constant [ integer DISPOSE_BACKGROUND ] { 2 }
        Constant [ integer DISPOSE_PREVIOUS ] { 3 }
        Constant [ integer INTERPOLATE_UNDEFINED ] { 0 }
        Constant [ integer INTERPOLATE_AVERAGE ] { 1 }
        Constant [ integer INTERPOLATE_BICUBIC ] { 2 }
        Constant [ integer INTERPOLATE_BILINEAR ] { 3 }
        Constant [ integer INTERPOLATE_FILTER ] { 4 }
        Constant [ integer INTERPOLATE_INTEGER ] { 5 }
        Constant [ integer INTERPOLATE_MESH ] { 6 }
        Constant [ integer INTERPOLATE_NEARESTNEIGHBOR ] { 7 }
        Constant [ integer INTERPOLATE_SPLINE ] { 8 }
        Constant [ integer INTERPOLATE_AVERAGE_9 ] { 9 }
        Constant [ integer INTERPOLATE_AVERAGE_16 ] { 10 }
        Constant [ integer INTERPOLATE_BLEND ] { 11 }
        Constant [ integer INTERPOLATE_BACKGROUND_COLOR ] { 12 }
        Constant [ integer INTERPOLATE_CATROM ] { 13 }
        Constant [ integer LAYERMETHOD_UNDEFINED ] { 0 }
        Constant [ integer LAYERMETHOD_COALESCE ] { 1 }
        Constant [ integer LAYERMETHOD_COMPAREANY ] { 2 }
        Constant [ integer LAYERMETHOD_COMPARECLEAR ] { 3 }
        Constant [ integer LAYERMETHOD_COMPAREOVERLAY ] { 4 }
        Constant [ integer LAYERMETHOD_DISPOSE ] { 5 }
        Constant [ integer LAYERMETHOD_OPTIMIZE ] { 6 }
        Constant [ integer LAYERMETHOD_OPTIMIZEPLUS ] { 8 }
        Constant [ integer LAYERMETHOD_OPTIMIZETRANS ] { 9 }
        Constant [ integer LAYERMETHOD_COMPOSITE ] { 12 }
        Constant [ integer LAYERMETHOD_OPTIMIZEIMAGE ] { 7 }
        Constant [ integer LAYERMETHOD_REMOVEDUPS ] { 10 }
        Constant [ integer LAYERMETHOD_REMOVEZERO ] { 11 }
        Constant [ integer LAYERMETHOD_TRIMBOUNDS ] { 16 }
        Constant [ integer ORIENTATION_UNDEFINED ] { 0 }
        Constant [ integer ORIENTATION_TOPLEFT ] { 1 }
        Constant [ integer ORIENTATION_TOPRIGHT ] { 2 }
        Constant [ integer ORIENTATION_BOTTOMRIGHT ] { 3 }
        Constant [ integer ORIENTATION_BOTTOMLEFT ] { 4 }
        Constant [ integer ORIENTATION_LEFTTOP ] { 5 }
        Constant [ integer ORIENTATION_RIGHTTOP ] { 6 }
        Constant [ integer ORIENTATION_RIGHTBOTTOM ] { 7 }
        Constant [ integer ORIENTATION_LEFTBOTTOM ] { 8 }
        Constant [ integer DISTORTION_UNDEFINED ] { 0 }
        Constant [ integer DISTORTION_AFFINE ] { 1 }
        Constant [ integer DISTORTION_AFFINEPROJECTION ] { 2 }
        Constant [ integer DISTORTION_ARC ] { 9 }
        Constant [ integer DISTORTION_BILINEAR ] { 6 }
        Constant [ integer DISTORTION_PERSPECTIVE ] { 4 }
        Constant [ integer DISTORTION_PERSPECTIVEPROJECTION ] { 5 }
        Constant [ integer DISTORTION_SCALEROTATETRANSLATE ] { 3 }
        Constant [ integer DISTORTION_POLYNOMIAL ] { 8 }
        Constant [ integer DISTORTION_POLAR ] { 10 }
        Constant [ integer DISTORTION_DEPOLAR ] { 11 }
        Constant [ integer DISTORTION_BARREL ] { 14 }
        Constant [ integer DISTORTION_SHEPARDS ] { 16 }
        Constant [ integer DISTORTION_SENTINEL ] { 18 }
        Constant [ integer DISTORTION_BARRELINVERSE ] { 15 }
        Constant [ integer DISTORTION_BILINEARFORWARD ] { 6 }
        Constant [ integer DISTORTION_BILINEARREVERSE ] { 7 }
        Constant [ integer DISTORTION_RESIZE ] { 17 }
        Constant [ integer DISTORTION_CYLINDER2PLANE ] { 12 }
        Constant [ integer DISTORTION_PLANE2CYLINDER ] { 13 }
        Constant [ integer LAYERMETHOD_MERGE ] { 13 }
        Constant [ integer LAYERMETHOD_FLATTEN ] { 14 }
        Constant [ integer LAYERMETHOD_MOSAIC ] { 15 }
        Constant [ integer ALPHACHANNEL_ACTIVATE ] { 1 }
        Constant [ integer ALPHACHANNEL_RESET ] { 7 }
        Constant [ integer ALPHACHANNEL_SET ] { 8 }
        Constant [ integer ALPHACHANNEL_UNDEFINED ] { 0 }
        Constant [ integer ALPHACHANNEL_COPY ] { 3 }
        Constant [ integer ALPHACHANNEL_DEACTIVATE ] { 4 }
        Constant [ integer ALPHACHANNEL_EXTRACT ] { 5 }
        Constant [ integer ALPHACHANNEL_OPAQUE ] { 6 }
        Constant [ integer ALPHACHANNEL_SHAPE ] { 9 }
        Constant [ integer ALPHACHANNEL_TRANSPARENT ] { 10 }
        Constant [ integer ALPHACHANNEL_ASSOCIATE ] { 13 }
        Constant [ integer ALPHACHANNEL_DISSOCIATE ] { 14 }
        Constant [ integer SPARSECOLORMETHOD_UNDEFINED ] { 0 }
        Constant [ integer SPARSECOLORMETHOD_BARYCENTRIC ] { 1 }
        Constant [ integer SPARSECOLORMETHOD_BILINEAR ] { 7 }
        Constant [ integer SPARSECOLORMETHOD_POLYNOMIAL ] { 8 }
        Constant [ integer SPARSECOLORMETHOD_SPEPARDS ] { 16 }
        Constant [ integer SPARSECOLORMETHOD_VORONOI ] { 18 }
        Constant [ integer SPARSECOLORMETHOD_INVERSE ] { 19 }
        Constant [ integer SPARSECOLORMETHOD_MANHATTAN ] { 20 }
        Constant [ integer DITHERMETHOD_UNDEFINED ] { 0 }
        Constant [ integer DITHERMETHOD_NO ] { 1 }
        Constant [ integer DITHERMETHOD_RIEMERSMA ] { 2 }
        Constant [ integer DITHERMETHOD_FLOYDSTEINBERG ] { 3 }
        Constant [ integer FUNCTION_UNDEFINED ] { 0 }
        Constant [ integer FUNCTION_POLYNOMIAL ] { 1 }
        Constant [ integer FUNCTION_SINUSOID ] { 2 }
        Constant [ integer ALPHACHANNEL_BACKGROUND ] { 2 }
        Constant [ integer FUNCTION_ARCSIN ] { 3 }
        Constant [ integer FUNCTION_ARCTAN ] { 4 }
        Constant [ integer ALPHACHANNEL_FLATTEN ] { 11 }
        Constant [ integer ALPHACHANNEL_REMOVE ] { 12 }
        Constant [ integer STATISTIC_GRADIENT ] { 1 }
        Constant [ integer STATISTIC_MAXIMUM ] { 2 }
        Constant [ integer STATISTIC_MEAN ] { 3 }
        Constant [ integer STATISTIC_MEDIAN ] { 4 }
        Constant [ integer STATISTIC_MINIMUM ] { 5 }
        Constant [ integer STATISTIC_MODE ] { 6 }
        Constant [ integer STATISTIC_NONPEAK ] { 7 }
        Constant [ integer STATISTIC_STANDARD_DEVIATION ] { 8 }
        Constant [ integer STATISTIC_ROOT_MEAN_SQUARE ] { 9 }
        Constant [ integer MORPHOLOGY_CONVOLVE ] { 1 }
        Constant [ integer MORPHOLOGY_CORRELATE ] { 2 }
        Constant [ integer MORPHOLOGY_ERODE ] { 3 }
        Constant [ integer MORPHOLOGY_DILATE ] { 4 }
        Constant [ integer MORPHOLOGY_ERODE_INTENSITY ] { 5 }
        Constant [ integer MORPHOLOGY_DILATE_INTENSITY ] { 6 }
        Constant [ integer MORPHOLOGY_DISTANCE ] { 7 }
        Constant [ integer MORPHOLOGY_OPEN ] { 8 }
        Constant [ integer MORPHOLOGY_CLOSE ] { 9 }
        Constant [ integer MORPHOLOGY_OPEN_INTENSITY ] { 10 }
        Constant [ integer MORPHOLOGY_CLOSE_INTENSITY ] { 11 }
        Constant [ integer MORPHOLOGY_SMOOTH ] { 12 }
        Constant [ integer MORPHOLOGY_EDGE_IN ] { 13 }
        Constant [ integer MORPHOLOGY_EDGE_OUT ] { 14 }
        Constant [ integer MORPHOLOGY_EDGE ] { 15 }
        Constant [ integer MORPHOLOGY_TOP_HAT ] { 16 }
        Constant [ integer MORPHOLOGY_BOTTOM_HAT ] { 17 }
        Constant [ integer MORPHOLOGY_HIT_AND_MISS ] { 18 }
        Constant [ integer MORPHOLOGY_THINNING ] { 19 }
        Constant [ integer MORPHOLOGY_THICKEN ] { 20 }
        Constant [ integer MORPHOLOGY_VORONOI ] { 21 }
        Constant [ integer MORPHOLOGY_ITERATIVE ] { 22 }
        Constant [ integer KERNEL_UNITY ] { 1 }
        Constant [ integer KERNEL_GAUSSIAN ] { 2 }
        Constant [ integer KERNEL_DIFFERENCE_OF_GAUSSIANS ] { 3 }
        Constant [ integer KERNEL_LAPLACIAN_OF_GAUSSIANS ] { 4 }
        Constant [ integer KERNEL_BLUR ] { 5 }
        Constant [ integer KERNEL_COMET ] { 6 }
        Constant [ integer KERNEL_LAPLACIAN ] { 7 }
        Constant [ integer KERNEL_SOBEL ] { 8 }
        Constant [ integer KERNEL_FREI_CHEN ] { 9 }
        Constant [ integer KERNEL_ROBERTS ] { 10 }
        Constant [ integer KERNEL_PREWITT ] { 11 }
        Constant [ integer KERNEL_COMPASS ] { 12 }
        Constant [ integer KERNEL_KIRSCH ] { 13 }
        Constant [ integer KERNEL_DIAMOND ] { 14 }
        Constant [ integer KERNEL_SQUARE ] { 15 }
        Constant [ integer KERNEL_RECTANGLE ] { 16 }
        Constant [ integer KERNEL_OCTAGON ] { 17 }
        Constant [ integer KERNEL_DISK ] { 18 }
        Constant [ integer KERNEL_PLUS ] { 19 }
        Constant [ integer KERNEL_CROSS ] { 20 }
        Constant [ integer KERNEL_RING ] { 21 }
        Constant [ integer KERNEL_PEAKS ] { 22 }
        Constant [ integer KERNEL_EDGES ] { 23 }
        Constant [ integer KERNEL_CORNERS ] { 24 }
        Constant [ integer KERNEL_DIAGONALS ] { 25 }
        Constant [ integer KERNEL_LINE_ENDS ] { 26 }
        Constant [ integer KERNEL_LINE_JUNCTIONS ] { 27 }
        Constant [ integer KERNEL_RIDGES ] { 28 }
        Constant [ integer KERNEL_CONVEX_HULL ] { 29 }
        Constant [ integer KERNEL_THIN_SE ] { 30 }
        Constant [ integer KERNEL_SKELETON ] { 31 }
        Constant [ integer KERNEL_CHEBYSHEV ] { 32 }
        Constant [ integer KERNEL_MANHATTAN ] { 33 }
        Constant [ integer KERNEL_OCTAGONAL ] { 34 }
        Constant [ integer KERNEL_EUCLIDEAN ] { 35 }
        Constant [ integer KERNEL_USER_DEFINED ] { 36 }
        Constant [ integer KERNEL_BINOMIAL ] { 37 }
        Constant [ integer DIRECTION_LEFT_TO_RIGHT ] { 2 }
        Constant [ integer DIRECTION_RIGHT_TO_LEFT ] { 1 }
        Constant [ integer NORMALIZE_KERNEL_NONE ] { 0 }
        Constant [ integer NORMALIZE_KERNEL_VALUE ] { 8192 }
        Constant [ integer NORMALIZE_KERNEL_CORRELATE ] { 65536 }
        Constant [ integer NORMALIZE_KERNEL_PERCENT ] { 4096 }
      }

      - Static properties [0] {
      }

      - Static methods [20] {
        Method [ <internal:imagick> static public method queryformats ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:imagick> static public method queryfonts ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:imagick> static public method calculatecrop ] {

          - Parameters [5] {
            Parameter #0 [ <required> $orig_width ]
            Parameter #1 [ <required> $orig_height ]
            Parameter #2 [ <required> $desired_width ]
            Parameter #3 [ <required> $desired_height ]
            Parameter #4 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> static public method getcopyright ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getconfigureoptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $pattern ]
          }
        }

        Method [ <internal:imagick> static public method getfeatures ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method gethomeurl ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getpackagename ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getquantum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method gethdrienabled ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getquantumdepth ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getquantumrange ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getreleasedate ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method getresource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $resource_type ]
          }
        }

        Method [ <internal:imagick> static public method getresourcelimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $resource_type ]
          }
        }

        Method [ <internal:imagick> static public method getversion ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> static public method setresourcelimit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $RESOURCETYPE ]
            Parameter #1 [ <required> $limit ]
          }
        }

        Method [ <internal:imagick> static public method setregistry ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> static public method getregistry ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:imagick> static public method listregistry ] {

          - Parameters [0] {
          }
        }
      }

      - Properties [0] {
      }

      - Methods [351] {
        Method [ <internal:imagick> public method optimizeimagelayers ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method compareimagelayers ] {

          - Parameters [1] {
            Parameter #0 [ <required> $LAYER ]
          }
        }

        Method [ <internal:imagick> public method pingimageblob ] {

          - Parameters [1] {
            Parameter #0 [ <required> $imageContents ]
          }
        }

        Method [ <internal:imagick> public method pingimagefile ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fp ]
          }
        }

        Method [ <internal:imagick> public method transposeimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method transverseimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method trimimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fuzz ]
          }
        }

        Method [ <internal:imagick> public method waveimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $amplitude ]
            Parameter #1 [ <required> $waveLenght ]
          }
        }

        Method [ <internal:imagick> public method vignetteimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $blackPoint ]
            Parameter #1 [ <required> $whitePoint ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method uniqueimagecolors ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagematte ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setimagematte ] {

          - Parameters [1] {
            Parameter #0 [ <required> $enable ]
          }
        }

        Method [ <internal:imagick> public method adaptiveresizeimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
            Parameter #2 [ <optional> $bestfit ]
            Parameter #3 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method sketchimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <required> $angle ]
          }
        }

        Method [ <internal:imagick> public method shadeimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $gray ]
            Parameter #1 [ <required> $azimuth ]
            Parameter #2 [ <required> $elevation ]
          }
        }

        Method [ <internal:imagick> public method getsizeoffset ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setsizeoffset ] {

          - Parameters [3] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
            Parameter #2 [ <required> $offset ]
          }
        }

        Method [ <internal:imagick> public method adaptiveblurimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method contraststretchimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $blackPoint ]
            Parameter #1 [ <required> $whitePoint ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method adaptivesharpenimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method randomthresholdimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $low ]
            Parameter #1 [ <required> $high ]
            Parameter #2 [ <optional> $CHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method roundcornersimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $xRounding ]
            Parameter #1 [ <required> $yRounding ]
            Parameter #2 [ <optional> $strokeWidth ]
            Parameter #3 [ <optional> $displace ]
            Parameter #4 [ <optional> $sizeCorrection ]
          }
        }

        Method [ <internal:imagick> public method roundcorners ] {

          - Parameters [5] {
            Parameter #0 [ <required> $xRounding ]
            Parameter #1 [ <required> $yRounding ]
            Parameter #2 [ <optional> $strokeWidth ]
            Parameter #3 [ <optional> $displace ]
            Parameter #4 [ <optional> $sizeCorrection ]
          }
        }

        Method [ <internal:imagick> public method setiteratorindex ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:imagick> public method getiteratorindex ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method transformimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $crop ]
            Parameter #1 [ <required> $geometry ]
          }
        }

        Method [ <internal:imagick> public method setimageopacity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $opacity ]
          }
        }

        Method [ <internal:imagick> public method orderedposterizeimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $threshold_map ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method polaroidimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
            Parameter #1 [ <required> $angle ]
          }
        }

        Method [ <internal:imagick> public method getimageproperty ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:imagick> public method setimageproperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> public method deleteimageproperty ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:imagick> public method identifyformat ] {

          - Parameters [1] {
            Parameter #0 [ <required> $embedText ]
          }
        }

        Method [ <internal:imagick> public method setimageinterpolatemethod ] {

          - Parameters [1] {
            Parameter #0 [ <required> $INTERPOLATE ]
          }
        }

        Method [ <internal:imagick> public method getimageinterpolatemethod ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method linearstretchimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $blackPoint ]
            Parameter #1 [ <required> $whitePoint ]
          }
        }

        Method [ <internal:imagick> public method getimagelength ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method extentimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method getimageorientation ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setimageorientation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ORIENTATION ]
          }
        }

        Method [ <internal:imagick> public method paintfloodfillimage ] {

          - Parameters [6] {
            Parameter #0 [ <required> $CHANNEL ]
            Parameter #1 [ <required> $fill ]
            Parameter #2 [ <required> $fuzz ]
            Parameter #3 [ <required> $bordercolor ]
            Parameter #4 [ <required> $x ]
            Parameter #5 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method clutimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <optional> $CHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method getimageproperties ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $pattern ]
            Parameter #1 [ <optional> $values ]
          }
        }

        Method [ <internal:imagick> public method getimageprofiles ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $pattern ]
            Parameter #1 [ <optional> $values ]
          }
        }

        Method [ <internal:imagick> public method distortimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $arguments ]
            Parameter #2 [ <required> $bestfit ]
          }
        }

        Method [ <internal:imagick> public method writeimagefile ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handle ]
            Parameter #1 [ <optional> $format ]
          }
        }

        Method [ <internal:imagick> public method writeimagesfile ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handle ]
            Parameter #1 [ <optional> $format ]
          }
        }

        Method [ <internal:imagick> public method resetimagepage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:imagick> public method setimageclipmask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method getimageclipmask ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method animateimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $server_name ]
          }
        }

        Method [ <internal:imagick> public method recolorimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $matrix ]
          }
        }

        Method [ <internal:imagick> public method setfont ] {

          - Parameters [1] {
            Parameter #0 [ <required> $font ]
          }
        }

        Method [ <internal:imagick> public method getfont ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setpointsize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pointsize ]
          }
        }

        Method [ <internal:imagick> public method getpointsize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method mergeimagelayers ] {

          - Parameters [1] {
            Parameter #0 [ <required> $LAYERMETHOD ]
          }
        }

        Method [ <internal:imagick> public method setimagealphachannel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ALPHACHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method floodfillpaintimage ] {

          - Parameters [7] {
            Parameter #0 [ <required> $fill ]
            Parameter #1 [ <required> $fuzz ]
            Parameter #2 [ <required> $bordercolor ]
            Parameter #3 [ <required> $x ]
            Parameter #4 [ <required> $y ]
            Parameter #5 [ <required> $invert ]
            Parameter #6 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method opaquepaintimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $target ]
            Parameter #1 [ <required> $fill ]
            Parameter #2 [ <required> $fuzz ]
            Parameter #3 [ <required> $invert ]
            Parameter #4 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method transparentpaintimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $target ]
            Parameter #1 [ <required> $alpha ]
            Parameter #2 [ <required> $fuzz ]
            Parameter #3 [ <required> $invert ]
          }
        }

        Method [ <internal:imagick> public method liquidrescaleimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
            Parameter #2 [ <required> $delta_x ]
            Parameter #3 [ <required> $rigidity ]
          }
        }

        Method [ <internal:imagick> public method encipherimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $passphrase ]
          }
        }

        Method [ <internal:imagick> public method decipherimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $passphrase ]
          }
        }

        Method [ <internal:imagick> public method setgravity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $GRAVITY ]
          }
        }

        Method [ <internal:imagick> public method getgravity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagechannelrange ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimagealphachannel ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagechanneldistortions ] {

          - Parameters [3] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <optional> $METRICTYPE ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method setimagegravity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $GRAVITY ]
          }
        }

        Method [ <internal:imagick> public method getimagegravity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method importimagepixels ] {

          - Parameters [7] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $width ]
            Parameter #3 [ <required> $height ]
            Parameter #4 [ <required> $map ]
            Parameter #5 [ <required> $storage ]
            Parameter #6 [ <required> $PIXEL ]
          }
        }

        Method [ <internal:imagick> public method deskewimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $threshold ]
          }
        }

        Method [ <internal:imagick> public method segmentimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $COLORSPACE ]
            Parameter #1 [ <required> $cluster_threshold ]
            Parameter #2 [ <required> $smooth_threshold ]
            Parameter #3 [ <optional> $verbose ]
          }
        }

        Method [ <internal:imagick> public method sparsecolorimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $SPARSE_METHOD ]
            Parameter #1 [ <required> $arguments ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method remapimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $DITHER ]
          }
        }

        Method [ <internal:imagick> public method exportimagepixels ] {

          - Parameters [6] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $width ]
            Parameter #3 [ <required> $height ]
            Parameter #4 [ <required> $map ]
            Parameter #5 [ <required> $STORAGE ]
          }
        }

        Method [ <internal:imagick> public method getimagechannelkurtosis ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method functionimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $FUNCTION ]
            Parameter #1 [ <required> $arguments ]
          }
        }

        Method [ <internal:imagick> public method transformimagecolorspace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $COLORSPACE ]
          }
        }

        Method [ <internal:imagick> public method haldclutimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method autolevelimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method blueshiftimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $factor ]
          }
        }

        Method [ <internal:imagick> public method getimageartifact ] {

          - Parameters [1] {
            Parameter #0 [ <required> $artifact ]
          }
        }

        Method [ <internal:imagick> public method setimageartifact ] {

          - Parameters [2] {
            Parameter #0 [ <required> $artifact ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> public method deleteimageartifact ] {

          - Parameters [1] {
            Parameter #0 [ <required> $artifact ]
          }
        }

        Method [ <internal:imagick> public method getcolorspace ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setcolorspace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $COLORSPACE ]
          }
        }

        Method [ <internal:imagick> public method clampimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method smushimages ] {

          - Parameters [2] {
            Parameter #0 [ <required> $stack ]
            Parameter #1 [ <required> $offset ]
          }
        }

        Method [ <internal:imagick, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $files ]
          }
        }

        Method [ <internal:imagick> public method __tostring ] {
        }

        Method [ <internal:imagick, prototype Countable> public method count ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $mode ]
          }
        }

        Method [ <internal:imagick> public method getpixeliterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getpixelregioniterator ] {

          - Parameters [5] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $columns ]
            Parameter #3 [ <required> $rows ]
            Parameter #4 [ <required> $modify ]
          }
        }

        Method [ <internal:imagick> public method readimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filename ]
          }
        }

        Method [ <internal:imagick> public method readimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filenames ]
          }
        }

        Method [ <internal:imagick> public method readimageblob ] {

          - Parameters [2] {
            Parameter #0 [ <required> $imageContents ]
            Parameter #1 [ <optional> $filename ]
          }
        }

        Method [ <internal:imagick> public method setimageformat ] {

          - Parameters [1] {
            Parameter #0 [ <required> $imageFormat ]
          }
        }

        Method [ <internal:imagick> public method scaleimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $bestfit ]
            Parameter #3 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method writeimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $filename ]
          }
        }

        Method [ <internal:imagick> public method writeimages ] {

          - Parameters [2] {
            Parameter #0 [ <required> $filename ]
            Parameter #1 [ <required> $adjoin ]
          }
        }

        Method [ <internal:imagick> public method blurimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <optional> $CHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method thumbnailimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $bestfit ]
            Parameter #3 [ <optional> $fill ]
            Parameter #4 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method cropthumbnailimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method getimagefilename ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setimagefilename ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filename ]
          }
        }

        Method [ <internal:imagick> public method getimageformat ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagemimetype ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method removeimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method destroy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method clear ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method clone ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagesize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageblob ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagesblob ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setfirstiterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setlastiterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method resetiterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method previousimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method nextimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method haspreviousimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method hasnextimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setimageindex ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:imagick> public method getimageindex ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method commentimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $comment ]
          }
        }

        Method [ <internal:imagick> public method cropimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method labelimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:imagick> public method getimagegeometry ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method drawimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
          }
        }

        Method [ <internal:imagick> public method setimagecompressionquality ] {

          - Parameters [1] {
            Parameter #0 [ <required> $quality ]
          }
        }

        Method [ <internal:imagick> public method getimagecompressionquality ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setimagecompression ] {

          - Parameters [1] {
            Parameter #0 [ <required> $COMPRESSION ]
          }
        }

        Method [ <internal:imagick> public method getimagecompression ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method annotateimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
            Parameter #1 [ <required> $x ]
            Parameter #2 [ <required> $y ]
            Parameter #3 [ <required> $angle ]
            Parameter #4 [ <required> $text ]
          }
        }

        Method [ <internal:imagick> public method compositeimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $COMPOSITE ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
            Parameter #4 [ <optional> $CHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method modulateimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $brightness ]
            Parameter #1 [ <required> $saturation ]
            Parameter #2 [ <required> $hue ]
          }
        }

        Method [ <internal:imagick> public method getimagecolors ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method montageimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
            Parameter #1 [ <required> $tileGeometry ]
            Parameter #2 [ <required> $thumbnailGeometry ]
            Parameter #3 [ <required> $MONTAGEMODE ]
            Parameter #4 [ <required> $frame ]
          }
        }

        Method [ <internal:imagick> public method identifyimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $appendRawOutput ]
          }
        }

        Method [ <internal:imagick> public method thresholdimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $threshold ]
            Parameter #1 [ <optional> $CHANNELTYPE ]
          }
        }

        Method [ <internal:imagick> public method adaptivethresholdimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $offset ]
          }
        }

        Method [ <internal:imagick> public method blackthresholdimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method whitethresholdimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method appendimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $stack ]
          }
        }

        Method [ <internal:imagick> public method charcoalimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
          }
        }

        Method [ <internal:imagick> public method normalizeimage ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method oilpaintimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method posterizeimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $levels ]
            Parameter #1 [ <required> $dither ]
          }
        }

        Method [ <internal:imagick> public method radialblurimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $angle ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method raiseimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
            Parameter #4 [ <required> $raise ]
          }
        }

        Method [ <internal:imagick> public method resampleimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $xResolution ]
            Parameter #1 [ <required> $yResolution ]
            Parameter #2 [ <required> $FILTER ]
            Parameter #3 [ <required> $blur ]
          }
        }

        Method [ <internal:imagick> public method resizeimage ] {

          - Parameters [6] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $blur ]
            Parameter #4 [ <optional> $bestfit ]
            Parameter #5 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method rollimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method rotateimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <required> $degrees ]
          }
        }

        Method [ <internal:imagick> public method sampleimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
          }
        }

        Method [ <internal:imagick> public method solarizeimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $threshold ]
          }
        }

        Method [ <internal:imagick> public method shadowimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $opacity ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setimageattribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> public method setimagebackgroundcolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setimagecompose ] {

          - Parameters [1] {
            Parameter #0 [ <required> $COMPOSITE ]
          }
        }

        Method [ <internal:imagick> public method setimagedelay ] {

          - Parameters [1] {
            Parameter #0 [ <required> $delay ]
          }
        }

        Method [ <internal:imagick> public method setimagedepth ] {

          - Parameters [1] {
            Parameter #0 [ <required> $depth ]
          }
        }

        Method [ <internal:imagick> public method setimagegamma ] {

          - Parameters [1] {
            Parameter #0 [ <required> $gamma ]
          }
        }

        Method [ <internal:imagick> public method setimageiterations ] {

          - Parameters [1] {
            Parameter #0 [ <required> $iterations ]
          }
        }

        Method [ <internal:imagick> public method setimagemattecolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setimagepage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setimageprogressmonitor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filename ]
          }
        }

        Method [ <internal:imagick> public method setprogressmonitor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $callback ]
          }
        }

        Method [ <internal:imagick> public method setimageresolution ] {

          - Parameters [2] {
            Parameter #0 [ <required> $xResolution ]
            Parameter #1 [ <required> $yResolution ]
          }
        }

        Method [ <internal:imagick> public method setimagescene ] {

          - Parameters [1] {
            Parameter #0 [ <required> $scene ]
          }
        }

        Method [ <internal:imagick> public method setimagetickspersecond ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ticksPerSecond ]
          }
        }

        Method [ <internal:imagick> public method setimagetype ] {

          - Parameters [1] {
            Parameter #0 [ <required> $IMGTYPE ]
          }
        }

        Method [ <internal:imagick> public method setimageunits ] {

          - Parameters [1] {
            Parameter #0 [ <required> $RESOLUTION ]
          }
        }

        Method [ <internal:imagick> public method sharpenimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method shaveimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
          }
        }

        Method [ <internal:imagick> public method shearimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <required> $xShear ]
            Parameter #2 [ <required> $yShear ]
          }
        }

        Method [ <internal:imagick> public method spliceimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pingimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filename ]
          }
        }

        Method [ <internal:imagick> public method readimagefile ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fp ]
          }
        }

        Method [ <internal:imagick> public method displayimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serverName ]
          }
        }

        Method [ <internal:imagick> public method displayimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serverName ]
          }
        }

        Method [ <internal:imagick> public method spreadimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method swirlimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:imagick> public method stripimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method queryfontmetrics ] {

          - Parameters [3] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
            Parameter #1 [ <required> $text ]
            Parameter #2 [ <optional> $multiline ]
          }
        }

        Method [ <internal:imagick> public method steganoimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $offset ]
          }
        }

        Method [ <internal:imagick> public method addnoiseimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $NOISE ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method motionblurimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <required> $angle ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method mosaicimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method morphimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frames ]
          }
        }

        Method [ <internal:imagick> public method minifyimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method affinetransformimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> ImagickDraw $ImagickDraw ]
          }
        }

        Method [ <internal:imagick> public method averageimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method borderimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <required> $width ]
            Parameter #2 [ <required> $height ]
          }
        }

        Method [ <internal:imagick> public method chopimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method clipimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method clippathimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pathname ]
            Parameter #1 [ <required> $inside ]
          }
        }

        Method [ <internal:imagick> public method clipimagepath ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pathname ]
            Parameter #1 [ <required> $inside ]
          }
        }

        Method [ <internal:imagick> public method coalesceimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method colorfloodfillimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $fill_color ]
            Parameter #1 [ <required> $fuzz ]
            Parameter #2 [ <required> $border_color ]
            Parameter #3 [ <required> $y ]
            Parameter #4 [ <required> $x ]
          }
        }

        Method [ <internal:imagick> public method colorizeimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $colorize_color ]
            Parameter #1 [ <required> $opacity ]
            Parameter #2 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method compareimagechannels ] {

          - Parameters [3] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $CHANNEL ]
            Parameter #2 [ <required> $METRIC ]
          }
        }

        Method [ <internal:imagick> public method compareimages ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $METRIC ]
          }
        }

        Method [ <internal:imagick> public method contrastimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sharpen ]
          }
        }

        Method [ <internal:imagick> public method combineimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method convolveimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $kernel ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method cyclecolormapimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $displace ]
          }
        }

        Method [ <internal:imagick> public method deconstructimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method despeckleimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method edgeimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method embossimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
          }
        }

        Method [ <internal:imagick> public method enhanceimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method equalizeimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method evaluateimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $EVALUATE ]
            Parameter #1 [ <required> $constant ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method evaluateimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $EVALUATE ]
          }
        }

        Method [ <internal:imagick> public method flattenimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method flipimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method flopimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method forwardfouriertransformimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $magnitude ]
          }
        }

        Method [ <internal:imagick> public method frameimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <required> $width ]
            Parameter #2 [ <required> $height ]
            Parameter #3 [ <required> $innerBevel ]
            Parameter #4 [ <required> $outerBevel ]
          }
        }

        Method [ <internal:imagick> public method fximage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method gammaimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $gamma ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method gaussianblurimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimageattribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:imagick> public method getimagebackgroundcolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageblueprimary ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagebordercolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagechanneldepth ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimagechanneldistortion ] {

          - Parameters [3] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $CHANNEL ]
            Parameter #2 [ <required> $METRIC ]
          }
        }

        Method [ <internal:imagick> public method getimagechannelextrema ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimagechannelmean ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimagechannelstatistics ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagecolormapcolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:imagick> public method getimagecolorspace ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagecompose ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagedelay ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagedepth ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagedistortion ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $METRIC ]
          }
        }

        Method [ <internal:imagick> public method getimageextrema ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagedispose ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagegamma ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagegreenprimary ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageheight ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagehistogram ] {
        }

        Method [ <internal:imagick> public method getimageinterlacescheme ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageiterations ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagemattecolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagepage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagepixelcolor ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method getimageprofile ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:imagick> public method getimageredprimary ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagerenderingintent ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageresolution ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagescene ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagesignature ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagetickspersecond ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagetype ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageunits ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagevirtualpixelmethod ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagewhitepoint ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagewidth ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getnumberimages ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimagetotalinkdensity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getimageregion ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method implodeimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method inversefouriertransformimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $complement ]
            Parameter #1 [ <required> $magnitude ]
          }
        }

        Method [ <internal:imagick> public method levelimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $blackPoint ]
            Parameter #1 [ <required> $gamma ]
            Parameter #2 [ <required> $whitePoint ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method magnifyimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method mapimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $dither ]
          }
        }

        Method [ <internal:imagick> public method mattefloodfillimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $alpha ]
            Parameter #1 [ <required> $fuzz ]
            Parameter #2 [ <required> $color ]
            Parameter #3 [ <required> $x ]
            Parameter #4 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method medianfilterimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method negateimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $gray ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method paintopaqueimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $target_color ]
            Parameter #1 [ <required> $fill_color ]
            Parameter #2 [ <required> $fuzz ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method painttransparentimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $target_color ]
            Parameter #1 [ <required> $alpha ]
            Parameter #2 [ <required> $fuzz ]
          }
        }

        Method [ <internal:imagick> public method previewimages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $PREVIEW ]
          }
        }

        Method [ <internal:imagick> public method profileimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $profile ]
          }
        }

        Method [ <internal:imagick> public method quantizeimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $numColors ]
            Parameter #1 [ <required> $COLORSPACE ]
            Parameter #2 [ <required> $treeDepth ]
            Parameter #3 [ <required> $dither ]
            Parameter #4 [ <required> $measureError ]
          }
        }

        Method [ <internal:imagick> public method quantizeimages ] {

          - Parameters [5] {
            Parameter #0 [ <required> $numColors ]
            Parameter #1 [ <required> $COLORSPACE ]
            Parameter #2 [ <required> $treeDepth ]
            Parameter #3 [ <required> $dither ]
            Parameter #4 [ <required> $measureError ]
          }
        }

        Method [ <internal:imagick> public method reducenoiseimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:imagick> public method removeimageprofile ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:imagick> public method separateimagechannel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method sepiatoneimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $threshold ]
          }
        }

        Method [ <internal:imagick> public method setimagebias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bias ]
          }
        }

        Method [ <internal:imagick> public method setimagebiasquantum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bias ]
          }
        }

        Method [ <internal:imagick> public method setimageblueprimary ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setimagebordercolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setimagechanneldepth ] {

          - Parameters [2] {
            Parameter #0 [ <required> $CHANNEL ]
            Parameter #1 [ <required> $depth ]
          }
        }

        Method [ <internal:imagick> public method setimagecolormapcolor ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setimagecolorspace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $COLORSPACE ]
          }
        }

        Method [ <internal:imagick> public method setimagedispose ] {

          - Parameters [1] {
            Parameter #0 [ <required> $DISPOSETYPE ]
          }
        }

        Method [ <internal:imagick> public method setimageextent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
          }
        }

        Method [ <internal:imagick> public method setimagegreenprimary ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setimageinterlacescheme ] {

          - Parameters [1] {
            Parameter #0 [ <required> $INTERLACE ]
          }
        }

        Method [ <internal:imagick> public method setimageprofile ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $profile ]
          }
        }

        Method [ <internal:imagick> public method setimageredprimary ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setimagerenderingintent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $RENDERINGINTENT ]
          }
        }

        Method [ <internal:imagick> public method setimagevirtualpixelmethod ] {

          - Parameters [1] {
            Parameter #0 [ <required> $VIRTUALPIXELMETHOD ]
          }
        }

        Method [ <internal:imagick> public method setimagewhitepoint ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method sigmoidalcontrastimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sharpen ]
            Parameter #1 [ <required> $contrast ]
            Parameter #2 [ <required> $midpoint ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method stereoimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method textureimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method tintimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tint_color ]
            Parameter #1 [ <required> $opacity ]
            Parameter #2 [ <optional> $legacy ]
          }
        }

        Method [ <internal:imagick> public method unsharpmaskimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <required> $amount ]
            Parameter #3 [ <required> $threshold ]
            Parameter #4 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method getimage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method addimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method setimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method newimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
            Parameter #2 [ <required> $background_color ]
            Parameter #3 [ <optional> $format ]
          }
        }

        Method [ <internal:imagick> public method newpseudoimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
            Parameter #2 [ <required> $pseudoString ]
          }
        }

        Method [ <internal:imagick> public method getcompression ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getcompressionquality ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfilename ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getformat ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getinterlacescheme ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getoption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:imagick> public method getpage ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getsamplingfactors ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getsize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setbackgroundcolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setcompression ] {

          - Parameters [1] {
            Parameter #0 [ <required> $compression ]
          }
        }

        Method [ <internal:imagick> public method setcompressionquality ] {

          - Parameters [1] {
            Parameter #0 [ <required> $compressionquality ]
          }
        }

        Method [ <internal:imagick> public method setfilename ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filename ]
          }
        }

        Method [ <internal:imagick> public method setformat ] {

          - Parameters [1] {
            Parameter #0 [ <required> $format ]
          }
        }

        Method [ <internal:imagick> public method setinterlacescheme ] {

          - Parameters [1] {
            Parameter #0 [ <required> $INTERLACE ]
          }
        }

        Method [ <internal:imagick> public method setoption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> public method setpage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setresolution ] {

          - Parameters [2] {
            Parameter #0 [ <required> $xResolution ]
            Parameter #1 [ <required> $yResolution ]
          }
        }

        Method [ <internal:imagick> public method setsamplingfactors ] {

          - Parameters [1] {
            Parameter #0 [ <required> $factors ]
          }
        }

        Method [ <internal:imagick> public method setsize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $columns ]
            Parameter #1 [ <required> $rows ]
          }
        }

        Method [ <internal:imagick> public method settype ] {

          - Parameters [1] {
            Parameter #0 [ <required> $IMGTYPE ]
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method brightnesscontrastimage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $brightness ]
            Parameter #1 [ <required> $contrast ]
            Parameter #2 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method colormatriximage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color_matrix ]
          }
        }

        Method [ <internal:imagick> public method selectiveblurimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $sigma ]
            Parameter #2 [ <required> $threshold ]
            Parameter #3 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method rotationalblurimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $angle ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method statisticimage ] {

          - Parameters [4] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $width ]
            Parameter #2 [ <required> $height ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method subimagematch ] {

          - Parameters [5] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <optional> &$offset ]
            Parameter #2 [ <optional> &$similarity ]
            Parameter #3 [ <optional> &$similarity_threshold ]
            Parameter #4 [ <optional> &$metric ]
          }
        }

        Method [ <internal:imagick> public method similarityimage ] {

          - Parameters [5] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <optional> &$offset ]
            Parameter #2 [ <optional> &$similarity ]
            Parameter #3 [ <optional> &$similarity_threshold ]
            Parameter #4 [ <optional> &$metric ]
          }
        }

        Method [ <internal:imagick> public method morphology ] {

          - Parameters [4] {
            Parameter #0 [ <required> $morphologyMethod ]
            Parameter #1 [ <required> $iterations ]
            Parameter #2 [ <required> ImagickKernel $ImagickKernel ]
            Parameter #3 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method filter ] {

          - Parameters [2] {
            Parameter #0 [ <required> ImagickKernel $ImagickKernel ]
            Parameter #1 [ <optional> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method setantialias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $antialias ]
          }
        }

        Method [ <internal:imagick> public method getantialias ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method colordecisionlistimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $antialias ]
          }
        }

        Method [ <internal:imagick> public method autogammaimage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $CHANNEL ]
          }
        }

        Method [ <internal:imagick> public method autoorient ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method compositeimagegravity ] {

          - Parameters [3] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $COMPOSITE ]
            Parameter #2 [ <required> $GRAVITY ]
          }
        }

        Method [ <internal:imagick> public method localcontrastimage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $radius ]
            Parameter #1 [ <required> $strength ]
          }
        }
      }
    }

    Class [ <internal:imagick> class ImagickDraw ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [134] {
        Method [ <internal:imagick> public method resetvectorgraphics ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextkerning ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method settextkerning ] {

          - Parameters [1] {
            Parameter #0 [ <required> $kerning ]
          }
        }

        Method [ <internal:imagick> public method gettextinterwordspacing ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method settextinterwordspacing ] {

          - Parameters [1] {
            Parameter #0 [ <required> $spacing ]
          }
        }

        Method [ <internal:imagick> public method gettextinterlinespacing ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method settextinterlinespacing ] {

          - Parameters [1] {
            Parameter #0 [ <required> $spacing ]
          }
        }

        Method [ <internal:imagick, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setfillcolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setfillalpha ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alpha ]
          }
        }

        Method [ <internal:imagick> public method setresolution ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x_resolution ]
            Parameter #1 [ <required> $y_resolution ]
          }
        }

        Method [ <internal:imagick> public method setstrokecolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setstrokealpha ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alpha ]
          }
        }

        Method [ <internal:imagick> public method setstrokewidth ] {

          - Parameters [1] {
            Parameter #0 [ <required> $width ]
          }
        }

        Method [ <internal:imagick> public method clear ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method circle ] {

          - Parameters [4] {
            Parameter #0 [ <required> $ox ]
            Parameter #1 [ <required> $oy ]
            Parameter #2 [ <required> $px ]
            Parameter #3 [ <required> $py ]
          }
        }

        Method [ <internal:imagick> public method annotation ] {

          - Parameters [3] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $text ]
          }
        }

        Method [ <internal:imagick> public method settextantialias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $antialias ]
          }
        }

        Method [ <internal:imagick> public method settextencoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $encoding ]
          }
        }

        Method [ <internal:imagick> public method setfont ] {

          - Parameters [1] {
            Parameter #0 [ <required> $font ]
          }
        }

        Method [ <internal:imagick> public method setfontfamily ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fontfamily ]
          }
        }

        Method [ <internal:imagick> public method setfontsize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pointsize ]
          }
        }

        Method [ <internal:imagick> public method setfontstyle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $STYLE ]
          }
        }

        Method [ <internal:imagick> public method setfontweight ] {

          - Parameters [1] {
            Parameter #0 [ <required> $weight ]
          }
        }

        Method [ <internal:imagick> public method getfont ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfontfamily ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfontsize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfontstyle ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfontweight ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method destroy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method rectangle ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x2 ]
            Parameter #3 [ <required> $y2 ]
          }
        }

        Method [ <internal:imagick> public method roundrectangle ] {

          - Parameters [6] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x2 ]
            Parameter #3 [ <required> $y2 ]
            Parameter #4 [ <required> $rx ]
            Parameter #5 [ <required> $ry ]
          }
        }

        Method [ <internal:imagick> public method ellipse ] {

          - Parameters [6] {
            Parameter #0 [ <required> $ox ]
            Parameter #1 [ <required> $oy ]
            Parameter #2 [ <required> $px ]
            Parameter #3 [ <required> $py ]
            Parameter #4 [ <required> $start ]
            Parameter #5 [ <required> $end ]
          }
        }

        Method [ <internal:imagick> public method skewx ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:imagick> public method skewy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:imagick> public method translate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method line ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sx ]
            Parameter #1 [ <required> $sy ]
            Parameter #2 [ <required> $ex ]
            Parameter #3 [ <required> $ey ]
          }
        }

        Method [ <internal:imagick> public method arc ] {

          - Parameters [6] {
            Parameter #0 [ <required> $sx ]
            Parameter #1 [ <required> $sy ]
            Parameter #2 [ <required> $ex ]
            Parameter #3 [ <required> $ey ]
            Parameter #4 [ <required> $sd ]
            Parameter #5 [ <required> $ed ]
          }
        }

        Method [ <internal:imagick> public method matte ] {

          - Parameters [3] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $METHOD ]
          }
        }

        Method [ <internal:imagick> public method polygon ] {

          - Parameters [1] {
            Parameter #0 [ <required> $coordinates ]
          }
        }

        Method [ <internal:imagick> public method point ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method gettextdecoration ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextencoding ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfontstretch ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setfontstretch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $STRETCH ]
          }
        }

        Method [ <internal:imagick> public method setstrokeantialias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $antialias ]
          }
        }

        Method [ <internal:imagick> public method settextalignment ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ALIGN ]
          }
        }

        Method [ <internal:imagick> public method settextdecoration ] {

          - Parameters [1] {
            Parameter #0 [ <required> $DECORATION ]
          }
        }

        Method [ <internal:imagick> public method settextundercolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setviewbox ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sx ]
            Parameter #1 [ <required> $sy ]
            Parameter #2 [ <required> $ex ]
            Parameter #3 [ <required> $ey ]
          }
        }

        Method [ <internal:imagick> public method clone ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method affine ] {

          - Parameters [1] {
            Parameter #0 [ <required> $affineMatrix ]
          }
        }

        Method [ <internal:imagick> public method bezier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $coordinateArray ]
          }
        }

        Method [ <internal:imagick> public method composite ] {

          - Parameters [6] {
            Parameter #0 [ <required> $COMPOSE ]
            Parameter #1 [ <required> $x ]
            Parameter #2 [ <required> $y ]
            Parameter #3 [ <required> $width ]
            Parameter #4 [ <required> $height ]
            Parameter #5 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method color ] {

          - Parameters [3] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
            Parameter #2 [ <required> $PAINTMETHOD ]
          }
        }

        Method [ <internal:imagick> public method comment ] {

          - Parameters [1] {
            Parameter #0 [ <required> $comment ]
          }
        }

        Method [ <internal:imagick> public method getclippath ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getcliprule ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getclipunits ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfillcolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfillopacity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getfillrule ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getgravity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokeantialias ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokecolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokedasharray ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokedashoffset ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokelinecap ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokelinejoin ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokemiterlimit ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokeopacity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getstrokewidth ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextalignment ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextantialias ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getvectorgraphics ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextundercolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method pathclose ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method pathcurvetoabsolute ] {

          - Parameters [6] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x2 ]
            Parameter #3 [ <required> $y2 ]
            Parameter #4 [ <required> $x ]
            Parameter #5 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetorelative ] {

          - Parameters [6] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x2 ]
            Parameter #3 [ <required> $y2 ]
            Parameter #4 [ <required> $x ]
            Parameter #5 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetoquadraticbezierabsolute ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetoquadraticbezierrelative ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetoquadraticbeziersmoothabsolute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetoquadraticbeziersmoothrelative ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetosmoothabsolute ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathcurvetosmoothrelative ] {

          - Parameters [4] {
            Parameter #0 [ <required> $x1 ]
            Parameter #1 [ <required> $y1 ]
            Parameter #2 [ <required> $x ]
            Parameter #3 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathellipticarcabsolute ] {

          - Parameters [7] {
            Parameter #0 [ <required> $rx ]
            Parameter #1 [ <required> $ry ]
            Parameter #2 [ <required> $xAxisRotation ]
            Parameter #3 [ <required> $largeArc ]
            Parameter #4 [ <required> $sweep ]
            Parameter #5 [ <required> $x ]
            Parameter #6 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathellipticarcrelative ] {

          - Parameters [7] {
            Parameter #0 [ <required> $rx ]
            Parameter #1 [ <required> $ry ]
            Parameter #2 [ <required> $xAxisRotation ]
            Parameter #3 [ <required> $largeArc ]
            Parameter #4 [ <required> $sweep ]
            Parameter #5 [ <required> $x ]
            Parameter #6 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathfinish ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method pathlinetoabsolute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathlinetorelative ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathlinetohorizontalabsolute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathlinetohorizontalrelative ] {

          - Parameters [1] {
            Parameter #0 [ <required> $x ]
          }
        }

        Method [ <internal:imagick> public method pathlinetoverticalabsolute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathlinetoverticalrelative ] {

          - Parameters [1] {
            Parameter #0 [ <required> $x ]
          }
        }

        Method [ <internal:imagick> public method pathmovetoabsolute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathmovetorelative ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method pathstart ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method polyline ] {

          - Parameters [1] {
            Parameter #0 [ <required> $coordinateArray ]
          }
        }

        Method [ <internal:imagick> public method popclippath ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method popdefs ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method poppattern ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method pushclippath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $clipMask ]
          }
        }

        Method [ <internal:imagick> public method pushdefs ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method pushpattern ] {

          - Parameters [5] {
            Parameter #0 [ <required> $pattern_id ]
            Parameter #1 [ <required> $x ]
            Parameter #2 [ <required> $y ]
            Parameter #3 [ <required> $width ]
            Parameter #4 [ <required> $height ]
          }
        }

        Method [ <internal:imagick> public method render ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:imagick> public method scale ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method setclippath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $clipMask ]
          }
        }

        Method [ <internal:imagick> public method setcliprule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $FILLRULE ]
          }
        }

        Method [ <internal:imagick> public method setclipunits ] {

          - Parameters [1] {
            Parameter #0 [ <required> $PATHUNITS ]
          }
        }

        Method [ <internal:imagick> public method setfillopacity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fillOpacity ]
          }
        }

        Method [ <internal:imagick> public method setfillpatternurl ] {

          - Parameters [1] {
            Parameter #0 [ <required> $url ]
          }
        }

        Method [ <internal:imagick> public method setfillrule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $FILLRULE ]
          }
        }

        Method [ <internal:imagick> public method setgravity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $GRAVITY ]
          }
        }

        Method [ <internal:imagick> public method setstrokepatternurl ] {

          - Parameters [1] {
            Parameter #0 [ <required> $url ]
          }
        }

        Method [ <internal:imagick> public method setstrokedashoffset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:imagick> public method setstrokelinecap ] {

          - Parameters [1] {
            Parameter #0 [ <required> $LINECAP ]
          }
        }

        Method [ <internal:imagick> public method setstrokelinejoin ] {

          - Parameters [1] {
            Parameter #0 [ <required> $LINEJOIN ]
          }
        }

        Method [ <internal:imagick> public method setstrokemiterlimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $miterLimit ]
          }
        }

        Method [ <internal:imagick> public method setstrokeopacity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $strokeOpacity ]
          }
        }

        Method [ <internal:imagick> public method setvectorgraphics ] {

          - Parameters [1] {
            Parameter #0 [ <required> $xml ]
          }
        }

        Method [ <internal:imagick> public method pop ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method push ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setstrokedasharray ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dashArray ]
          }
        }

        Method [ <internal:imagick> public method getopacity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setopacity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $opacity ]
          }
        }

        Method [ <internal:imagick> public method getfontresolution ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setfontresolution ] {

          - Parameters [2] {
            Parameter #0 [ <required> $x ]
            Parameter #1 [ <required> $y ]
          }
        }

        Method [ <internal:imagick> public method getbordercolor ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setbordercolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bordercolor ]
          }
        }

        Method [ <internal:imagick> public method setdensity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $density ]
          }
        }

        Method [ <internal:imagick> public method getdensity ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method gettextdirection ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method settextdirection ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }
      }
    }

    Class [ <internal:imagick> <iterateable> class ImagickPixelIterator implements Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [2] {
        Method [ <internal:imagick> static public method getpixeliterator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> static public method getpixelregioniterator ] {

          - Parameters [5] {
            Parameter #0 [ <required> Imagick $Imagick ]
            Parameter #1 [ <required> $x ]
            Parameter #2 [ <required> $y ]
            Parameter #3 [ <required> $columns ]
            Parameter #4 [ <required> $rows ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [19] {
        Method [ <internal:imagick, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> Imagick $Imagick ]
          }
        }

        Method [ <internal:imagick> public method newpixeliterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method newpixelregioniterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getiteratorrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setiteratorrow ] {

          - Parameters [1] {
            Parameter #0 [ <required> $row ]
          }
        }

        Method [ <internal:imagick> public method setiteratorfirstrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setiteratorlastrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getpreviousiteratorrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getcurrentiteratorrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getnextiteratorrow ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method resetiterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method synciterator ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method destroy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method clear ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:imagick> class ImagickPixel ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [22] {
        Method [ <internal:imagick> public method gethsl ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method sethsl ] {

          - Parameters [3] {
            Parameter #0 [ <required> $hue ]
            Parameter #1 [ <required> $saturation ]
            Parameter #2 [ <required> $luminosity ]
          }
        }

        Method [ <internal:imagick> public method getcolorvaluequantum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setcolorvaluequantum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color_value ]
          }
        }

        Method [ <internal:imagick> public method getindex ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setindex ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:imagick, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $color ]
          }
        }

        Method [ <internal:imagick> public method setcolor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method setcolorvalue ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:imagick> public method getcolorvalue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $color ]
          }
        }

        Method [ <internal:imagick> public method clear ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method destroy ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method issimilar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $fuzz ]
          }
        }

        Method [ <internal:imagick> public method ispixelsimilarquantum ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $fuzz ]
          }
        }

        Method [ <internal:imagick> public method ispixelsimilar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $fuzz ]
          }
        }

        Method [ <internal:imagick> public method getcolor ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $normalized ]
          }
        }

        Method [ <internal:imagick> public method getcolorquantum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getcolorasstring ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method getcolorcount ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setcolorcount ] {

          - Parameters [1] {
            Parameter #0 [ <required> $colorCount ]
          }
        }

        Method [ <internal:imagick> public method clone ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method setcolorfrompixel ] {

          - Parameters [1] {
            Parameter #0 [ <required> ImagickPixel $srcPixel ]
          }
        }
      }
    }

    Class [ <internal:imagick> class ImagickKernel ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [2] {
        Method [ <internal:imagick> static public method frommatrix ] {

          - Parameters [2] {
            Parameter #0 [ <required> $array ]
            Parameter #1 [ <optional> $array ]
          }
        }

        Method [ <internal:imagick> static public method frombuiltin ] {

          - Parameters [2] {
            Parameter #0 [ <required> $kerneltype ]
            Parameter #1 [ <required> $paramstring ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [6] {
        Method [ <internal:imagick, ctor> private method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method addkernel ] {

          - Parameters [1] {
            Parameter #0 [ <required> ImagickKernel $ImagickKernel ]
          }
        }

        Method [ <internal:imagick> public method getmatrix ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method separate ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method scale ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:imagick> public method addunitykernel ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}

