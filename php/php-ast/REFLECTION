Extension [ <persistent> extension #75 ast version 0.1.4 ] {

  - Constants [187] {
    Constant [ integer ast\AST_ARG_LIST ] { 128 }
    Constant [ integer ast\AST_LIST ] { 129 }
    Constant [ integer ast\AST_ARRAY ] { 130 }
    Constant [ integer ast\AST_ENCAPS_LIST ] { 131 }
    Constant [ integer ast\AST_EXPR_LIST ] { 132 }
    Constant [ integer ast\AST_STMT_LIST ] { 133 }
    Constant [ integer ast\AST_IF ] { 134 }
    Constant [ integer ast\AST_SWITCH_LIST ] { 135 }
    Constant [ integer ast\AST_CATCH_LIST ] { 136 }
    Constant [ integer ast\AST_PARAM_LIST ] { 137 }
    Constant [ integer ast\AST_CLOSURE_USES ] { 138 }
    Constant [ integer ast\AST_PROP_DECL ] { 139 }
    Constant [ integer ast\AST_CONST_DECL ] { 140 }
    Constant [ integer ast\AST_CLASS_CONST_DECL ] { 141 }
    Constant [ integer ast\AST_NAME_LIST ] { 142 }
    Constant [ integer ast\AST_TRAIT_ADAPTATIONS ] { 143 }
    Constant [ integer ast\AST_USE ] { 144 }
    Constant [ integer ast\AST_NAME ] { 2048 }
    Constant [ integer ast\AST_CLOSURE_VAR ] { 2049 }
    Constant [ integer ast\AST_NULLABLE_TYPE ] { 2050 }
    Constant [ integer ast\AST_FUNC_DECL ] { 66 }
    Constant [ integer ast\AST_CLOSURE ] { 67 }
    Constant [ integer ast\AST_METHOD ] { 68 }
    Constant [ integer ast\AST_CLASS ] { 69 }
    Constant [ integer ast\AST_MAGIC_CONST ] { 0 }
    Constant [ integer ast\AST_TYPE ] { 1 }
    Constant [ integer ast\AST_VAR ] { 256 }
    Constant [ integer ast\AST_CONST ] { 257 }
    Constant [ integer ast\AST_UNPACK ] { 258 }
    Constant [ integer ast\AST_UNARY_PLUS ] { 259 }
    Constant [ integer ast\AST_UNARY_MINUS ] { 260 }
    Constant [ integer ast\AST_CAST ] { 261 }
    Constant [ integer ast\AST_EMPTY ] { 262 }
    Constant [ integer ast\AST_ISSET ] { 263 }
    Constant [ integer ast\AST_SILENCE ] { 264 }
    Constant [ integer ast\AST_SHELL_EXEC ] { 265 }
    Constant [ integer ast\AST_CLONE ] { 266 }
    Constant [ integer ast\AST_EXIT ] { 267 }
    Constant [ integer ast\AST_PRINT ] { 268 }
    Constant [ integer ast\AST_INCLUDE_OR_EVAL ] { 269 }
    Constant [ integer ast\AST_UNARY_OP ] { 270 }
    Constant [ integer ast\AST_PRE_INC ] { 271 }
    Constant [ integer ast\AST_PRE_DEC ] { 272 }
    Constant [ integer ast\AST_POST_INC ] { 273 }
    Constant [ integer ast\AST_POST_DEC ] { 274 }
    Constant [ integer ast\AST_YIELD_FROM ] { 275 }
    Constant [ integer ast\AST_GLOBAL ] { 276 }
    Constant [ integer ast\AST_UNSET ] { 277 }
    Constant [ integer ast\AST_RETURN ] { 278 }
    Constant [ integer ast\AST_LABEL ] { 279 }
    Constant [ integer ast\AST_REF ] { 280 }
    Constant [ integer ast\AST_HALT_COMPILER ] { 281 }
    Constant [ integer ast\AST_ECHO ] { 282 }
    Constant [ integer ast\AST_THROW ] { 283 }
    Constant [ integer ast\AST_GOTO ] { 284 }
    Constant [ integer ast\AST_BREAK ] { 285 }
    Constant [ integer ast\AST_CONTINUE ] { 286 }
    Constant [ integer ast\AST_DIM ] { 512 }
    Constant [ integer ast\AST_PROP ] { 513 }
    Constant [ integer ast\AST_STATIC_PROP ] { 514 }
    Constant [ integer ast\AST_CALL ] { 515 }
    Constant [ integer ast\AST_CLASS_CONST ] { 516 }
    Constant [ integer ast\AST_ASSIGN ] { 517 }
    Constant [ integer ast\AST_ASSIGN_REF ] { 518 }
    Constant [ integer ast\AST_ASSIGN_OP ] { 519 }
    Constant [ integer ast\AST_BINARY_OP ] { 520 }
    Constant [ integer ast\AST_GREATER ] { 521 }
    Constant [ integer ast\AST_GREATER_EQUAL ] { 522 }
    Constant [ integer ast\AST_AND ] { 523 }
    Constant [ integer ast\AST_OR ] { 524 }
    Constant [ integer ast\AST_ARRAY_ELEM ] { 525 }
    Constant [ integer ast\AST_NEW ] { 526 }
    Constant [ integer ast\AST_INSTANCEOF ] { 527 }
    Constant [ integer ast\AST_YIELD ] { 528 }
    Constant [ integer ast\AST_COALESCE ] { 529 }
    Constant [ integer ast\AST_STATIC ] { 530 }
    Constant [ integer ast\AST_WHILE ] { 531 }
    Constant [ integer ast\AST_DO_WHILE ] { 532 }
    Constant [ integer ast\AST_IF_ELEM ] { 533 }
    Constant [ integer ast\AST_SWITCH ] { 534 }
    Constant [ integer ast\AST_SWITCH_CASE ] { 535 }
    Constant [ integer ast\AST_DECLARE ] { 536 }
    Constant [ integer ast\AST_PROP_ELEM ] { 774 }
    Constant [ integer ast\AST_CONST_ELEM ] { 537 }
    Constant [ integer ast\AST_USE_TRAIT ] { 538 }
    Constant [ integer ast\AST_TRAIT_PRECEDENCE ] { 539 }
    Constant [ integer ast\AST_METHOD_REFERENCE ] { 540 }
    Constant [ integer ast\AST_NAMESPACE ] { 541 }
    Constant [ integer ast\AST_USE_ELEM ] { 542 }
    Constant [ integer ast\AST_TRAIT_ALIAS ] { 543 }
    Constant [ integer ast\AST_GROUP_USE ] { 544 }
    Constant [ integer ast\AST_METHOD_CALL ] { 768 }
    Constant [ integer ast\AST_STATIC_CALL ] { 769 }
    Constant [ integer ast\AST_CONDITIONAL ] { 770 }
    Constant [ integer ast\AST_TRY ] { 771 }
    Constant [ integer ast\AST_CATCH ] { 772 }
    Constant [ integer ast\AST_PARAM ] { 773 }
    Constant [ integer ast\AST_FOR ] { 1024 }
    Constant [ integer ast\AST_FOREACH ] { 1025 }
    Constant [ integer ast\flags\NAME_FQ ] { 0 }
    Constant [ integer ast\flags\NAME_NOT_FQ ] { 1 }
    Constant [ integer ast\flags\NAME_RELATIVE ] { 2 }
    Constant [ integer ast\flags\MODIFIER_PUBLIC ] { 256 }
    Constant [ integer ast\flags\MODIFIER_PROTECTED ] { 512 }
    Constant [ integer ast\flags\MODIFIER_PRIVATE ] { 1024 }
    Constant [ integer ast\flags\MODIFIER_STATIC ] { 1 }
    Constant [ integer ast\flags\MODIFIER_ABSTRACT ] { 2 }
    Constant [ integer ast\flags\MODIFIER_FINAL ] { 4 }
    Constant [ integer ast\flags\RETURNS_REF ] { 67108864 }
    Constant [ integer ast\flags\CLASS_ABSTRACT ] { 32 }
    Constant [ integer ast\flags\CLASS_FINAL ] { 4 }
    Constant [ integer ast\flags\CLASS_TRAIT ] { 128 }
    Constant [ integer ast\flags\CLASS_INTERFACE ] { 64 }
    Constant [ integer ast\flags\CLASS_ANONYMOUS ] { 256 }
    Constant [ integer ast\flags\PARAM_REF ] { 1 }
    Constant [ integer ast\flags\PARAM_VARIADIC ] { 2 }
    Constant [ integer ast\flags\TYPE_NULL ] { 1 }
    Constant [ integer ast\flags\TYPE_BOOL ] { 13 }
    Constant [ integer ast\flags\TYPE_LONG ] { 4 }
    Constant [ integer ast\flags\TYPE_DOUBLE ] { 5 }
    Constant [ integer ast\flags\TYPE_STRING ] { 6 }
    Constant [ integer ast\flags\TYPE_ARRAY ] { 7 }
    Constant [ integer ast\flags\TYPE_OBJECT ] { 8 }
    Constant [ integer ast\flags\TYPE_CALLABLE ] { 14 }
    Constant [ integer ast\flags\TYPE_VOID ] { 18 }
    Constant [ integer ast\flags\TYPE_ITERABLE ] { 19 }
    Constant [ integer ast\flags\UNARY_BOOL_NOT ] { 13 }
    Constant [ integer ast\flags\UNARY_BITWISE_NOT ] { 12 }
    Constant [ integer ast\flags\UNARY_SILENCE ] { 260 }
    Constant [ integer ast\flags\UNARY_PLUS ] { 261 }
    Constant [ integer ast\flags\UNARY_MINUS ] { 262 }
    Constant [ integer ast\flags\BINARY_BOOL_AND ] { 259 }
    Constant [ integer ast\flags\BINARY_BOOL_OR ] { 258 }
    Constant [ integer ast\flags\BINARY_BOOL_XOR ] { 14 }
    Constant [ integer ast\flags\BINARY_BITWISE_OR ] { 9 }
    Constant [ integer ast\flags\BINARY_BITWISE_AND ] { 10 }
    Constant [ integer ast\flags\BINARY_BITWISE_XOR ] { 11 }
    Constant [ integer ast\flags\BINARY_CONCAT ] { 8 }
    Constant [ integer ast\flags\BINARY_ADD ] { 1 }
    Constant [ integer ast\flags\BINARY_SUB ] { 2 }
    Constant [ integer ast\flags\BINARY_MUL ] { 3 }
    Constant [ integer ast\flags\BINARY_DIV ] { 4 }
    Constant [ integer ast\flags\BINARY_MOD ] { 5 }
    Constant [ integer ast\flags\BINARY_POW ] { 166 }
    Constant [ integer ast\flags\BINARY_SHIFT_LEFT ] { 6 }
    Constant [ integer ast\flags\BINARY_SHIFT_RIGHT ] { 7 }
    Constant [ integer ast\flags\BINARY_IS_IDENTICAL ] { 15 }
    Constant [ integer ast\flags\BINARY_IS_NOT_IDENTICAL ] { 16 }
    Constant [ integer ast\flags\BINARY_IS_EQUAL ] { 17 }
    Constant [ integer ast\flags\BINARY_IS_NOT_EQUAL ] { 18 }
    Constant [ integer ast\flags\BINARY_IS_SMALLER ] { 19 }
    Constant [ integer ast\flags\BINARY_IS_SMALLER_OR_EQUAL ] { 20 }
    Constant [ integer ast\flags\BINARY_IS_GREATER ] { 256 }
    Constant [ integer ast\flags\BINARY_IS_GREATER_OR_EQUAL ] { 257 }
    Constant [ integer ast\flags\BINARY_SPACESHIP ] { 170 }
    Constant [ integer ast\flags\BINARY_COALESCE ] { 260 }
    Constant [ integer ast\flags\ASSIGN_BITWISE_OR ] { 31 }
    Constant [ integer ast\flags\ASSIGN_BITWISE_AND ] { 32 }
    Constant [ integer ast\flags\ASSIGN_BITWISE_XOR ] { 33 }
    Constant [ integer ast\flags\ASSIGN_CONCAT ] { 30 }
    Constant [ integer ast\flags\ASSIGN_ADD ] { 23 }
    Constant [ integer ast\flags\ASSIGN_SUB ] { 24 }
    Constant [ integer ast\flags\ASSIGN_MUL ] { 25 }
    Constant [ integer ast\flags\ASSIGN_DIV ] { 26 }
    Constant [ integer ast\flags\ASSIGN_MOD ] { 27 }
    Constant [ integer ast\flags\ASSIGN_POW ] { 167 }
    Constant [ integer ast\flags\ASSIGN_SHIFT_LEFT ] { 28 }
    Constant [ integer ast\flags\ASSIGN_SHIFT_RIGHT ] { 29 }
    Constant [ integer ast\flags\EXEC_EVAL ] { 1 }
    Constant [ integer ast\flags\EXEC_INCLUDE ] { 2 }
    Constant [ integer ast\flags\EXEC_INCLUDE_ONCE ] { 4 }
    Constant [ integer ast\flags\EXEC_REQUIRE ] { 8 }
    Constant [ integer ast\flags\EXEC_REQUIRE_ONCE ] { 16 }
    Constant [ integer ast\flags\USE_NORMAL ] { 361 }
    Constant [ integer ast\flags\USE_FUNCTION ] { 346 }
    Constant [ integer ast\flags\USE_CONST ] { 347 }
    Constant [ integer ast\flags\MAGIC_LINE ] { 370 }
    Constant [ integer ast\flags\MAGIC_FILE ] { 371 }
    Constant [ integer ast\flags\MAGIC_DIR ] { 372 }
    Constant [ integer ast\flags\MAGIC_NAMESPACE ] { 389 }
    Constant [ integer ast\flags\MAGIC_FUNCTION ] { 376 }
    Constant [ integer ast\flags\MAGIC_METHOD ] { 375 }
    Constant [ integer ast\flags\MAGIC_CLASS ] { 373 }
    Constant [ integer ast\flags\MAGIC_TRAIT ] { 374 }
    Constant [ integer ast\flags\ARRAY_SYNTAX_LIST ] { 1 }
    Constant [ integer ast\flags\ARRAY_SYNTAX_LONG ] { 2 }
    Constant [ integer ast\flags\ARRAY_SYNTAX_SHORT ] { 3 }
  }

  - Functions {
    Function [ <internal:ast> function ast\parse_file ] {

      - Parameters [2] {
        Parameter #0 [ <required> $filename ]
        Parameter #1 [ <optional> $version ]
      }
    }
    Function [ <internal:ast> function ast\parse_code ] {

      - Parameters [3] {
        Parameter #0 [ <required> $code ]
        Parameter #1 [ <optional> $version ]
        Parameter #2 [ <optional> $filename ]
      }
    }
    Function [ <internal:ast> function ast\get_kind_name ] {

      - Parameters [1] {
        Parameter #0 [ <required> $kind ]
      }
    }
    Function [ <internal:ast> function ast\kind_uses_flags ] {

      - Parameters [1] {
        Parameter #0 [ <required> $kind ]
      }
    }
  }

  - Classes [2] {
    Class [ <internal:ast> class ast\Node ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> public $kind ]
        Property [ <default> public $flags ]
        Property [ <default> public $lineno ]
        Property [ <default> public $children ]
      }

      - Methods [0] {
      }
    }

    Class [ <internal:ast> class ast\Node\Decl extends ast\Node ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> public $kind ]
        Property [ <default> public $flags ]
        Property [ <default> public $lineno ]
        Property [ <default> public $children ]
        Property [ <default> public $endLineno ]
        Property [ <default> public $name ]
        Property [ <default> public $docComment ]
      }

      - Methods [0] {
      }
    }
  }
}

