Extension [ <persistent> extension #170 phalcon version 3.0.4 ] {

  - INI {
    Entry [ phalcon.db.escape_identifiers <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.db.force_casting <ALL> ]
      Current = '0'
    }
    Entry [ phalcon.orm.events <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.virtual_foreign_keys <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.column_renaming <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.not_null_validations <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.exception_on_failed_save <ALL> ]
      Current = '0'
    }
    Entry [ phalcon.orm.enable_literals <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.late_state_binding <ALL> ]
      Current = '0'
    }
    Entry [ phalcon.orm.enable_implicit_joins <ALL> ]
      Current = '1'
    }
    Entry [ phalcon.orm.cast_on_hydrate <ALL> ]
      Current = '0'
    }
    Entry [ phalcon.orm.ignore_unknown_columns <ALL> ]
      Current = '0'
    }
  }

  - Classes [371] {
    Interface [ <internal:phalcon> interface Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDI ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> abstract public method getEventsManager ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $attribute ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [31] {
        Method [ <internal:phalcon> abstract public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon> abstract public method getForm ] {
        }

        Method [ <internal:phalcon> abstract public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon> abstract public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFilters ] {
        }

        Method [ <internal:phalcon> abstract public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> abstract public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon> abstract public method getValidators ] {
        }

        Method [ <internal:phalcon> abstract public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon> abstract public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAttributes ] {
        }

        Method [ <internal:phalcon> abstract public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method getUserOptions ] {
        }

        Method [ <internal:phalcon> abstract public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLabel ] {
        }

        Method [ <internal:phalcon> abstract public method label ] {
        }

        Method [ <internal:phalcon> abstract public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDefault ] {
        }

        Method [ <internal:phalcon> abstract public method getValue ] {
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method hasMessages ] {
        }

        Method [ <internal:phalcon> abstract public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon> abstract public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method clear ] {
        }

        Method [ <internal:phalcon> abstract public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [13] {
        Method [ <internal:phalcon> abstract public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> abstract public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFrontend ] {
        }

        Method [ <internal:phalcon> abstract public method getOptions ] {
        }

        Method [ <internal:phalcon> abstract public method isFresh ] {
        }

        Method [ <internal:phalcon> abstract public method isStarted ] {
        }

        Method [ <internal:phalcon> abstract public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLastKey ] {
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> abstract public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon> abstract public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon> abstract public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon> abstract public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method getLifetime ] {
        }

        Method [ <internal:phalcon> abstract public method isBuffering ] {
        }

        Method [ <internal:phalcon> abstract public method start ] {
        }

        Method [ <internal:phalcon> abstract public method getContent ] {
        }

        Method [ <internal:phalcon> abstract public method stop ] {
        }

        Method [ <internal:phalcon> abstract public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\MetaDataInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [29] {
        Method [ <internal:phalcon> abstract public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon> abstract public method getStrategy ] {
        }

        Method [ <internal:phalcon> abstract public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> abstract public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> abstract public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> abstract public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon> abstract public method isEmpty ] {
        }

        Method [ <internal:phalcon> abstract public method reset ] {
        }

        Method [ <internal:phalcon> abstract public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\DispatcherInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [17] {
        Method [ <internal:phalcon> abstract public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon> abstract public method getActionSuffix ] {
        }

        Method [ <internal:phalcon> abstract public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultNamespace ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon> abstract public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon> abstract public method getParams ] {
        }

        Method [ <internal:phalcon> abstract public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon> abstract public method isFinished ] {
        }

        Method [ <internal:phalcon> abstract public method getReturnedValue ] {
        }

        Method [ <internal:phalcon> abstract public method dispatch ] {
        }

        Method [ <internal:phalcon> abstract public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon> abstract public method getReader ] {
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon> abstract public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [62] {
        Method [ <internal:phalcon> abstract public method fetchOne ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> abstract public method fetchAll ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> abstract public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon> abstract public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon> abstract public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon> abstract public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon> abstract public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon> abstract public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon> abstract public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon> abstract public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon> abstract public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDescriptor ] {
        }

        Method [ <internal:phalcon> abstract public method getConnectionId ] {
        }

        Method [ <internal:phalcon> abstract public method getSQLStatement ] {
        }

        Method [ <internal:phalcon> abstract public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon> abstract public method getSQLVariables ] {
        }

        Method [ <internal:phalcon> abstract public method getSQLBindTypes ] {
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method getDialectType ] {
        }

        Method [ <internal:phalcon> abstract public method getDialect ] {
        }

        Method [ <internal:phalcon> abstract public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon> abstract public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method affectedRows ] {
        }

        Method [ <internal:phalcon> abstract public method close ] {
        }

        Method [ <internal:phalcon> abstract public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon> abstract public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon> abstract public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon> abstract public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon> abstract public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon> abstract public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon> abstract public method getInternalHandler ] {
        }

        Method [ <internal:phalcon> abstract public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon> abstract public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon> abstract public method supportSequences ] {
        }

        Method [ <internal:phalcon> abstract public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon> abstract public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon> abstract public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon> abstract public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [16] {
        Method [ <internal:phalcon> abstract public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFormatter ] {
        }

        Method [ <internal:phalcon> abstract public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLogLevel ] {
        }

        Method [ <internal:phalcon> abstract public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method begin ] {
        }

        Method [ <internal:phalcon> abstract public method commit ] {
        }

        Method [ <internal:phalcon> abstract public method rollback ] {
        }

        Method [ <internal:phalcon> abstract public method close ] {
        }

        Method [ <internal:phalcon> abstract public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> abstract public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Session\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [13] {
        Method [ <internal:phalcon> abstract public method start ] {
        }

        Method [ <internal:phalcon> abstract public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method getOptions ] {
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method getId ] {
        }

        Method [ <internal:phalcon> abstract public method isStarted ] {
        }

        Method [ <internal:phalcon> abstract public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $removeData ]
          }
        }

        Method [ <internal:phalcon> abstract public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon> abstract public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\DialectInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [31] {
        Method [ <internal:phalcon> abstract public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon> abstract public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon> abstract public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon> abstract public method select ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $columnList ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon> abstract public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon> abstract public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon> abstract public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon> abstract public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon> abstract public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> abstract public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method supportsSavepoints ] {
        }

        Method [ <internal:phalcon> abstract public method supportsReleaseSavepoints ] {
        }

        Method [ <internal:phalcon> abstract public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\EntityInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method readAttribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon> abstract public method writeAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\ResultsetInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method getFirst ] {
        }

        Method [ <internal:phalcon> abstract public method getLast ] {
        }

        Method [ <internal:phalcon> abstract public method setIsFresh ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isFresh ]
          }
        }

        Method [ <internal:phalcon> abstract public method isFresh ] {
        }

        Method [ <internal:phalcon> abstract public method getCache ] {
        }

        Method [ <internal:phalcon> abstract public method toArray ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Paginator\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [4] {
        Method [ <internal:phalcon> abstract public method setCurrentPage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPaginate ] {
        }

        Method [ <internal:phalcon> abstract public method setLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $limit ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLimit ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Translate\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method t ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> abstract public method query ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> abstract public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Assets\FilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\DiInterface extends ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [3] {
        Method [ <internal:phalcon> abstract static public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract static public method getDefault ] {
        }

        Method [ <internal:phalcon> abstract static public method reset ] {
        }
      }

      - Properties [0] {
      }

      - Methods [16] {
        Method [ <internal:phalcon> abstract public method set ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon> abstract public method setShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon> abstract public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method attempt ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method setRaw ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> Phalcon\Di\ServiceInterface $rawDefinition ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method getService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method wasFreshInstance ] {
        }

        Method [ <internal:phalcon> abstract public method getServices ] {
        }

        Method [ <internal:Core, inherits ArrayAccess> abstract public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:Core, inherits ArrayAccess> abstract public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:Core, inherits ArrayAccess> abstract public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:Core, inherits ArrayAccess> abstract public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\FlashInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [5] {
        Method [ <internal:phalcon> abstract public method error ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method notice ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method success ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method warning ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method message ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Image\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [14] {
        Method [ <internal:phalcon> abstract public method resize ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $width ]
            Parameter #1 [ <optional> $height ]
            Parameter #2 [ <optional> $master ]
          }
        }

        Method [ <internal:phalcon> abstract public method crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $offsetX ]
            Parameter #3 [ <optional> $offsetY ]
          }
        }

        Method [ <internal:phalcon> abstract public method rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon> abstract public method flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon> abstract public method sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> abstract public method reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <optional> $opacity ]
            Parameter #2 [ <optional> $fadeIn ]
          }
        }

        Method [ <internal:phalcon> abstract public method watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon> abstract public method text ] {

          - Parameters [7] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
            Parameter #4 [ <optional> $color ]
            Parameter #5 [ <optional> $size ]
            Parameter #6 [ <optional> $fontfile ]
          }
        }

        Method [ <internal:phalcon> abstract public method mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
          }
        }

        Method [ <internal:phalcon> abstract public method background ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon> abstract public method blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon> abstract public method pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> abstract public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $file ]
            Parameter #1 [ <optional> $quality ]
          }
        }

        Method [ <internal:phalcon> abstract public method render ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $ext ]
            Parameter #1 [ <optional> $quality ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Collection\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $collection ]
          }
        }

        Method [ <internal:phalcon> abstract public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $collection ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\ViewBaseInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [10] {
        Method [ <internal:phalcon> abstract public method setViewsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewsDir ]
          }
        }

        Method [ <internal:phalcon> abstract public method getViewsDir ] {
        }

        Method [ <internal:phalcon> abstract public method setParamToView ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method setVar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getParamsToView ] {
        }

        Method [ <internal:phalcon> abstract public method getCache ] {
        }

        Method [ <internal:phalcon> abstract public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon> abstract public method getContent ] {
        }

        Method [ <internal:phalcon> abstract public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\View\EngineInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method getContent ] {
        }

        Method [ <internal:phalcon> abstract public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> abstract public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $params ]
            Parameter #2 [ <optional> $mustClean ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Acl\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [19] {
        Method [ <internal:phalcon> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDefaultAction ] {
        }

        Method [ <internal:phalcon> abstract public method setNoArgumentsDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon> abstract public method getNoArgumentsDefaultAction ] {
        }

        Method [ <internal:phalcon> abstract public method addRole ] {

          - Parameters [2] {
            Parameter #0 [ <required> $role ]
            Parameter #1 [ <optional> $accessInherits ]
          }
        }

        Method [ <internal:phalcon> abstract public method addInherit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $roleToInherit ]
          }
        }

        Method [ <internal:phalcon> abstract public method isRole ] {

          - Parameters [1] {
            Parameter #0 [ <required> $roleName ]
          }
        }

        Method [ <internal:phalcon> abstract public method isResource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $resourceName ]
          }
        }

        Method [ <internal:phalcon> abstract public method addResource ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceObject ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon> abstract public method addResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon> abstract public method dropResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon> abstract public method allow ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon> abstract public method deny ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon> abstract public method isAllowed ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getActiveRole ] {
        }

        Method [ <internal:phalcon> abstract public method getActiveResource ] {
        }

        Method [ <internal:phalcon> abstract public method getActiveAccess ] {
        }

        Method [ <internal:phalcon> abstract public method getRoles ] {
        }

        Method [ <internal:phalcon> abstract public method getResources ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\MetaData\StrategyInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method getMetaData ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumnMaps ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\ResultInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method setDirtyState ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dirtyState ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\RouterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [29] {
        Method [ <internal:phalcon> abstract public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultController ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaults ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $defaults ]
          }
        }

        Method [ <internal:phalcon> abstract public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon> abstract public method add ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
          }
        }

        Method [ <internal:phalcon> abstract public method addGet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPost ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPut ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPatch ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addDelete ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addHead ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPurge ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addTrace ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addConnect ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method mount ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Router\GroupInterface $group ]
          }
        }

        Method [ <internal:phalcon> abstract public method clear ] {
        }

        Method [ <internal:phalcon> abstract public method getModuleName ] {
        }

        Method [ <internal:phalcon> abstract public method getNamespaceName ] {
        }

        Method [ <internal:phalcon> abstract public method getControllerName ] {
        }

        Method [ <internal:phalcon> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon> abstract public method getParams ] {
        }

        Method [ <internal:phalcon> abstract public method getMatchedRoute ] {
        }

        Method [ <internal:phalcon> abstract public method getMatches ] {
        }

        Method [ <internal:phalcon> abstract public method wasMatched ] {
        }

        Method [ <internal:phalcon> abstract public method getRoutes ] {
        }

        Method [ <internal:phalcon> abstract public method getRouteById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRouteByName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Translate\InterpolatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Acl\ResourceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getDescription ] {
        }

        Method [ <internal:phalcon> abstract public method __toString ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Acl\RoleInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getDescription ] {
        }

        Method [ <internal:phalcon> abstract public method __toString ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Annotations\ReaderInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method parseDocBlock ] {

          - Parameters [3] {
            Parameter #0 [ <required> $docBlock ]
            Parameter #1 [ <optional> $file ]
            Parameter #2 [ <optional> $line ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method parse ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cli\DispatcherInterface extends Phalcon\DispatcherInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [23] {
        Method [ <internal:phalcon> abstract public method setTaskSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskSuffix ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultTask ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setTaskName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getTaskName ] {
        }

        Method [ <internal:phalcon> abstract public method getLastTask ] {
        }

        Method [ <internal:phalcon> abstract public method getActiveTask ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getActionSuffix ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultNamespace ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getParams ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method isFinished ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getReturnedValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cli\TaskInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\CryptInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:phalcon> abstract public method setCipher ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cipher ]
          }
        }

        Method [ <internal:phalcon> abstract public method getCipher ] {
        }

        Method [ <internal:phalcon> abstract public method setKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method getKey ] {
        }

        Method [ <internal:phalcon> abstract public method encrypt ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method decrypt ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method encryptBase64 ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method decryptBase64 ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon> abstract public method getAvailableCiphers ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\ColumnInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [17] {
        Method [ <internal:phalcon> abstract public method getSchemaName ] {
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method getTypeReference ] {
        }

        Method [ <internal:phalcon> abstract public method getTypeValues ] {
        }

        Method [ <internal:phalcon> abstract public method getSize ] {
        }

        Method [ <internal:phalcon> abstract public method getScale ] {
        }

        Method [ <internal:phalcon> abstract public method isUnsigned ] {
        }

        Method [ <internal:phalcon> abstract public method isNotNull ] {
        }

        Method [ <internal:phalcon> abstract public method isPrimary ] {
        }

        Method [ <internal:phalcon> abstract public method isAutoIncrement ] {
        }

        Method [ <internal:phalcon> abstract public method isNumeric ] {
        }

        Method [ <internal:phalcon> abstract public method isFirst ] {
        }

        Method [ <internal:phalcon> abstract public method getAfterPosition ] {
        }

        Method [ <internal:phalcon> abstract public method getBindType ] {
        }

        Method [ <internal:phalcon> abstract public method getDefault ] {
        }

        Method [ <internal:phalcon> abstract public method hasDefault ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\IndexInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getColumns ] {
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\ReferenceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getSchemaName ] {
        }

        Method [ <internal:phalcon> abstract public method getReferencedSchema ] {
        }

        Method [ <internal:phalcon> abstract public method getColumns ] {
        }

        Method [ <internal:phalcon> abstract public method getReferencedTable ] {
        }

        Method [ <internal:phalcon> abstract public method getReferencedColumns ] {
        }

        Method [ <internal:phalcon> abstract public method getOnDelete ] {
        }

        Method [ <internal:phalcon> abstract public method getOnUpdate ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Db\ResultInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method execute ] {
        }

        Method [ <internal:phalcon> abstract public method fetch ] {
        }

        Method [ <internal:phalcon> abstract public method fetchArray ] {
        }

        Method [ <internal:phalcon> abstract public method fetchAll ] {
        }

        Method [ <internal:phalcon> abstract public method numRows ] {
        }

        Method [ <internal:phalcon> abstract public method dataSeek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon> abstract public method setFetchMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fetchMode ]
          }
        }

        Method [ <internal:phalcon> abstract public method getInternalResult ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Di\ServiceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method setShared ] {

          - Parameters [1] {
            Parameter #0 [ <required> $shared ]
          }
        }

        Method [ <internal:phalcon> abstract public method isShared ] {
        }

        Method [ <internal:phalcon> abstract public method setDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDefinition ] {
        }

        Method [ <internal:phalcon> abstract public method resolve ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $parameters ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract public method setParameter ] {

          - Parameters [2] {
            Parameter #0 [ <required> $position ]
            Parameter #1 [ <required> array $parameter ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\EscaperInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method setEncoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $encoding ]
          }
        }

        Method [ <internal:phalcon> abstract public method getEncoding ] {
        }

        Method [ <internal:phalcon> abstract public method setHtmlQuoteType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $quoteType ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeHtml ] {

          - Parameters [1] {
            Parameter #0 [ <required> $text ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeHtmlAttr ] {

          - Parameters [1] {
            Parameter #0 [ <required> $text ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeCss ] {

          - Parameters [1] {
            Parameter #0 [ <required> $css ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeJs ] {

          - Parameters [1] {
            Parameter #0 [ <required> $js ]
          }
        }

        Method [ <internal:phalcon> abstract public method escapeUrl ] {

          - Parameters [1] {
            Parameter #0 [ <required> $url ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Events\EventInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method getData ] {
        }

        Method [ <internal:phalcon> abstract public method setData ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> abstract public method stop ] {
        }

        Method [ <internal:phalcon> abstract public method isStopped ] {
        }

        Method [ <internal:phalcon> abstract public method isCancelable ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Events\ManagerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [5] {
        Method [ <internal:phalcon> abstract public method attach ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> abstract public method detach ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> abstract public method detachAll ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> abstract public method fire ] {

          - Parameters [3] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $source ]
            Parameter #2 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method getListeners ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\FilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> abstract public method sanitize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFilters ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\CookieInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [17] {
        Method [ <internal:phalcon> abstract public method setValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method getValue ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $filters ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method send ] {
        }

        Method [ <internal:phalcon> abstract public method delete ] {
        }

        Method [ <internal:phalcon> abstract public method useEncryption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useEncryption ]
          }
        }

        Method [ <internal:phalcon> abstract public method isUsingEncryption ] {
        }

        Method [ <internal:phalcon> abstract public method setExpiration ] {

          - Parameters [1] {
            Parameter #0 [ <required> $expire ]
          }
        }

        Method [ <internal:phalcon> abstract public method getExpiration ] {
        }

        Method [ <internal:phalcon> abstract public method setPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getPath ] {
        }

        Method [ <internal:phalcon> abstract public method setDomain ] {

          - Parameters [1] {
            Parameter #0 [ <required> $domain ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDomain ] {
        }

        Method [ <internal:phalcon> abstract public method setSecure ] {

          - Parameters [1] {
            Parameter #0 [ <required> $secure ]
          }
        }

        Method [ <internal:phalcon> abstract public method getSecure ] {
        }

        Method [ <internal:phalcon> abstract public method setHttpOnly ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpOnly ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHttpOnly ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\RequestInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [43] {
        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPost ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method getQuery ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method getServer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasPost ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasPut ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasQuery ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method hasServer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon> abstract public method getScheme ] {
        }

        Method [ <internal:phalcon> abstract public method isAjax ] {
        }

        Method [ <internal:phalcon> abstract public method isSoapRequested ] {
        }

        Method [ <internal:phalcon> abstract public method isSecureRequest ] {
        }

        Method [ <internal:phalcon> abstract public method getRawBody ] {
        }

        Method [ <internal:phalcon> abstract public method getServerAddress ] {
        }

        Method [ <internal:phalcon> abstract public method getServerName ] {
        }

        Method [ <internal:phalcon> abstract public method getHttpHost ] {
        }

        Method [ <internal:phalcon> abstract public method getPort ] {
        }

        Method [ <internal:phalcon> abstract public method getClientAddress ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $trustForwardedHeader ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMethod ] {
        }

        Method [ <internal:phalcon> abstract public method getUserAgent ] {
        }

        Method [ <internal:phalcon> abstract public method isMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $methods ]
            Parameter #1 [ <optional> $strict ]
          }
        }

        Method [ <internal:phalcon> abstract public method isPost ] {
        }

        Method [ <internal:phalcon> abstract public method isGet ] {
        }

        Method [ <internal:phalcon> abstract public method isPut ] {
        }

        Method [ <internal:phalcon> abstract public method isHead ] {
        }

        Method [ <internal:phalcon> abstract public method isDelete ] {
        }

        Method [ <internal:phalcon> abstract public method isOptions ] {
        }

        Method [ <internal:phalcon> abstract public method isPurge ] {
        }

        Method [ <internal:phalcon> abstract public method isTrace ] {
        }

        Method [ <internal:phalcon> abstract public method isConnect ] {
        }

        Method [ <internal:phalcon> abstract public method hasFiles ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $onlySuccessful ]
          }
        }

        Method [ <internal:phalcon> abstract public method getUploadedFiles ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $onlySuccessful ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHTTPReferer ] {
        }

        Method [ <internal:phalcon> abstract public method getAcceptableContent ] {
        }

        Method [ <internal:phalcon> abstract public method getBestAccept ] {
        }

        Method [ <internal:phalcon> abstract public method getClientCharsets ] {
        }

        Method [ <internal:phalcon> abstract public method getBestCharset ] {
        }

        Method [ <internal:phalcon> abstract public method getLanguages ] {
        }

        Method [ <internal:phalcon> abstract public method getBestLanguage ] {
        }

        Method [ <internal:phalcon> abstract public method getBasicAuth ] {
        }

        Method [ <internal:phalcon> abstract public method getDigestAuth ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\Request\FileInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [6] {
        Method [ <internal:phalcon> abstract public method getSize ] {
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method getTempName ] {
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method getRealType ] {
        }

        Method [ <internal:phalcon> abstract public method moveTo ] {

          - Parameters [1] {
            Parameter #0 [ <required> $destination ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\ResponseInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [18] {
        Method [ <internal:phalcon> abstract public method setStatusCode ] {

          - Parameters [2] {
            Parameter #0 [ <required> $code ]
            Parameter #1 [ <optional> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHeaders ] {
        }

        Method [ <internal:phalcon> abstract public method setHeader ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method setRawHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon> abstract public method resetHeaders ] {
        }

        Method [ <internal:phalcon> abstract public method setExpires ] {

          - Parameters [1] {
            Parameter #0 [ <required> DateTime $datetime ]
          }
        }

        Method [ <internal:phalcon> abstract public method setNotModified ] {
        }

        Method [ <internal:phalcon> abstract public method setContentType ] {

          - Parameters [2] {
            Parameter #0 [ <required> $contentType ]
            Parameter #1 [ <optional> $charset ]
          }
        }

        Method [ <internal:phalcon> abstract public method setContentLength ] {

          - Parameters [1] {
            Parameter #0 [ <required> $contentLength ]
          }
        }

        Method [ <internal:phalcon> abstract public method redirect ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $location ]
            Parameter #1 [ <optional> $externalRedirect ]
            Parameter #2 [ <optional> $statusCode ]
          }
        }

        Method [ <internal:phalcon> abstract public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon> abstract public method setJsonContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon> abstract public method appendContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon> abstract public method getContent ] {
        }

        Method [ <internal:phalcon> abstract public method sendHeaders ] {
        }

        Method [ <internal:phalcon> abstract public method sendCookies ] {
        }

        Method [ <internal:phalcon> abstract public method send ] {
        }

        Method [ <internal:phalcon> abstract public method setFileToSend ] {

          - Parameters [2] {
            Parameter #0 [ <required> $filePath ]
            Parameter #1 [ <optional> $attachmentName ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\Response\CookiesInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method useEncryption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useEncryption ]
          }
        }

        Method [ <internal:phalcon> abstract public method isUsingEncryption ] {
        }

        Method [ <internal:phalcon> abstract public method set ] {

          - Parameters [7] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $value ]
            Parameter #2 [ <optional> $expire ]
            Parameter #3 [ <optional> $path ]
            Parameter #4 [ <optional> $secure ]
            Parameter #5 [ <optional> $domain ]
            Parameter #6 [ <optional> $httpOnly ]
          }
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method send ] {
        }

        Method [ <internal:phalcon> abstract public method reset ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Http\Response\HeadersInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [5] {
        Method [ <internal:phalcon> abstract public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method setRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon> abstract public method send ] {
        }

        Method [ <internal:phalcon> abstract public method reset ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\CollectionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [5] {
        Method [ <internal:phalcon> abstract static public method cloneResult ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $collection ]
            Parameter #1 [ <required> array $document ]
          }
        }

        Method [ <internal:phalcon> abstract static public method findById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> abstract static public method findFirst ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method find ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method count ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [13] {
        Method [ <internal:phalcon> abstract public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> abstract public method getId ] {
        }

        Method [ <internal:phalcon> abstract public method getReservedAttributes ] {
        }

        Method [ <internal:phalcon> abstract public method getSource ] {
        }

        Method [ <internal:phalcon> abstract public method setConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method getConnection ] {
        }

        Method [ <internal:phalcon> abstract public method fireEvent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> abstract public method fireEventCancel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> abstract public method validationHasFailed ] {
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method save ] {
        }

        Method [ <internal:phalcon> abstract public method delete ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\ControllerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\DispatcherInterface extends Phalcon\DispatcherInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [23] {
        Method [ <internal:phalcon> abstract public method setControllerSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerSuffix ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultController ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setControllerName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getControllerName ] {
        }

        Method [ <internal:phalcon> abstract public method getLastController ] {
        }

        Method [ <internal:phalcon> abstract public method getActiveController ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getActionSuffix ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultNamespace ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getParams ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method isFinished ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method getReturnedValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\DispatcherInterface> abstract public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Micro\CollectionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [15] {
        Method [ <internal:phalcon> abstract public method setPrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPrefix ] {
        }

        Method [ <internal:phalcon> abstract public method getHandlers ] {
        }

        Method [ <internal:phalcon> abstract public method setHandler ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <optional> $lazy ]
          }
        }

        Method [ <internal:phalcon> abstract public method setLazy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lazy ]
          }
        }

        Method [ <internal:phalcon> abstract public method isLazy ] {
        }

        Method [ <internal:phalcon> abstract public method getHandler ] {
        }

        Method [ <internal:phalcon> abstract public method map ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method post ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method put ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method patch ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method head ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method delete ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method options ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\ModelInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [11] {
        Method [ <internal:phalcon> abstract static public method cloneResultMap ] {

          - Parameters [5] {
            Parameter #0 [ <required> $base ]
            Parameter #1 [ <required> array $data ]
            Parameter #2 [ <required> $columnMap ]
            Parameter #3 [ <optional> $dirtyState ]
            Parameter #4 [ <optional> $keepSnapshots ]
          }
        }

        Method [ <internal:phalcon> abstract static public method cloneResult ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $base ]
            Parameter #1 [ <required> array $data ]
            Parameter #2 [ <optional> $dirtyState ]
          }
        }

        Method [ <internal:phalcon> abstract static public method cloneResultMapHydrate ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <required> $columnMap ]
            Parameter #2 [ <required> $hydrationMode ]
          }
        }

        Method [ <internal:phalcon> abstract static public method find ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method findFirst ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method query ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract static public method count ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method sum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method maximum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method minimum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract static public method average ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [28] {
        Method [ <internal:phalcon> abstract public method setTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon> abstract public method getSource ] {
        }

        Method [ <internal:phalcon> abstract public method getSchema ] {
        }

        Method [ <internal:phalcon> abstract public method setConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method setWriteConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method setReadConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method getReadConnectionService ] {
        }

        Method [ <internal:phalcon> abstract public method getWriteConnectionService ] {
        }

        Method [ <internal:phalcon> abstract public method getReadConnection ] {
        }

        Method [ <internal:phalcon> abstract public method getWriteConnection ] {
        }

        Method [ <internal:phalcon> abstract public method setDirtyState ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dirtyState ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDirtyState ] {
        }

        Method [ <internal:phalcon> abstract public method assign ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <optional> $dataColumnMap ]
            Parameter #2 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon> abstract public method fireEvent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> abstract public method fireEventCancel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> abstract public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method validationHasFailed ] {
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon> abstract public method create ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon> abstract public method update ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon> abstract public method delete ] {
        }

        Method [ <internal:phalcon> abstract public method getOperationMade ] {
        }

        Method [ <internal:phalcon> abstract public method refresh ] {
        }

        Method [ <internal:phalcon> abstract public method skipOperation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $skip ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRelated ] {

          - Parameters [2] {
            Parameter #0 [ <required> $alias ]
            Parameter #1 [ <optional> $arguments ]
          }
        }

        Method [ <internal:phalcon> abstract public method setSnapshotData ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <optional> $columnMap ]
          }
        }

        Method [ <internal:phalcon> abstract public method reset ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\CriteriaInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [22] {
        Method [ <internal:phalcon> abstract public method setModelName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getModelName ] {
        }

        Method [ <internal:phalcon> abstract public method bind ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $bindParams ]
          }
        }

        Method [ <internal:phalcon> abstract public method bindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method where ] {

          - Parameters [1] {
            Parameter #0 [ <required> $conditions ]
          }
        }

        Method [ <internal:phalcon> abstract public method conditions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $conditions ]
          }
        }

        Method [ <internal:phalcon> abstract public method orderBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $orderColumns ]
          }
        }

        Method [ <internal:phalcon> abstract public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $limit ]
            Parameter #1 [ <optional> $offset ]
          }
        }

        Method [ <internal:phalcon> abstract public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $forUpdate ]
          }
        }

        Method [ <internal:phalcon> abstract public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sharedLock ]
          }
        }

        Method [ <internal:phalcon> abstract public method andWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method orWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method betweenWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
          }
        }

        Method [ <internal:phalcon> abstract public method notBetweenWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
          }
        }

        Method [ <internal:phalcon> abstract public method inWhere ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
          }
        }

        Method [ <internal:phalcon> abstract public method notInWhere ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
          }
        }

        Method [ <internal:phalcon> abstract public method getWhere ] {
        }

        Method [ <internal:phalcon> abstract public method getConditions ] {
        }

        Method [ <internal:phalcon> abstract public method getLimit ] {
        }

        Method [ <internal:phalcon> abstract public method getOrderBy ] {
        }

        Method [ <internal:phalcon> abstract public method getParams ] {
        }

        Method [ <internal:phalcon> abstract public method execute ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\ManagerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [38] {
        Method [ <internal:phalcon> abstract public method initialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method setModelSource ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $source ]
          }
        }

        Method [ <internal:phalcon> abstract public method getModelSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method setModelSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon> abstract public method getModelSchema ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method setConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method setReadConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method getReadConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method setWriteConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method getWriteConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getReadConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getWriteConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method isInitialized ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLastInitialized ] {
        }

        Method [ <internal:phalcon> abstract public method load ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <optional> $newInstance ]
          }
        }

        Method [ <internal:phalcon> abstract public method addHasOne ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method addBelongsTo ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method addHasMany ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> abstract public method existsBelongsTo ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon> abstract public method existsHasMany ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon> abstract public method existsHasOne ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBelongsToRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHasManyRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHasOneRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBelongsTo ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHasMany ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHasOne ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHasOneAndHasMany ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRelations ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRelationsBetween ] {

          - Parameters [2] {
            Parameter #0 [ <required> $first ]
            Parameter #1 [ <required> $second ]
          }
        }

        Method [ <internal:phalcon> abstract public method createQuery ] {

          - Parameters [1] {
            Parameter #0 [ <required> $phql ]
          }
        }

        Method [ <internal:phalcon> abstract public method executeQuery ] {

          - Parameters [2] {
            Parameter #0 [ <required> $phql ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> abstract public method createBuilder ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> abstract public method addBehavior ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\Mvc\Model\BehaviorInterface $behavior ]
          }
        }

        Method [ <internal:phalcon> abstract public method notifyEvent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventName ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $eventName ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLastQuery ] {
        }

        Method [ <internal:phalcon> abstract public method getRelationByAlias ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $alias ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\MessageInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $message ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method setMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMessage ] {
        }

        Method [ <internal:phalcon> abstract public method setField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> abstract public method getField ] {
        }

        Method [ <internal:phalcon> abstract public method __toString ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\QueryInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [6] {
        Method [ <internal:phalcon> abstract public method parse ] {
        }

        Method [ <internal:phalcon> abstract public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cacheOptions ]
          }
        }

        Method [ <internal:phalcon> abstract public method getCacheOptions ] {
        }

        Method [ <internal:phalcon> abstract public method setUniqueRow ] {

          - Parameters [1] {
            Parameter #0 [ <required> $uniqueRow ]
          }
        }

        Method [ <internal:phalcon> abstract public method getUniqueRow ] {
        }

        Method [ <internal:phalcon> abstract public method execute ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $bindParams ]
            Parameter #1 [ <optional> $bindTypes ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\Query\BuilderInterface ] {

      - Constants [2] {
        Constant [ string OPERATOR_OR ] { or }
        Constant [ string OPERATOR_AND ] { and }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [28] {
        Method [ <internal:phalcon> abstract public method columns ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columns ]
          }
        }

        Method [ <internal:phalcon> abstract public method getColumns ] {
        }

        Method [ <internal:phalcon> abstract public method from ] {

          - Parameters [1] {
            Parameter #0 [ <required> $models ]
          }
        }

        Method [ <internal:phalcon> abstract public method addFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFrom ] {
        }

        Method [ <internal:phalcon> abstract public method join ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> abstract public method innerJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> abstract public method leftJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> abstract public method rightJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> abstract public method getJoins ] {
        }

        Method [ <internal:phalcon> abstract public method where ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method andWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method orWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> abstract public method betweenWhere ] {

          - Parameters [4] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
            Parameter #3 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon> abstract public method notBetweenWhere ] {

          - Parameters [4] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
            Parameter #3 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon> abstract public method inWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon> abstract public method notInWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon> abstract public method getWhere ] {
        }

        Method [ <internal:phalcon> abstract public method orderBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $orderBy ]
          }
        }

        Method [ <internal:phalcon> abstract public method getOrderBy ] {
        }

        Method [ <internal:phalcon> abstract public method having ] {

          - Parameters [1] {
            Parameter #0 [ <required> $having ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHaving ] {
        }

        Method [ <internal:phalcon> abstract public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $limit ]
            Parameter #1 [ <optional> $offset ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLimit ] {
        }

        Method [ <internal:phalcon> abstract public method groupBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $group ]
          }
        }

        Method [ <internal:phalcon> abstract public method getGroupBy ] {
        }

        Method [ <internal:phalcon> abstract public method getPhql ] {
        }

        Method [ <internal:phalcon> abstract public method getQuery ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\Query\StatusInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> abstract public method getModel ] {
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method success ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\RelationInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [14] {
        Method [ <internal:phalcon> abstract public method setIntermediateRelation ] {

          - Parameters [3] {
            Parameter #0 [ <required> $intermediateFields ]
            Parameter #1 [ <required> $intermediateModel ]
            Parameter #2 [ <required> $intermediateReferencedFields ]
          }
        }

        Method [ <internal:phalcon> abstract public method isReusable ] {
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method getReferencedModel ] {
        }

        Method [ <internal:phalcon> abstract public method getFields ] {
        }

        Method [ <internal:phalcon> abstract public method getReferencedFields ] {
        }

        Method [ <internal:phalcon> abstract public method getOptions ] {
        }

        Method [ <internal:phalcon> abstract public method getOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method isForeignKey ] {
        }

        Method [ <internal:phalcon> abstract public method getForeignKey ] {
        }

        Method [ <internal:phalcon> abstract public method isThrough ] {
        }

        Method [ <internal:phalcon> abstract public method getIntermediateFields ] {
        }

        Method [ <internal:phalcon> abstract public method getIntermediateModel ] {
        }

        Method [ <internal:phalcon> abstract public method getIntermediateReferencedFields ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\TransactionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [11] {
        Method [ <internal:phalcon> abstract public method setTransactionManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\Transaction\ManagerInterface $manager ]
          }
        }

        Method [ <internal:phalcon> abstract public method begin ] {
        }

        Method [ <internal:phalcon> abstract public method commit ] {
        }

        Method [ <internal:phalcon> abstract public method rollback ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $rollbackMessage ]
            Parameter #1 [ <optional> $rollbackRecord ]
          }
        }

        Method [ <internal:phalcon> abstract public method getConnection ] {
        }

        Method [ <internal:phalcon> abstract public method setIsNewTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isNew ]
          }
        }

        Method [ <internal:phalcon> abstract public method setRollbackOnAbort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rollbackOnAbort ]
          }
        }

        Method [ <internal:phalcon> abstract public method isManaged ] {
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method isValid ] {
        }

        Method [ <internal:phalcon> abstract public method setRollbackedRecord ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $record ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Model\Transaction\ManagerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method has ] {
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $autoBegin ]
          }
        }

        Method [ <internal:phalcon> abstract public method rollbackPendent ] {
        }

        Method [ <internal:phalcon> abstract public method commit ] {
        }

        Method [ <internal:phalcon> abstract public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collect ]
          }
        }

        Method [ <internal:phalcon> abstract public method notifyRollback ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon> abstract public method notifyCommit ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon> abstract public method collectTransactions ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Router\GroupInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [18] {
        Method [ <internal:phalcon> abstract public method setHostname ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hostname ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHostname ] {
        }

        Method [ <internal:phalcon> abstract public method setPrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPrefix ] {
        }

        Method [ <internal:phalcon> abstract public method beforeMatch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $beforeMatch ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBeforeMatch ] {
        }

        Method [ <internal:phalcon> abstract public method setPaths ] {

          - Parameters [1] {
            Parameter #0 [ <required> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPaths ] {
        }

        Method [ <internal:phalcon> abstract public method getRoutes ] {
        }

        Method [ <internal:phalcon> abstract public method add ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
          }
        }

        Method [ <internal:phalcon> abstract public method addGet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPost ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPut ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addPatch ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addDelete ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method addHead ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method clear ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Router\RouteInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method reset ] {
        }
      }

      - Properties [0] {
      }

      - Methods [14] {
        Method [ <internal:phalcon> abstract public method setHostname ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hostname ]
          }
        }

        Method [ <internal:phalcon> abstract public method getHostname ] {
        }

        Method [ <internal:phalcon> abstract public method compilePattern ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon> abstract public method via ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpMethods ]
          }
        }

        Method [ <internal:phalcon> abstract public method reConfigure ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method setHttpMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpMethods ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRouteId ] {
        }

        Method [ <internal:phalcon> abstract public method getPattern ] {
        }

        Method [ <internal:phalcon> abstract public method getCompiledPattern ] {
        }

        Method [ <internal:phalcon> abstract public method getPaths ] {
        }

        Method [ <internal:phalcon> abstract public method getReversedPaths ] {
        }

        Method [ <internal:phalcon> abstract public method getHttpMethods ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\UrlInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [6] {
        Method [ <internal:phalcon> abstract public method setBaseUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $baseUri ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBaseUri ] {
        }

        Method [ <internal:phalcon> abstract public method setBasePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basePath ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBasePath ] {
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $uri ]
            Parameter #1 [ <optional> $args ]
            Parameter #2 [ <optional> $local ]
          }
        }

        Method [ <internal:phalcon> abstract public method path ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $path ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\ViewInterface extends Phalcon\Mvc\ViewBaseInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [38] {
        Method [ <internal:phalcon> abstract public method setLayoutsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $layoutsDir ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLayoutsDir ] {
        }

        Method [ <internal:phalcon> abstract public method setPartialsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $partialsDir ]
          }
        }

        Method [ <internal:phalcon> abstract public method getPartialsDir ] {
        }

        Method [ <internal:phalcon> abstract public method setBasePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basePath ]
          }
        }

        Method [ <internal:phalcon> abstract public method getBasePath ] {
        }

        Method [ <internal:phalcon> abstract public method setRenderLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon> abstract public method setMainView ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewPath ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMainView ] {
        }

        Method [ <internal:phalcon> abstract public method setLayout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $layout ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLayout ] {
        }

        Method [ <internal:phalcon> abstract public method setTemplateBefore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $templateBefore ]
          }
        }

        Method [ <internal:phalcon> abstract public method cleanTemplateBefore ] {
        }

        Method [ <internal:phalcon> abstract public method setTemplateAfter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $templateAfter ]
          }
        }

        Method [ <internal:phalcon> abstract public method cleanTemplateAfter ] {
        }

        Method [ <internal:phalcon> abstract public method getControllerName ] {
        }

        Method [ <internal:phalcon> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon> abstract public method getParams ] {
        }

        Method [ <internal:phalcon> abstract public method start ] {
        }

        Method [ <internal:phalcon> abstract public method registerEngines ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $engines ]
          }
        }

        Method [ <internal:phalcon> abstract public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $controllerName ]
            Parameter #1 [ <required> $actionName ]
            Parameter #2 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> abstract public method pick ] {

          - Parameters [1] {
            Parameter #0 [ <required> $renderView ]
          }
        }

        Method [ <internal:phalcon> abstract public method finish ] {
        }

        Method [ <internal:phalcon> abstract public method getActiveRenderPath ] {
        }

        Method [ <internal:phalcon> abstract public method disable ] {
        }

        Method [ <internal:phalcon> abstract public method enable ] {
        }

        Method [ <internal:phalcon> abstract public method reset ] {
        }

        Method [ <internal:phalcon> abstract public method isDisabled ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method setViewsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewsDir ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method getViewsDir ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method setParamToView ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method setVar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method getParamsToView ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method getCache ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method getContent ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\ViewBaseInterface> abstract public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Session\BagInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:phalcon> abstract public method initialize ] {
        }

        Method [ <internal:phalcon> abstract public method destroy ] {
        }

        Method [ <internal:phalcon> abstract public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> abstract public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon> abstract public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> abstract public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon> abstract public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\ValidationInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [16] {
        Method [ <internal:phalcon> abstract public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $entity ]
          }
        }

        Method [ <internal:phalcon> abstract public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon> abstract public method rule ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon> abstract public method rules ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> array $validators ]
          }
        }

        Method [ <internal:phalcon> abstract public method setFilters ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon> abstract public method getFilters ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $field ]
          }
        }

        Method [ <internal:phalcon> abstract public method getValidators ] {
        }

        Method [ <internal:phalcon> abstract public method getEntity ] {
        }

        Method [ <internal:phalcon> abstract public method setDefaultMessages ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $messages ]
          }
        }

        Method [ <internal:phalcon> abstract public method getDefaultMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMessages ] {
        }

        Method [ <internal:phalcon> abstract public method setLabels ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $labels ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> abstract public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method bind ] {

          - Parameters [2] {
            Parameter #0 [ <required> $entity ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> abstract public method getValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Validation\MessageInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $message ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> abstract public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> abstract public method getType ] {
        }

        Method [ <internal:phalcon> abstract public method setMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> abstract public method getMessage ] {
        }

        Method [ <internal:phalcon> abstract public method setField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> abstract public method getField ] {
        }

        Method [ <internal:phalcon> abstract public method __toString ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Acl\ResourceAware ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method getResourceName ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Acl\RoleAware ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method getRoleName ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cli\RouterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [16] {
        Method [ <internal:phalcon> abstract public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultTask ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon> abstract public method setDefaults ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $defaults ]
          }
        }

        Method [ <internal:phalcon> abstract public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $arguments ]
          }
        }

        Method [ <internal:phalcon> abstract public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method getModuleName ] {
        }

        Method [ <internal:phalcon> abstract public method getTaskName ] {
        }

        Method [ <internal:phalcon> abstract public method getActionName ] {
        }

        Method [ <internal:phalcon> abstract public method getParams ] {
        }

        Method [ <internal:phalcon> abstract public method getMatchedRoute ] {
        }

        Method [ <internal:phalcon> abstract public method getMatches ] {
        }

        Method [ <internal:phalcon> abstract public method wasMatched ] {
        }

        Method [ <internal:phalcon> abstract public method getRoutes ] {
        }

        Method [ <internal:phalcon> abstract public method getRouteById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRouteByName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Cli\Router\RouteInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method reset ] {
        }
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:phalcon> abstract public method compilePattern ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon> abstract public method reConfigure ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> abstract public method getName ] {
        }

        Method [ <internal:phalcon> abstract public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> abstract public method getRouteId ] {
        }

        Method [ <internal:phalcon> abstract public method getPattern ] {
        }

        Method [ <internal:phalcon> abstract public method getCompiledPattern ] {
        }

        Method [ <internal:phalcon> abstract public method getPaths ] {
        }

        Method [ <internal:phalcon> abstract public method getReversedPaths ] {
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Filter\UserFilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Collection\ManagerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [11] {
        Method [ <internal:phalcon> abstract public method setCustomEventsManager ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> abstract public method getCustomEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method initialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method isInitialized ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon> abstract public method getLastInitialized ] {
        }

        Method [ <internal:phalcon> abstract public method setConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> abstract public method useImplicitObjectIds ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $useImplicitObjectIds ]
          }
        }

        Method [ <internal:phalcon> abstract public method isUsingImplicitObjectIds ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method getConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method notifyEvent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventName ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> abstract public method addBehavior ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> Phalcon\Mvc\Collection\BehaviorInterface $behavior ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Controller\BindModelInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> abstract static public method getModelName ] {
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\Micro\MiddlewareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> abstract public method call ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Micro $application ]
          }
        }
      }
    }

    Interface [ <internal:phalcon> interface Phalcon\Mvc\ModuleDefinitionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon> abstract public method registerAutoloaders ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> abstract public method registerServices ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Exception extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\ValidatorInterface> abstract public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $attribute ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Di\Injectable implements Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon> public method __toString ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\ElementInterface> abstract public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\ValidatorInterface> abstract public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
      }

      - Methods [17] {
        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon> public method getLifetime ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\BackendInterface> abstract public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\BackendInterface> abstract public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\BackendInterface> abstract public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\BackendInterface> abstract public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\BackendInterface> abstract public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Model\MetaData implements Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\Model\MetaDataInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_metaData ]
        Property [ <default> protected $_columnMap ]
      }

      - Methods [32] {
        Method [ <internal:phalcon> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaDataInterface> abstract public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaDataInterface> abstract public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Annotations\Adapter implements Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_reader ]
        Property [ <default> protected $_annotations ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method getReader ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Annotations\AdapterInterface> public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config implements ArrayAccess, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $arrayConfig ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method merge ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Config $config ]
          }
        }

        Method [ <internal:phalcon> public method toArray ] {
        }

        Method [ <internal:phalcon, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon> final protected method _merge ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Config $config ]
            Parameter #1 [ <optional> $instance ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Db\Adapter implements Phalcon\Db\AdapterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_connectionConsecutive ]
      }

      - Static methods [0] {
      }

      - Properties [11] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_descriptor ]
        Property [ <default> protected $_dialectType ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_dialect ]
        Property [ <default> protected $_connectionId ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_transactionLevel ]
        Property [ <default> protected $_transactionsWithSavepoints ]
      }

      - Methods [70] {
        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getDialectType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $descriptor ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method setDialect ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\DialectInterface $dialect ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getDialect ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method fetchOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method fetchAll ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> public method fetchColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $column ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> public method insertAsDict ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon> public method updateAsDict ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $whereCondition ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon> public method getDefaultValue ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method supportSequences ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getDescriptor ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getConnectionId ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getSQLStatement ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\AdapterInterface> public method getSQLBindTypes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method affectedRows ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method getInternalHandler ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Logger\Adapter implements Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_queue ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
      }

      - Methods [18] {
        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method getLogLevel ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method begin ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method commit ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method rollback ] {
        }

        Method [ <internal:phalcon> public method isTransaction ] {
        }

        Method [ <internal:phalcon> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Logger\AdapterInterface> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\AdapterInterface> abstract public method getFormatter ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\AdapterInterface> abstract public method close ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Logger\Formatter implements Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> public method getTypeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method interpolate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\FormatterInterface> abstract public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Session\Adapter implements Phalcon\Session\AdapterInterface ] {

      - Constants [3] {
        Constant [ integer SESSION_ACTIVE ] { 2 }
        Constant [ integer SESSION_NONE ] { 1 }
        Constant [ integer SESSION_DISABLED ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_uniqueId ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_options ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
            Parameter #2 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method getId ] {
        }

        Method [ <internal:phalcon> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\AdapterInterface> public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $removeData ]
          }
        }

        Method [ <internal:phalcon> public method status ] {
        }

        Method [ <internal:phalcon> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Db\Adapter\Pdo extends Phalcon\Db\Adapter implements Phalcon\Events\EventsAwareInterface, Phalcon\Db\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_connectionConsecutive ]
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_descriptor ]
        Property [ <default> protected $_dialectType ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_dialect ]
        Property [ <default> protected $_connectionId ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_transactionLevel ]
        Property [ <default> protected $_transactionsWithSavepoints ]
        Property [ <default> protected $_pdo ]
        Property [ <default> protected $_affectedRows ]
      }

      - Methods [75] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $descriptor ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon> public method prepare ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlStatement ]
          }
        }

        Method [ <internal:phalcon> public method executePrepared ] {

          - Parameters [3] {
            Parameter #0 [ <required> PDOStatement $statement ]
            Parameter #1 [ <required> array $placeholders ]
            Parameter #2 [ <required> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method affectedRows ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon> public method convertBoundParams ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sql ]
            Parameter #1 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon> public method getTransactionLevel ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method getInternalHandler ] {
        }

        Method [ <internal:phalcon> public method getErrorInfo ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialectType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method setDialect ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\DialectInterface $dialect ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialect ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchAll ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method fetchColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method insertAsDict ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method updateAsDict ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $whereCondition ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method getDefaultValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method supportSequences ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDescriptor ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getConnectionId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLBindTypes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\AdapterInterface> abstract public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Db\Dialect implements Phalcon\Db\DialectInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_escapeChar ]
        Property [ <default> protected $_customFunctions ]
      }

      - Methods [59] {
        Method [ <internal:phalcon> public method registerCustomFunction ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $customFunction ]
          }
        }

        Method [ <internal:phalcon> public method getCustomFunctions ] {
        }

        Method [ <internal:phalcon> final public method escapeSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> final public method escape ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> final public method getColumnList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $columnList ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final public method getSqlColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> public method getSqlExpression ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final public method getSqlTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method select ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method supportsSavepoints ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method supportsReleaseSavepoints ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\DialectInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionScalar ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionObject ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionQualified ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionBinaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionUnaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionFunctionCall ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <required> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionAll ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionCastValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionConvertValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionCase ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionJoins ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionGroupBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionHaving ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionOrderBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> final protected method getSqlExpressionLimit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon> protected method prepareColumnAlias ] {

          - Parameters [3] {
            Parameter #0 [ <required> $qualified ]
            Parameter #1 [ <optional> $alias ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> protected method prepareTable ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon> protected method prepareQualified ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $domain ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\DialectInterface> abstract public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Paginator\Adapter implements Phalcon\Paginator\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_limitRows ]
        Property [ <default> protected $_page ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, prototype Phalcon\Paginator\AdapterInterface> public method setCurrentPage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Paginator\AdapterInterface> public method setLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $limitRows ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Paginator\AdapterInterface> public method getLimit ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\AdapterInterface> abstract public method getPaginate ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Translate\Adapter implements Phalcon\Translate\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_interpolator ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method setInterpolator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Translate\InterpolatorInterface $interpolator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Translate\AdapterInterface> public method t ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> public method _ ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon> protected method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\AdapterInterface> abstract public method query ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\AdapterInterface> abstract public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Application extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_modules ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method registerModules ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $modules ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method getModules ] {
        }

        Method [ <internal:phalcon> public method getModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultModule ]
          }
        }

        Method [ <internal:phalcon> public method getDefaultModule ] {
        }

        Method [ <internal:phalcon> abstract public method handle ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Application\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Inline ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
      }

      - Methods [8] {
        Method [ <internal:phalcon> public method getType ] {
        }

        Method [ <internal:phalcon> public method getContent ] {
        }

        Method [ <internal:phalcon> public method getFilter ] {
        }

        Method [ <internal:phalcon> public method getAttributes ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $content ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Resource ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_path ]
        Property [ <default> protected $_local ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_sourcePath ]
        Property [ <default> protected $_targetPath ]
        Property [ <default> protected $_targetUri ]
      }

      - Methods [21] {
        Method [ <internal:phalcon> public method getType ] {
        }

        Method [ <internal:phalcon> public method getPath ] {
        }

        Method [ <internal:phalcon> public method getLocal ] {
        }

        Method [ <internal:phalcon> public method getFilter ] {
        }

        Method [ <internal:phalcon> public method getAttributes ] {
        }

        Method [ <internal:phalcon> public method getSourcePath ] {
        }

        Method [ <internal:phalcon> public method getTargetPath ] {
        }

        Method [ <internal:phalcon> public method getTargetUri ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $path ]
            Parameter #2 [ <optional> $local ]
            Parameter #3 [ <optional> $filter ]
            Parameter #4 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method setPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon> public method setLocal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $local ]
          }
        }

        Method [ <internal:phalcon> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> public method setTargetUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetUri ]
          }
        }

        Method [ <internal:phalcon> public method setSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sourcePath ]
          }
        }

        Method [ <internal:phalcon> public method setTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetPath ]
          }
        }

        Method [ <internal:phalcon> public method getContent ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon> public method getRealTargetUri ] {
        }

        Method [ <internal:phalcon> public method getRealSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon> public method getRealTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Data implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di implements Phalcon\DiInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_default ]
      }

      - Static methods [3] {
        Method [ <internal:phalcon, prototype Phalcon\DiInterface> static public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> static public method getDefault ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> static public method reset ] {
        }
      }

      - Properties [4] {
        Property [ <default> protected $_services ]
        Property [ <default> protected $_sharedInstances ]
        Property [ <default> protected $_freshInstance ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, ctor> public method __construct ] {
        }

        Method [ <internal:phalcon> public method setInternalEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> public method getInternalEventsManager ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method set ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method setShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method attempt ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method setRaw ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> Phalcon\Di\ServiceInterface $rawDefinition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method getRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method getService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method getShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method wasFreshInstance ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DiInterface> public method getServices ] {
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method __call ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Dispatcher implements Phalcon\DispatcherInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [6] {
        Constant [ integer EXCEPTION_NO_DI ] { 0 }
        Constant [ integer EXCEPTION_CYCLIC_ROUTING ] { 1 }
        Constant [ integer EXCEPTION_HANDLER_NOT_FOUND ] { 2 }
        Constant [ integer EXCEPTION_INVALID_HANDLER ] { 3 }
        Constant [ integer EXCEPTION_INVALID_PARAMS ] { 4 }
        Constant [ integer EXCEPTION_ACTION_NOT_FOUND ] { 5 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [21] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_activeHandler ]
        Property [ <default> protected $_finished ]
        Property [ <default> protected $_forwarded ]
        Property [ <default> protected $_moduleName ]
        Property [ <default> protected $_namespaceName ]
        Property [ <default> protected $_handlerName ]
        Property [ <default> protected $_actionName ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_returnedValue ]
        Property [ <default> protected $_lastHandler ]
        Property [ <default> protected $_defaultNamespace ]
        Property [ <default> protected $_defaultHandler ]
        Property [ <default> protected $_defaultAction ]
        Property [ <default> protected $_handlerSuffix ]
        Property [ <default> protected $_actionSuffix ]
        Property [ <default> protected $_previousNamespaceName ]
        Property [ <default> protected $_previousHandlerName ]
        Property [ <default> protected $_previousActionName ]
        Property [ <default> protected $_modelBinding ]
      }

      - Methods [32] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method getActionSuffix ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon> public method getModuleName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon> public method getNamespaceName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon> public method getDefaultNamespace ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method getParam ] {

          - Parameters [3] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon> public method getActiveMethod ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method isFinished ] {
        }

        Method [ <internal:phalcon> public method setReturnedValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method getReturnedValue ] {
        }

        Method [ <internal:phalcon> public method setModelBinding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method dispatch ] {
        }

        Method [ <internal:phalcon> protected method _dispatch ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\DispatcherInterface> public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }

        Method [ <internal:phalcon> public method wasForwarded ] {
        }

        Method [ <internal:phalcon> public method getHandlerClass ] {
        }

        Method [ <internal:phalcon> public method callActionMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <required> $actionMethod ]
            Parameter #2 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon> protected method _resolveEmptyProperties ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Flash implements Phalcon\FlashInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_cssClasses ]
        Property [ <default> protected $_implicitFlush ]
        Property [ <default> protected $_automaticHtml ]
        Property [ <default> protected $_escaperService ]
        Property [ <default> protected $_autoescape ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_messages ]
      }

      - Methods [17] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $cssClasses ]
          }
        }

        Method [ <internal:phalcon> public method getAutoescape ] {
        }

        Method [ <internal:phalcon> public method setAutoescape ] {

          - Parameters [1] {
            Parameter #0 [ <required> $autoescape ]
          }
        }

        Method [ <internal:phalcon> public method getEscaperService ] {
        }

        Method [ <internal:phalcon> public method setEscaperService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\EscaperInterface $escaperService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method setImplicitFlush ] {

          - Parameters [1] {
            Parameter #0 [ <required> $implicitFlush ]
          }
        }

        Method [ <internal:phalcon> public method setAutomaticHtml ] {

          - Parameters [1] {
            Parameter #0 [ <required> $automaticHtml ]
          }
        }

        Method [ <internal:phalcon> public method setCssClasses ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $cssClasses ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FlashInterface> public method error ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FlashInterface> public method notice ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FlashInterface> public method success ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FlashInterface> public method warning ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> public method outputMessage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\FlashInterface> abstract public method message ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Image\Adapter implements Phalcon\Image\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_checked ]
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_image ]
        Property [ <default> protected $_file ]
        Property [ <default> protected $_realpath ]
        Property [ <default> protected $_width ]
        Property [ <default> protected $_height ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_mime ]
      }

      - Methods [21] {
        Method [ <internal:phalcon> public method getImage ] {
        }

        Method [ <internal:phalcon> public method getRealpath ] {
        }

        Method [ <internal:phalcon> public method getWidth ] {
        }

        Method [ <internal:phalcon> public method getHeight ] {
        }

        Method [ <internal:phalcon> public method getType ] {
        }

        Method [ <internal:phalcon> public method getMime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method resize ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $width ]
            Parameter #1 [ <optional> $height ]
            Parameter #2 [ <optional> $master ]
          }
        }

        Method [ <internal:phalcon> public method liquidRescale ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $deltaX ]
            Parameter #3 [ <optional> $rigidity ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $offsetX ]
            Parameter #3 [ <optional> $offsetY ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <optional> $opacity ]
            Parameter #2 [ <optional> $fadeIn ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method text ] {

          - Parameters [7] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
            Parameter #4 [ <optional> $color ]
            Parameter #5 [ <optional> $size ]
            Parameter #6 [ <optional> $fontfile ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method background ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $file ]
            Parameter #1 [ <optional> $quality ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Image\AdapterInterface> public method render ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $ext ]
            Parameter #1 [ <optional> $quality ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Collection\Behavior implements Phalcon\Mvc\Collection\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Model\Behavior implements Phalcon\Mvc\Model\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> abstract class Phalcon\Mvc\Model\Resultset implements Phalcon\Mvc\Model\ResultsetInterface, Iterator, Traversable, SeekableIterator, Countable, ArrayAccess, Serializable, JsonSerializable ] {

      - Constants [5] {
        Constant [ integer TYPE_RESULT_FULL ] { 0 }
        Constant [ integer TYPE_RESULT_PARTIAL ] { 1 }
        Constant [ integer HYDRATE_RECORDS ] { 0 }
        Constant [ integer HYDRATE_OBJECTS ] { 2 }
        Constant [ integer HYDRATE_ARRAYS ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [10] {
        Property [ <default> protected $_result ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_isFresh ]
        Property [ <default> protected $_pointer ]
        Property [ <default> protected $_count ]
        Property [ <default> protected $_activeRow ]
        Property [ <default> protected $_rows ]
        Property [ <default> protected $_row ]
        Property [ <default> protected $_errorMessages ]
        Property [ <default> protected $_hydrateMode ]
      }

      - Methods [28] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $result ]
            Parameter #1 [ <optional> Phalcon\Cache\BackendInterface or NULL $cache ]
          }
        }

        Method [ <internal:phalcon, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> final public method rewind ] {
        }

        Method [ <internal:phalcon, prototype SeekableIterator> final public method seek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> final public method count ] {
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getFirst ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getLast ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method setIsFresh ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isFresh ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon> public method setHydrateMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hydrateMode ]
          }
        }

        Method [ <internal:phalcon> public method getHydrateMode ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getCache ] {
        }

        Method [ <internal:phalcon> public method getMessages ] {
        }

        Method [ <internal:phalcon> public method update ] {

          - Parameters [2] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, prototype JsonSerializable> public method jsonSerialize ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\ResultsetInterface> abstract public method toArray ] {
        }

        Method [ <internal:Core, inherits Iterator, prototype Iterator> abstract public method current ] {
        }

        Method [ <internal:Core, inherits Serializable> abstract public method serialize ] {
        }

        Method [ <internal:Core, inherits Serializable, ctor> abstract public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serialized ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\View\Engine extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\View\EngineInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_view ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ViewBaseInterface $view ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\View\EngineInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\View\EngineInterface> public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> public method getView ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\EngineInterface> abstract public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $params ]
            Parameter #2 [ <optional> $mustClean ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Acl\Adapter implements Phalcon\Acl\AdapterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_defaultAccess ]
        Property [ <default> protected $_accessGranted ]
        Property [ <default> protected $_activeRole ]
        Property [ <default> protected $_activeResource ]
        Property [ <default> protected $_activeAccess ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, prototype Phalcon\Acl\AdapterInterface> public method getActiveRole ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\AdapterInterface> public method getActiveResource ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\AdapterInterface> public method getActiveAccess ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\AdapterInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\AdapterInterface> public method getDefaultAction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method setNoArgumentsDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method getNoArgumentsDefaultAction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method addRole ] {

          - Parameters [2] {
            Parameter #0 [ <required> $role ]
            Parameter #1 [ <optional> $accessInherits ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method addInherit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $roleToInherit ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method isRole ] {

          - Parameters [1] {
            Parameter #0 [ <required> $roleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method isResource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $resourceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method addResource ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceObject ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method addResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method dropResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method allow ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method deny ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method isAllowed ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method getRoles ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\AdapterInterface> abstract public method getResources ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di\FactoryDefault extends Phalcon\Di implements ArrayAccess, Phalcon\DiInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_default ]
      }

      - Static methods [3] {
        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method reset ] {
        }
      }

      - Properties [4] {
        Property [ <default> protected $_services ]
        Property [ <default> protected $_sharedInstances ]
        Property [ <default> protected $_freshInstance ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, overwrites Phalcon\Di, ctor> public method __construct ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method setInternalEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method getInternalEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method set ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method setShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method attempt ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method setRaw ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> Phalcon\Di\ServiceInterface $rawDefinition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method wasFreshInstance ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getServices ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method __call ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Transaction\Exception extends Phalcon\Mvc\Model\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Router implements Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\RouterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [4] {
        Constant [ integer URI_SOURCE_GET_URL ] { 0 }
        Constant [ integer URI_SOURCE_SERVER_REQUEST_URI ] { 1 }
        Constant [ integer POSITION_FIRST ] { 0 }
        Constant [ integer POSITION_LAST ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [19] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_uriSource ]
        Property [ <default> protected $_namespace ]
        Property [ <default> protected $_module ]
        Property [ <default> protected $_controller ]
        Property [ <default> protected $_action ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_routes ]
        Property [ <default> protected $_matchedRoute ]
        Property [ <default> protected $_matches ]
        Property [ <default> protected $_wasMatched ]
        Property [ <default> protected $_defaultNamespace ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_defaultController ]
        Property [ <default> protected $_defaultAction ]
        Property [ <default> protected $_defaultParams ]
        Property [ <default> protected $_removeExtraSlashes ]
        Property [ <default> protected $_notFoundPaths ]
      }

      - Methods [41] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $defaultRoutes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method getRewriteUri ] {
        }

        Method [ <internal:phalcon> public method setUriSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $uriSource ]
          }
        }

        Method [ <internal:phalcon> public method removeExtraSlashes ] {

          - Parameters [1] {
            Parameter #0 [ <required> $remove ]
          }
        }

        Method [ <internal:phalcon> public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method setDefaultController ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method setDefaults ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $defaults ]
          }
        }

        Method [ <internal:phalcon> public method getDefaults ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method add ] {

          - Parameters [4] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
            Parameter #3 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addGet ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addPost ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addPut ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addPatch ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addDelete ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addOptions ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addHead ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addPurge ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addTrace ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method addConnect ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method mount ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Router\GroupInterface $group ]
          }
        }

        Method [ <internal:phalcon> public method notFound ] {

          - Parameters [1] {
            Parameter #0 [ <required> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method clear ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getNamespaceName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getModuleName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getControllerName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getMatchedRoute ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getMatches ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method wasMatched ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getRoutes ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getRouteById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\RouterInterface> public method getRouteByName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method isExactControllerName ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Validation\CombinedFieldsValidator extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> abstract public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $attribute ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Acl ] {

      - Constants [2] {
        Constant [ integer ALLOW ] { 1 }
        Constant [ integer DENY ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Acl\Adapter\Memory extends Phalcon\Acl\Adapter implements Phalcon\Events\EventsAwareInterface, Phalcon\Acl\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [15] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_defaultAccess ]
        Property [ <default> protected $_accessGranted ]
        Property [ <default> protected $_activeRole ]
        Property [ <default> protected $_activeResource ]
        Property [ <default> protected $_activeAccess ]
        Property [ <default> protected $_rolesNames ]
        Property [ <default> protected $_roles ]
        Property [ <default> protected $_resourcesNames ]
        Property [ <default> protected $_resources ]
        Property [ <default> protected $_access ]
        Property [ <default> protected $_roleInherits ]
        Property [ <default> protected $_accessList ]
        Property [ <default> protected $_func ]
        Property [ <default> protected $_noArgumentsDefaultAction ]
      }

      - Methods [23] {
        Method [ <internal:phalcon, ctor> public method __construct ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method addRole ] {

          - Parameters [2] {
            Parameter #0 [ <required> $role ]
            Parameter #1 [ <optional> $accessInherits ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method addInherit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $roleToInherit ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method isRole ] {

          - Parameters [1] {
            Parameter #0 [ <required> $roleName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method isResource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $resourceName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method addResource ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceValue ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method addResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method dropResourceAccess ] {

          - Parameters [2] {
            Parameter #0 [ <required> $resourceName ]
            Parameter #1 [ <required> $accessList ]
          }
        }

        Method [ <internal:phalcon> protected method _allowOrDeny ] {

          - Parameters [5] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <required> $action ]
            Parameter #4 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method allow ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method deny ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> $func ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method isAllowed ] {

          - Parameters [4] {
            Parameter #0 [ <required> $roleName ]
            Parameter #1 [ <required> $resourceName ]
            Parameter #2 [ <required> $access ]
            Parameter #3 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method setNoArgumentsDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method getNoArgumentsDefaultAction ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method getRoles ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Acl\AdapterInterface, prototype Phalcon\Acl\AdapterInterface> public method getResources ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Acl\AdapterInterface> public method getActiveRole ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Acl\AdapterInterface> public method getActiveResource ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Acl\AdapterInterface> public method getActiveAccess ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Acl\AdapterInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultAccess ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Acl\Adapter, prototype Phalcon\Acl\AdapterInterface> public method getDefaultAction ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Acl\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Acl\Resource implements Phalcon\Acl\ResourceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_description ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, prototype Phalcon\Acl\ResourceInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\ResourceInterface> public method __toString ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\ResourceInterface> public method getDescription ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $description ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Acl\Role implements Phalcon\Acl\RoleInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_description ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, prototype Phalcon\Acl\RoleInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\RoleInterface> public method __toString ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Acl\RoleInterface> public method getDescription ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $description ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Adapter\Apc extends Phalcon\Annotations\Adapter implements Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_reader ]
        Property [ <default> protected $_annotations ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_ttl ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> Phalcon\Annotations\Reflection $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getReader ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Adapter\Files extends Phalcon\Annotations\Adapter implements Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_reader ]
        Property [ <default> protected $_annotations ]
        Property [ <default> protected $_annotationsDir ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> Phalcon\Annotations\Reflection $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getReader ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Adapter\Memory extends Phalcon\Annotations\Adapter implements Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_reader ]
        Property [ <default> protected $_annotations ]
        Property [ <default> protected $_data ]
      }

      - Methods [9] {
        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> Phalcon\Annotations\Reflection $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getReader ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Adapter\Xcache extends Phalcon\Annotations\Adapter implements Phalcon\Annotations\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_reader ]
        Property [ <default> protected $_annotations ]
      }

      - Methods [9] {
        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> Phalcon\Annotations\Reflection $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method setReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Annotations\ReaderInterface $reader ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getReader ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $methodName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperties ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Annotations\Adapter, prototype Phalcon\Annotations\AdapterInterface> public method getProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> $className ]
            Parameter #1 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Annotation ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_arguments ]
        Property [ <default> protected $_exprArguments ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $reflectionData ]
          }
        }

        Method [ <internal:phalcon> public method getName ] {
        }

        Method [ <internal:phalcon> public method getExpression ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> public method getExprArguments ] {
        }

        Method [ <internal:phalcon> public method getArguments ] {
        }

        Method [ <internal:phalcon> public method numberArguments ] {
        }

        Method [ <internal:phalcon> public method getArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon> public method hasArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon> public method getNamedArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method getNamedParameter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Annotations\Collection implements Iterator, Traversable, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_position ]
        Property [ <default> protected $_annotations ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $reflectionData ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method rewind ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method current ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon> public method getAnnotations ] {
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method getAll ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Exception extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Reader implements Phalcon\Annotations\ReaderInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Annotations\ReaderInterface> static public method parseDocBlock ] {

          - Parameters [3] {
            Parameter #0 [ <required> $docBlock ]
            Parameter #1 [ <optional> $file ]
            Parameter #2 [ <optional> $line ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Annotations\ReaderInterface> public method parse ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Annotations\Reflection ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }

      - Properties [4] {
        Property [ <default> protected $_reflectionData ]
        Property [ <default> protected $_classAnnotations ]
        Property [ <default> protected $_methodAnnotations ]
        Property [ <default> protected $_propertyAnnotations ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $reflectionData ]
          }
        }

        Method [ <internal:phalcon> public method getClassAnnotations ] {
        }

        Method [ <internal:phalcon> public method getMethodsAnnotations ] {
        }

        Method [ <internal:phalcon> public method getPropertiesAnnotations ] {
        }

        Method [ <internal:phalcon> public method getReflectionData ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Assets\Collection implements Countable, Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [12] {
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_local ]
        Property [ <default> protected $_resources ]
        Property [ <default> protected $_codes ]
        Property [ <default> protected $_position ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_join ]
        Property [ <default> protected $_targetUri ]
        Property [ <default> protected $_targetPath ]
        Property [ <default> protected $_targetLocal ]
        Property [ <default> protected $_sourcePath ]
      }

      - Methods [35] {
        Method [ <internal:phalcon> public method getPrefix ] {
        }

        Method [ <internal:phalcon> public method getLocal ] {
        }

        Method [ <internal:phalcon> public method getResources ] {
        }

        Method [ <internal:phalcon> public method getCodes ] {
        }

        Method [ <internal:phalcon> public method getPosition ] {
        }

        Method [ <internal:phalcon> public method getFilters ] {
        }

        Method [ <internal:phalcon> public method getAttributes ] {
        }

        Method [ <internal:phalcon> public method getJoin ] {
        }

        Method [ <internal:phalcon> public method getTargetUri ] {
        }

        Method [ <internal:phalcon> public method getTargetPath ] {
        }

        Method [ <internal:phalcon> public method getTargetLocal ] {
        }

        Method [ <internal:phalcon> public method getSourcePath ] {
        }

        Method [ <internal:phalcon> public method add ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Assets\Resource $resource ]
          }
        }

        Method [ <internal:phalcon> public method addInline ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Assets\Inline $code ]
          }
        }

        Method [ <internal:phalcon> public method addCss ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addInlineCss ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addJs ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addInlineJs ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method rewind ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method current ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon> public method setTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetPath ]
          }
        }

        Method [ <internal:phalcon> public method setSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sourcePath ]
          }
        }

        Method [ <internal:phalcon> public method setTargetUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetUri ]
          }
        }

        Method [ <internal:phalcon> public method setPrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon> public method setLocal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $local ]
          }
        }

        Method [ <internal:phalcon> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $filters ]
          }
        }

        Method [ <internal:phalcon> public method setTargetLocal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetLocal ]
          }
        }

        Method [ <internal:phalcon> public method join ] {

          - Parameters [1] {
            Parameter #0 [ <required> $join ]
          }
        }

        Method [ <internal:phalcon> public method getRealTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basePath ]
          }
        }

        Method [ <internal:phalcon> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Assets\FilterInterface $filter ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Filters\Cssmin implements Phalcon\Assets\FilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Assets\FilterInterface> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Filters\Jsmin implements Phalcon\Assets\FilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Assets\FilterInterface> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Filters\None implements Phalcon\Assets\FilterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Assets\FilterInterface> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Inline\Css extends Phalcon\Assets\Inline ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, overwrites Phalcon\Assets\Inline, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getContent ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getFilter ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Inline\Js extends Phalcon\Assets\Inline ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, overwrites Phalcon\Assets\Inline, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getContent ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getFilter ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Inline> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Manager ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_collections ]
        Property [ <default> protected $_implicitOutput ]
      }

      - Methods [25] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon> public method useImplicitOutput ] {

          - Parameters [1] {
            Parameter #0 [ <required> $implicitOutput ]
          }
        }

        Method [ <internal:phalcon> public method addCss ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addInlineCss ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addJs ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addInlineJs ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $filter ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method addResourceByType ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Assets\Resource $resource ]
          }
        }

        Method [ <internal:phalcon> public method addInlineCodeByType ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Assets\Inline $code ]
          }
        }

        Method [ <internal:phalcon> public method addResource ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Assets\Resource $resource ]
          }
        }

        Method [ <internal:phalcon> public method addInlineCode ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Assets\Inline $code ]
          }
        }

        Method [ <internal:phalcon> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $id ]
            Parameter #1 [ <required> Phalcon\Assets\Collection $collection ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> public method getCss ] {
        }

        Method [ <internal:phalcon> public method getJs ] {
        }

        Method [ <internal:phalcon> public method collection ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method output ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Assets\Collection $collection ]
            Parameter #1 [ <required> $callback ]
            Parameter #2 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method outputInline ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Assets\Collection $collection ]
            Parameter #1 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method outputCss ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collectionName ]
          }
        }

        Method [ <internal:phalcon> public method outputInlineCss ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collectionName ]
          }
        }

        Method [ <internal:phalcon> public method outputJs ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collectionName ]
          }
        }

        Method [ <internal:phalcon> public method outputInlineJs ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collectionName ]
          }
        }

        Method [ <internal:phalcon> public method getCollections ] {
        }

        Method [ <internal:phalcon> public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Resource\Css extends Phalcon\Assets\Resource ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_path ]
        Property [ <default> protected $_local ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_sourcePath ]
        Property [ <default> protected $_targetPath ]
        Property [ <default> protected $_targetUri ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, overwrites Phalcon\Assets\Resource, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getPath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getLocal ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getFilter ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getSourcePath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getTargetPath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getTargetUri ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setLocal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $local ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setTargetUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetUri ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sourcePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetPath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getContent ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealTargetUri ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Assets\Resource\Js extends Phalcon\Assets\Resource ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_path ]
        Property [ <default> protected $_local ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_sourcePath ]
        Property [ <default> protected $_targetPath ]
        Property [ <default> protected $_targetUri ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, overwrites Phalcon\Assets\Resource, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $local ]
            Parameter #2 [ <optional> $filter ]
            Parameter #3 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getPath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getLocal ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getFilter ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getSourcePath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getTargetPath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getTargetUri ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setLocal ] {

          - Parameters [1] {
            Parameter #0 [ <required> $local ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setTargetUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetUri ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sourcePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method setTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $targetPath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getContent ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealTargetUri ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealSourcePath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Assets\Resource> public method getRealTargetPath ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $basePath ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Apc extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\File extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> private $_useSafeKey ]
      }

      - Methods [22] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon> public method getKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method useSafeKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useSafeKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Libmemcached extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_memcache ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method _connect ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Memcache extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_memcache ]
      }

      - Methods [22] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method _connect ] {
        }

        Method [ <internal:phalcon> public method addServers ] {

          - Parameters [3] {
            Parameter #0 [ <required> $host ]
            Parameter #1 [ <required> $port ]
            Parameter #2 [ <optional> $persistent ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Memory extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface, Serializable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_data ]
      }

      - Methods [22] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, prototype Serializable> public method serialize ] {
        }

        Method [ <internal:phalcon, prototype Serializable> public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Mongo extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_collection ]
      }

      - Methods [22] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> final protected method _getCollection ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method gc ] {
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Redis extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_redis ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method _connect ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Backend\Xcache extends Phalcon\Cache\Backend implements Phalcon\Cache\BackendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_frontend ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lastKey ]
        Property [ <default> protected $_lastLifetime ]
        Property [ <default> protected $_fresh ]
        Property [ <default> protected $_started ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Backend, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Cache\FrontendInterface $frontend ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method queryKeys ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\BackendInterface, prototype Phalcon\Cache\BackendInterface> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method decrement ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getFrontend ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setFrontend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $frontend ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method getLastKey ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method setLastKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method stop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend, prototype Phalcon\Cache\BackendInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Cache\Backend> public method getLifetime ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Base64 implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Igbinary extends Phalcon\Cache\Frontend\Data implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Json implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Msgpack extends Phalcon\Cache\Frontend\Data implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Cache\Frontend\Data, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\None implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Frontend\Output implements Phalcon\Cache\FrontendInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_buffering ]
        Property [ <default> protected $_frontendOptions ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $frontendOptions ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getLifetime ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method isBuffering ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method start ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method beforeStore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cache\FrontendInterface> public method afterRetrieve ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cache\Multiple ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_backends ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $backends ]
          }
        }

        Method [ <internal:phalcon> public method push ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Cache\BackendInterface $backend ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method start ] {

          - Parameters [2] {
            Parameter #0 [ <required> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method save ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $content ]
            Parameter #2 [ <optional> $lifetime ]
            Parameter #3 [ <optional> $stopBuffer ]
          }
        }

        Method [ <internal:phalcon> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keyName ]
          }
        }

        Method [ <internal:phalcon> public method exists ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $keyName ]
            Parameter #1 [ <optional> $lifetime ]
          }
        }

        Method [ <internal:phalcon> public method flush ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Console extends Phalcon\Application implements Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_modules ]
        Property [ <default> protected $_arguments ]
        Property [ <default> protected $_options ]
      }

      - Methods [14] {
        Method [ <internal, deprecated:phalcon> public method addModules ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $modules ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Application, prototype Phalcon\Application> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $arguments ]
          }
        }

        Method [ <internal:phalcon> public method setArgument ] {

          - Parameters [3] {
            Parameter #0 [ <optional> array or NULL $arguments ]
            Parameter #1 [ <optional> $str ]
            Parameter #2 [ <optional> $shift ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method registerModules ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $modules ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getModules ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultModule ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getDefaultModule ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Console\Exception extends Phalcon\Application\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Dispatcher extends Phalcon\Dispatcher implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\DispatcherInterface, Phalcon\Cli\DispatcherInterface ] {

      - Constants [6] {
        Constant [ integer EXCEPTION_NO_DI ] { 0 }
        Constant [ integer EXCEPTION_CYCLIC_ROUTING ] { 1 }
        Constant [ integer EXCEPTION_HANDLER_NOT_FOUND ] { 2 }
        Constant [ integer EXCEPTION_INVALID_HANDLER ] { 3 }
        Constant [ integer EXCEPTION_INVALID_PARAMS ] { 4 }
        Constant [ integer EXCEPTION_ACTION_NOT_FOUND ] { 5 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [22] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_activeHandler ]
        Property [ <default> protected $_finished ]
        Property [ <default> protected $_forwarded ]
        Property [ <default> protected $_moduleName ]
        Property [ <default> protected $_namespaceName ]
        Property [ <default> protected $_handlerName ]
        Property [ <default> protected $_actionName ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_returnedValue ]
        Property [ <default> protected $_lastHandler ]
        Property [ <default> protected $_defaultNamespace ]
        Property [ <default> protected $_actionSuffix ]
        Property [ <default> protected $_previousNamespaceName ]
        Property [ <default> protected $_previousHandlerName ]
        Property [ <default> protected $_previousActionName ]
        Property [ <default> protected $_modelBinding ]
        Property [ <default> protected $_handlerSuffix ]
        Property [ <default> protected $_defaultHandler ]
        Property [ <default> protected $_defaultAction ]
        Property [ <default> protected $_options ]
      }

      - Methods [42] {
        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method setTaskSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskSuffix ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method setDefaultTask ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method setTaskName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method getTaskName ] {
        }

        Method [ <internal:phalcon> protected method _throwDispatchException ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $exceptionCode ]
          }
        }

        Method [ <internal:phalcon> protected method _handleException ] {

          - Parameters [1] {
            Parameter #0 [ <required> Exception $exception ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method getLastTask ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Cli\DispatcherInterface> public method getActiveTask ] {
        }

        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Dispatcher, prototype Phalcon\Dispatcher> public method callActionMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <required> $actionMethod ]
            Parameter #2 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getActionSuffix ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getModuleName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getNamespaceName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getDefaultNamespace ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getParam ] {

          - Parameters [3] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getActiveMethod ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method isFinished ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method setReturnedValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getReturnedValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method setModelBinding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> protected method _dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method wasForwarded ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getHandlerClass ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> protected method _resolveEmptyProperties ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Dispatcher\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Router implements Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_module ]
        Property [ <default> protected $_task ]
        Property [ <default> protected $_action ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_defaultTask ]
        Property [ <default> protected $_defaultAction ]
        Property [ <default> protected $_defaultParams ]
        Property [ <default> protected $_routes ]
        Property [ <default> protected $_matchedRoute ]
        Property [ <default> protected $_matches ]
        Property [ <default> protected $_wasMatched ]
      }

      - Methods [19] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $defaultRoutes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon> public method setDefaultTask ] {

          - Parameters [1] {
            Parameter #0 [ <required> $taskName ]
          }
        }

        Method [ <internal:phalcon> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon> public method setDefaults ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $defaults ]
          }
        }

        Method [ <internal:phalcon> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $arguments ]
          }
        }

        Method [ <internal:phalcon> public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> public method getModuleName ] {
        }

        Method [ <internal:phalcon> public method getTaskName ] {
        }

        Method [ <internal:phalcon> public method getActionName ] {
        }

        Method [ <internal:phalcon> public method getParams ] {
        }

        Method [ <internal:phalcon> public method getMatchedRoute ] {
        }

        Method [ <internal:phalcon> public method getMatches ] {
        }

        Method [ <internal:phalcon> public method wasMatched ] {
        }

        Method [ <internal:phalcon> public method getRoutes ] {
        }

        Method [ <internal:phalcon> public method getRouteById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> public method getRouteByName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Router\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Router\Route ] {

      - Constants [1] {
        Constant [ string DEFAULT_DELIMITER ] {   }
      }

      - Static properties [2] {
        Property [ protected static $_uniqueId ]
        Property [ protected static $_delimiterPath ]
      }

      - Static methods [3] {
        Method [ <internal:phalcon> static public method reset ] {
        }

        Method [ <internal:phalcon> static public method delimiter ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $delimiter ]
          }
        }

        Method [ <internal:phalcon> static public method getDelimiter ] {
        }
      }

      - Properties [8] {
        Property [ <default> protected $_pattern ]
        Property [ <default> protected $_compiledPattern ]
        Property [ <default> protected $_paths ]
        Property [ <default> protected $_converters ]
        Property [ <default> protected $_id ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_beforeMatch ]
        Property [ <default> protected $_delimiter ]
      }

      - Methods [15] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> public method compilePattern ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon> public method extractNamedParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon> public method reConfigure ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon> public method getName ] {
        }

        Method [ <internal:phalcon> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method beforeMatch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $callback ]
          }
        }

        Method [ <internal:phalcon> public method getBeforeMatch ] {
        }

        Method [ <internal:phalcon> public method getRouteId ] {
        }

        Method [ <internal:phalcon> public method getPattern ] {
        }

        Method [ <internal:phalcon> public method getCompiledPattern ] {
        }

        Method [ <internal:phalcon> public method getPaths ] {
        }

        Method [ <internal:phalcon> public method getReversedPaths ] {
        }

        Method [ <internal:phalcon> public method convert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $converter ]
          }
        }

        Method [ <internal:phalcon> public method getConverters ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Cli\Task extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Cli\TaskInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config\Adapter\Ini extends Phalcon\Config implements Countable, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, inherits Phalcon\Config> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [12] {
        Method [ <internal:phalcon, overwrites Phalcon\Config, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $filePath ]
            Parameter #1 [ <optional> $mode ]
          }
        }

        Method [ <internal:phalcon> protected method _parseIniString ] {

          - Parameters [2] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> protected method _cast ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ini ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method merge ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Config $config ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method toArray ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> final protected method _merge ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Config $config ]
            Parameter #1 [ <optional> $instance ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config\Adapter\Json extends Phalcon\Config implements Countable, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, inherits Phalcon\Config> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [10] {
        Method [ <internal:phalcon, overwrites Phalcon\Config, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method merge ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Config $config ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method toArray ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> final protected method _merge ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Config $config ]
            Parameter #1 [ <optional> $instance ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config\Adapter\Php extends Phalcon\Config implements Countable, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, inherits Phalcon\Config> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [10] {
        Method [ <internal:phalcon, overwrites Phalcon\Config, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filePath ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method merge ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Config $config ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method toArray ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> final protected method _merge ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Config $config ]
            Parameter #1 [ <optional> $instance ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config\Adapter\Yaml extends Phalcon\Config implements Countable, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, inherits Phalcon\Config> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [10] {
        Method [ <internal:phalcon, overwrites Phalcon\Config, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $filePath ]
            Parameter #1 [ <optional> array or NULL $callbacks ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method merge ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Config $config ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> public method toArray ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Config> final protected method _merge ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Config $config ]
            Parameter #1 [ <optional> $instance ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Config\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Crypt implements Phalcon\CryptInterface ] {

      - Constants [7] {
        Constant [ integer PADDING_DEFAULT ] { 0 }
        Constant [ integer PADDING_ANSI_X_923 ] { 1 }
        Constant [ integer PADDING_PKCS7 ] { 2 }
        Constant [ integer PADDING_ISO_10126 ] { 3 }
        Constant [ integer PADDING_ISO_IEC_7816_4 ] { 4 }
        Constant [ integer PADDING_ZERO ] { 5 }
        Constant [ integer PADDING_SPACE ] { 6 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_key ]
        Property [ <default> protected $_padding ]
        Property [ <default> protected $_cipher ]
      }

      - Methods [12] {
        Method [ <internal:phalcon> public method setPadding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $scheme ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method setCipher ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cipher ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method getCipher ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method setKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method getKey ] {
        }

        Method [ <internal:phalcon> protected method _cryptPadText ] {

          - Parameters [4] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <required> $mode ]
            Parameter #2 [ <required> $blockSize ]
            Parameter #3 [ <required> $paddingType ]
          }
        }

        Method [ <internal:phalcon> protected method _cryptUnpadText ] {

          - Parameters [4] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <required> $mode ]
            Parameter #2 [ <required> $blockSize ]
            Parameter #3 [ <required> $paddingType ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method encrypt ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method decrypt ] {

          - Parameters [2] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method encryptBase64 ] {

          - Parameters [3] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
            Parameter #2 [ <optional> $safe ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method decryptBase64 ] {

          - Parameters [3] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $key ]
            Parameter #2 [ <optional> $safe ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\CryptInterface> public method getAvailableCiphers ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Crypt\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Db ] {

      - Constants [17] {
        Constant [ integer FETCH_LAZY ] { 1 }
        Constant [ integer FETCH_ASSOC ] { 2 }
        Constant [ integer FETCH_NAMED ] { 11 }
        Constant [ integer FETCH_NUM ] { 3 }
        Constant [ integer FETCH_BOTH ] { 4 }
        Constant [ integer FETCH_OBJ ] { 5 }
        Constant [ integer FETCH_BOUND ] { 6 }
        Constant [ integer FETCH_COLUMN ] { 7 }
        Constant [ integer FETCH_CLASS ] { 8 }
        Constant [ integer FETCH_INTO ] { 9 }
        Constant [ integer FETCH_FUNC ] { 10 }
        Constant [ integer FETCH_GROUP ] { 65536 }
        Constant [ integer FETCH_UNIQUE ] { 196608 }
        Constant [ integer FETCH_KEY_PAIR ] { 12 }
        Constant [ integer FETCH_CLASSTYPE ] { 262144 }
        Constant [ integer FETCH_SERIALIZE ] { 524288 }
        Constant [ integer FETCH_PROPS_LATE ] { 1048576 }
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method setup ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Adapter\Pdo\Mysql extends Phalcon\Db\Adapter\Pdo implements Phalcon\Db\AdapterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_connectionConsecutive ]
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_descriptor ]
        Property [ <default> protected $_dialect ]
        Property [ <default> protected $_connectionId ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_transactionLevel ]
        Property [ <default> protected $_transactionsWithSavepoints ]
        Property [ <default> protected $_pdo ]
        Property [ <default> protected $_affectedRows ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_dialectType ]
      }

      - Methods [75] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $descriptor ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method prepare ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlStatement ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method executePrepared ] {

          - Parameters [3] {
            Parameter #0 [ <required> PDOStatement $statement ]
            Parameter #1 [ <required> array $placeholders ]
            Parameter #2 [ <required> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method affectedRows ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method convertBoundParams ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sql ]
            Parameter #1 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getTransactionLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method getInternalHandler ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getErrorInfo ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialectType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method setDialect ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\DialectInterface $dialect ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialect ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchAll ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method fetchColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method insertAsDict ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method updateAsDict ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $whereCondition ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method getDefaultValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method supportSequences ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDescriptor ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getConnectionId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLBindTypes ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Adapter\Pdo\Postgresql extends Phalcon\Db\Adapter\Pdo implements Phalcon\Db\AdapterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_connectionConsecutive ]
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_descriptor ]
        Property [ <default> protected $_dialect ]
        Property [ <default> protected $_connectionId ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_transactionLevel ]
        Property [ <default> protected $_transactionsWithSavepoints ]
        Property [ <default> protected $_pdo ]
        Property [ <default> protected $_affectedRows ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_dialectType ]
      }

      - Methods [75] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method supportSequences ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $descriptor ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method prepare ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlStatement ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method executePrepared ] {

          - Parameters [3] {
            Parameter #0 [ <required> PDOStatement $statement ]
            Parameter #1 [ <required> array $placeholders ]
            Parameter #2 [ <required> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method affectedRows ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method convertBoundParams ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sql ]
            Parameter #1 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getTransactionLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method getInternalHandler ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getErrorInfo ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialectType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method setDialect ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\DialectInterface $dialect ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialect ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchAll ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method fetchColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method insertAsDict ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method updateAsDict ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $whereCondition ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method getDefaultValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDescriptor ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getConnectionId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLBindTypes ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Adapter\Pdo\Sqlite extends Phalcon\Db\Adapter\Pdo implements Phalcon\Db\AdapterInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_connectionConsecutive ]
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_descriptor ]
        Property [ <default> protected $_dialect ]
        Property [ <default> protected $_connectionId ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_transactionLevel ]
        Property [ <default> protected $_transactionsWithSavepoints ]
        Property [ <default> protected $_pdo ]
        Property [ <default> protected $_affectedRows ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_dialectType ]
      }

      - Methods [75] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $descriptor ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\AdapterInterface, prototype Phalcon\Db\AdapterInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method useExplicitIdValue ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\Adapter, prototype Phalcon\Db\Adapter> public method getDefaultValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $descriptor ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method prepare ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlStatement ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method executePrepared ] {

          - Parameters [3] {
            Parameter #0 [ <required> PDOStatement $statement ]
            Parameter #1 [ <required> array $placeholders ]
            Parameter #2 [ <required> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method query ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method execute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method affectedRows ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method convertBoundParams ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sql ]
            Parameter #1 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method lastInsertId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sequenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method begin ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method commit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $nesting ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getTransactionLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method isUnderTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo, prototype Phalcon\Db\AdapterInterface> public method getInternalHandler ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter\Pdo> public method getErrorInfo ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialectType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method setDialect ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\DialectInterface $dialect ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDialect ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method fetchAll ] {

          - Parameters [4] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $fetchMode ]
            Parameter #2 [ <optional> $bindParams ]
            Parameter #3 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method fetchColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method insert ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $fields ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method insertAsDict ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method update ] {

          - Parameters [5] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $values ]
            Parameter #3 [ <optional> $whereCondition ]
            Parameter #4 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter> public method updateAsDict ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <required> $data ]
            Parameter #2 [ <optional> $whereCondition ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method delete ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $whereCondition ]
            Parameter #2 [ <optional> $placeholders ]
            Parameter #3 [ <optional> $dataTypes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method escapeIdentifier ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columnList ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method setNestedTransactionsWithSavepoints ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nestedTransactionsWithSavepoints ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method isNestedTransactionsWithSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getNestedTransactionSavepointName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDefaultIdValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method supportSequences ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getDescriptor ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getConnectionId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getRealSQLStatement ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Adapter, prototype Phalcon\Db\AdapterInterface> public method getSQLBindTypes ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Column implements Phalcon\Db\ColumnInterface ] {

      - Constants [25] {
        Constant [ integer TYPE_INTEGER ] { 0 }
        Constant [ integer TYPE_DATE ] { 1 }
        Constant [ integer TYPE_VARCHAR ] { 2 }
        Constant [ integer TYPE_DECIMAL ] { 3 }
        Constant [ integer TYPE_DATETIME ] { 4 }
        Constant [ integer TYPE_CHAR ] { 5 }
        Constant [ integer TYPE_TEXT ] { 6 }
        Constant [ integer TYPE_FLOAT ] { 7 }
        Constant [ integer TYPE_BOOLEAN ] { 8 }
        Constant [ integer TYPE_DOUBLE ] { 9 }
        Constant [ integer TYPE_TINYBLOB ] { 10 }
        Constant [ integer TYPE_BLOB ] { 11 }
        Constant [ integer TYPE_MEDIUMBLOB ] { 12 }
        Constant [ integer TYPE_LONGBLOB ] { 13 }
        Constant [ integer TYPE_BIGINTEGER ] { 14 }
        Constant [ integer TYPE_JSON ] { 15 }
        Constant [ integer TYPE_JSONB ] { 16 }
        Constant [ integer TYPE_TIMESTAMP ] { 17 }
        Constant [ integer BIND_PARAM_NULL ] { 0 }
        Constant [ integer BIND_PARAM_INT ] { 1 }
        Constant [ integer BIND_PARAM_STR ] { 2 }
        Constant [ integer BIND_PARAM_BLOB ] { 3 }
        Constant [ integer BIND_PARAM_BOOL ] { 5 }
        Constant [ integer BIND_PARAM_DECIMAL ] { 32 }
        Constant [ integer BIND_SKIP ] { 1024 }
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [16] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_schemaName ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_typeReference ]
        Property [ <default> protected $_typeValues ]
        Property [ <default> protected $_isNumeric ]
        Property [ <default> protected $_size ]
        Property [ <default> protected $_scale ]
        Property [ <default> protected $_default ]
        Property [ <default> protected $_unsigned ]
        Property [ <default> protected $_notNull ]
        Property [ <default> protected $_primary ]
        Property [ <default> protected $_autoIncrement ]
        Property [ <default> protected $_first ]
        Property [ <default> protected $_after ]
        Property [ <default> protected $_bindType ]
      }

      - Methods [18] {
        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getSchemaName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getTypeReference ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getTypeValues ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getSize ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getScale ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isUnsigned ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isNotNull ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isPrimary ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isAutoIncrement ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isNumeric ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method isFirst ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getAfterPosition ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method getBindType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ColumnInterface> public method hasDefault ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Dialect\Mysql extends Phalcon\Db\Dialect implements Phalcon\Db\DialectInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_customFunctions ]
        Property [ <default> protected $_escapeChar ]
      }

      - Methods [61] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> protected method _getTableOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method registerCustomFunction ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $customFunction ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getCustomFunctions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escapeSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escape ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> final public method getColumnList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $columnList ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getSqlExpression ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method select ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsReleaseSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionScalar ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionObject ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionQualified ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionBinaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionUnaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFunctionCall ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <required> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionAll ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCastValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionConvertValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCase ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionJoins ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionGroupBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionHaving ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionOrderBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionLimit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareColumnAlias ] {

          - Parameters [3] {
            Parameter #0 [ <required> $qualified ]
            Parameter #1 [ <optional> $alias ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareTable ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareQualified ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $domain ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Dialect\Postgresql extends Phalcon\Db\Dialect implements Phalcon\Db\DialectInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_customFunctions ]
        Property [ <default> protected $_escapeChar ]
      }

      - Methods [62] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> protected method _castDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon> protected method _getTableOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method registerCustomFunction ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $customFunction ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getCustomFunctions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escapeSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escape ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> final public method getColumnList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $columnList ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getSqlExpression ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method select ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsReleaseSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionScalar ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionObject ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionQualified ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionBinaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionUnaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFunctionCall ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <required> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionAll ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCastValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionConvertValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCase ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionJoins ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionGroupBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionHaving ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionOrderBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionLimit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareColumnAlias ] {

          - Parameters [3] {
            Parameter #0 [ <required> $qualified ]
            Parameter #1 [ <optional> $alias ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareTable ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareQualified ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $domain ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Dialect\Sqlite extends Phalcon\Db\Dialect implements Phalcon\Db\DialectInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_customFunctions ]
        Property [ <default> protected $_escapeChar ]
      }

      - Methods [62] {
        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method getColumnDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method modifyColumn ] {

          - Parameters [4] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ColumnInterface $column ]
            Parameter #3 [ <optional> Phalcon\Db\ColumnInterface or NULL $currentColumn ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $columnName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $indexName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addPrimaryKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\IndexInterface $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropPrimaryKey ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method addForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> Phalcon\Db\ReferenceInterface $reference ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropForeignKey ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> $referenceName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <required> $schemaName ]
            Parameter #2 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropTable ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method createView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method dropView ] {

          - Parameters [3] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
            Parameter #2 [ <optional> $ifExists ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tableName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method viewExists ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewName ]
            Parameter #1 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeColumns ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method listTables ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> public method listViews ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $schemaName ]
          }
        }

        Method [ <internal:phalcon> public method listIndexesSql ] {

          - Parameters [3] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
            Parameter #2 [ <optional> $keyName ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeIndexes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon> public method describeIndex ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method describeReferences ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Db\DialectInterface, prototype Phalcon\Db\DialectInterface> public method tableOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method registerCustomFunction ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $customFunction ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getCustomFunctions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escapeSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method escape ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sqlQuery ]
            Parameter #1 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlQuery ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> final public method getColumnList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $columnList ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlColumn ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> public method getSqlExpression ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final public method getSqlTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method select ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method supportsReleaseSavepoints ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method createSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method releaseSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect, prototype Phalcon\Db\DialectInterface> public method rollbackSavepoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionScalar ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionObject ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionQualified ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionBinaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionUnaryOperations ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFunctionCall ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <required> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionList ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionAll ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCastValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionConvertValue ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionCase ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionJoins ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionGroupBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionHaving ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionOrderBy ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> final protected method getSqlExpressionLimit ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expression ]
            Parameter #1 [ <optional> $escapeChar ]
            Parameter #2 [ <optional> $bindCounts ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareColumnAlias ] {

          - Parameters [3] {
            Parameter #0 [ <required> $qualified ]
            Parameter #1 [ <optional> $alias ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareTable ] {

          - Parameters [4] {
            Parameter #0 [ <required> $table ]
            Parameter #1 [ <optional> $schema ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $escapeChar ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Db\Dialect> protected method prepareQualified ] {

          - Parameters [3] {
            Parameter #0 [ <required> $column ]
            Parameter #1 [ <optional> $domain ]
            Parameter #2 [ <optional> $escapeChar ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Index implements Phalcon\Db\IndexInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Db\IndexInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [3] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_columns ]
        Property [ <default> protected $_type ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, prototype Phalcon\Db\IndexInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\IndexInterface> public method getColumns ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\IndexInterface> public method getType ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> array $columns ]
            Parameter #2 [ <optional> $type ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Profiler ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_allProfiles ]
        Property [ <default> protected $_activeProfile ]
        Property [ <default> protected $_totalSeconds ]
      }

      - Methods [7] {
        Method [ <internal:phalcon> public method startProfile ] {

          - Parameters [3] {
            Parameter #0 [ <required> $sqlStatement ]
            Parameter #1 [ <optional> $sqlVariables ]
            Parameter #2 [ <optional> $sqlBindTypes ]
          }
        }

        Method [ <internal:phalcon> public method stopProfile ] {
        }

        Method [ <internal:phalcon> public method getNumberTotalStatements ] {
        }

        Method [ <internal:phalcon> public method getTotalElapsedSeconds ] {
        }

        Method [ <internal:phalcon> public method getProfiles ] {
        }

        Method [ <internal:phalcon> public method reset ] {
        }

        Method [ <internal:phalcon> public method getLastProfile ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Profiler\Item ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_sqlVariables ]
        Property [ <default> protected $_sqlBindTypes ]
        Property [ <default> protected $_initialTime ]
        Property [ <default> protected $_finalTime ]
      }

      - Methods [11] {
        Method [ <internal:phalcon> public method setSqlStatement ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sqlStatement ]
          }
        }

        Method [ <internal:phalcon> public method getSqlStatement ] {
        }

        Method [ <internal:phalcon> public method setSqlVariables ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $sqlVariables ]
          }
        }

        Method [ <internal:phalcon> public method getSqlVariables ] {
        }

        Method [ <internal:phalcon> public method setSqlBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $sqlBindTypes ]
          }
        }

        Method [ <internal:phalcon> public method getSqlBindTypes ] {
        }

        Method [ <internal:phalcon> public method setInitialTime ] {

          - Parameters [1] {
            Parameter #0 [ <required> $initialTime ]
          }
        }

        Method [ <internal:phalcon> public method getInitialTime ] {
        }

        Method [ <internal:phalcon> public method setFinalTime ] {

          - Parameters [1] {
            Parameter #0 [ <required> $finalTime ]
          }
        }

        Method [ <internal:phalcon> public method getFinalTime ] {
        }

        Method [ <internal:phalcon> public method getTotalElapsedSeconds ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\RawValue ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_value ]
      }

      - Methods [3] {
        Method [ <internal:phalcon> public method getValue ] {
        }

        Method [ <internal:phalcon> public method __toString ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Reference implements Phalcon\Db\ReferenceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [8] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_schemaName ]
        Property [ <default> protected $_referencedSchema ]
        Property [ <default> protected $_referencedTable ]
        Property [ <default> protected $_columns ]
        Property [ <default> protected $_referencedColumns ]
        Property [ <default> protected $_onDelete ]
        Property [ <default> protected $_onUpdate ]
      }

      - Methods [9] {
        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getSchemaName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getReferencedSchema ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getReferencedTable ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getColumns ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getReferencedColumns ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getOnDelete ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ReferenceInterface> public method getOnUpdate ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> array $definition ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Db\Result\Pdo implements Phalcon\Db\ResultInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_connection ]
        Property [ <default> protected $_result ]
        Property [ <default> protected $_fetchMode ]
        Property [ <default> protected $_pdoStatement ]
        Property [ <default> protected $_sqlStatement ]
        Property [ <default> protected $_bindParams ]
        Property [ <default> protected $_bindTypes ]
        Property [ <default> protected $_rowCount ]
      }

      - Methods [9] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #1 [ <required> PDOStatement $result ]
            Parameter #2 [ <optional> $sqlStatement ]
            Parameter #3 [ <optional> $bindParams ]
            Parameter #4 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method execute ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method fetch ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $fetchStyle ]
            Parameter #1 [ <optional> $cursorOrientation ]
            Parameter #2 [ <optional> $cursorOffset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method fetchArray ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method fetchAll ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $fetchStyle ]
            Parameter #1 [ <optional> $fetchArgument ]
            Parameter #2 [ <optional> $ctorArgs ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method numRows ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method dataSeek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method setFetchMode ] {

          - Parameters [3] {
            Parameter #0 [ <required> $fetchMode ]
            Parameter #1 [ <optional> $colNoOrClassNameOrObject ]
            Parameter #2 [ <optional> $ctorargs ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Db\ResultInterface> public method getInternalResult ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Debug ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_isActive ]
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> public $_uri ]
        Property [ <default> public $_theme ]
        Property [ <default> protected $_hideDocumentRoot ]
        Property [ <default> protected $_showBackTrace ]
        Property [ <default> protected $_showFiles ]
        Property [ <default> protected $_showFileFragment ]
        Property [ <default> protected $_data ]
      }

      - Methods [20] {
        Method [ <internal:phalcon> public method setUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $uri ]
          }
        }

        Method [ <internal:phalcon> public method setShowBackTrace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $showBackTrace ]
          }
        }

        Method [ <internal:phalcon> public method setShowFiles ] {

          - Parameters [1] {
            Parameter #0 [ <required> $showFiles ]
          }
        }

        Method [ <internal:phalcon> public method setShowFileFragment ] {

          - Parameters [1] {
            Parameter #0 [ <required> $showFileFragment ]
          }
        }

        Method [ <internal:phalcon> public method listen ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $exceptions ]
            Parameter #1 [ <optional> $lowSeverity ]
          }
        }

        Method [ <internal:phalcon> public method listenExceptions ] {
        }

        Method [ <internal:phalcon> public method listenLowSeverity ] {
        }

        Method [ <internal:phalcon> public method halt ] {
        }

        Method [ <internal:phalcon> public method debugVar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $varz ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon> public method clearVars ] {
        }

        Method [ <internal:phalcon> protected method _escapeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> protected method _getArrayDump ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $argument ]
            Parameter #1 [ <optional> $n ]
          }
        }

        Method [ <internal:phalcon> protected method _getVarDump ] {

          - Parameters [1] {
            Parameter #0 [ <required> $variable ]
          }
        }

        Method [ <internal:phalcon> public method getMajorVersion ] {
        }

        Method [ <internal:phalcon> public method getVersion ] {
        }

        Method [ <internal:phalcon> public method getCssSources ] {
        }

        Method [ <internal:phalcon> public method getJsSources ] {
        }

        Method [ <internal:phalcon> final protected method showTraceItem ] {

          - Parameters [2] {
            Parameter #0 [ <required> $n ]
            Parameter #1 [ <required> array $trace ]
          }
        }

        Method [ <internal:phalcon> public method onUncaughtLowSeverity ] {

          - Parameters [5] {
            Parameter #0 [ <required> $severity ]
            Parameter #1 [ <required> $message ]
            Parameter #2 [ <required> $file ]
            Parameter #3 [ <required> $line ]
            Parameter #4 [ <required> $context ]
          }
        }

        Method [ <internal:phalcon> public method onUncaughtException ] {

          - Parameters [1] {
            Parameter #0 [ <required> Exception $exception ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Debug\Dump ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_detailed ]
        Property [ <default> protected $_methods ]
        Property [ <default> protected $_styles ]
      }

      - Methods [11] {
        Method [ <internal:phalcon> public method getDetailed ] {
        }

        Method [ <internal:phalcon> public method setDetailed ] {

          - Parameters [1] {
            Parameter #0 [ <required> $detailed ]
          }
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $styles ]
            Parameter #1 [ <optional> $detailed ]
          }
        }

        Method [ <internal:phalcon> public method all ] {
        }

        Method [ <internal:phalcon> protected method getStyle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method setStyles ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $styles ]
          }
        }

        Method [ <internal:phalcon> public method one ] {

          - Parameters [2] {
            Parameter #0 [ <required> $variable ]
            Parameter #1 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> protected method output ] {

          - Parameters [3] {
            Parameter #0 [ <required> $variable ]
            Parameter #1 [ <optional> $name ]
            Parameter #2 [ <optional> $tab ]
          }
        }

        Method [ <internal:phalcon> public method variable ] {

          - Parameters [2] {
            Parameter #0 [ <required> $variable ]
            Parameter #1 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon> public method variables ] {
        }

        Method [ <internal:phalcon> public method toJson ] {

          - Parameters [1] {
            Parameter #0 [ <required> $variable ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Debug\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di\FactoryDefault\Cli extends Phalcon\Di\FactoryDefault implements Phalcon\DiInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_default ]
      }

      - Static methods [3] {
        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> static public method reset ] {
        }
      }

      - Properties [4] {
        Property [ <default> protected $_services ]
        Property [ <default> protected $_sharedInstances ]
        Property [ <default> protected $_freshInstance ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, overwrites Phalcon\Di\FactoryDefault, ctor> public method __construct ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method setInternalEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method getInternalEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method set ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method setShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method attempt ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method setRaw ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> Phalcon\Di\ServiceInterface $rawDefinition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getShared ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method wasFreshInstance ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype Phalcon\DiInterface> public method getServices ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di> public method __call ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di\Service implements Phalcon\Di\ServiceInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }
      }

      - Properties [5] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_definition ]
        Property [ <default> protected $_shared ]
        Property [ <default> protected $_resolved ]
        Property [ <default> protected $_sharedInstance ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method setShared ] {

          - Parameters [1] {
            Parameter #0 [ <required> $shared ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method isShared ] {
        }

        Method [ <internal:phalcon> public method setSharedInstance ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sharedInstance ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method setDefinition ] {

          - Parameters [1] {
            Parameter #0 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method getDefinition ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method resolve ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $parameters ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\ServiceInterface> public method setParameter ] {

          - Parameters [2] {
            Parameter #0 [ <required> $position ]
            Parameter #1 [ <required> array $parameter ]
          }
        }

        Method [ <internal:phalcon> public method getParameter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon> public method isResolved ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Di\Service\Builder ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon> private method _buildParameter ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
            Parameter #1 [ <required> $position ]
            Parameter #2 [ <required> array $argument ]
          }
        }

        Method [ <internal:phalcon> private method _buildParameters ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
            Parameter #1 [ <required> array $arguments ]
          }
        }

        Method [ <internal:phalcon> public method build ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
            Parameter #1 [ <required> array $definition ]
            Parameter #2 [ <optional> $parameters ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Escaper implements Phalcon\EscaperInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_encoding ]
        Property [ <default> protected $_htmlEscapeMap ]
        Property [ <default> protected $_htmlQuoteType ]
        Property [ <default> protected $_doubleEncode ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method setEncoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $encoding ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method getEncoding ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method setHtmlQuoteType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $quoteType ]
          }
        }

        Method [ <internal:phalcon> public method setDoubleEncode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $doubleEncode ]
          }
        }

        Method [ <internal:phalcon> final public method detectEncoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon> final public method normalizeEncoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method escapeHtml ] {

          - Parameters [1] {
            Parameter #0 [ <required> $text ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method escapeHtmlAttr ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method escapeCss ] {

          - Parameters [1] {
            Parameter #0 [ <required> $css ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method escapeJs ] {

          - Parameters [1] {
            Parameter #0 [ <required> $js ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\EscaperInterface> public method escapeUrl ] {

          - Parameters [1] {
            Parameter #0 [ <required> $url ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Escaper\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Events\Event implements Phalcon\Events\EventInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_source ]
        Property [ <default> protected $_data ]
        Property [ <default> protected $_stopped ]
        Property [ <default> protected $_cancelable ]
      }

      - Methods [9] {
        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method getType ] {
        }

        Method [ <internal:phalcon> public method getSource ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method getData ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $source ]
            Parameter #2 [ <optional> $data ]
            Parameter #3 [ <optional> $cancelable ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method setData ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method stop ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method isStopped ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventInterface> public method isCancelable ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Events\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Events\Manager implements Phalcon\Events\ManagerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_events ]
        Property [ <default> protected $_collect ]
        Property [ <default> protected $_enablePriorities ]
        Property [ <default> protected $_responses ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, prototype Phalcon\Events\ManagerInterface> public method attach ] {

          - Parameters [3] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $priority ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\ManagerInterface> public method detach ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method enablePriorities ] {

          - Parameters [1] {
            Parameter #0 [ <required> $enablePriorities ]
          }
        }

        Method [ <internal:phalcon> public method arePrioritiesEnabled ] {
        }

        Method [ <internal:phalcon> public method collectResponses ] {

          - Parameters [1] {
            Parameter #0 [ <required> $collect ]
          }
        }

        Method [ <internal:phalcon> public method isCollecting ] {
        }

        Method [ <internal:phalcon> public method getResponses ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\ManagerInterface> public method detachAll ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> final public method fireQueue ] {

          - Parameters [2] {
            Parameter #0 [ <required> $queue ]
            Parameter #1 [ <required> Phalcon\Events\EventInterface $event ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\ManagerInterface> public method fire ] {

          - Parameters [4] {
            Parameter #0 [ <required> $eventType ]
            Parameter #1 [ <required> $source ]
            Parameter #2 [ <optional> $data ]
            Parameter #3 [ <optional> $cancelable ]
          }
        }

        Method [ <internal:phalcon> public method hasListeners ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\ManagerInterface> public method getListeners ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Filter implements Phalcon\FilterInterface ] {

      - Constants [12] {
        Constant [ string FILTER_EMAIL ] { email }
        Constant [ string FILTER_ABSINT ] { absint }
        Constant [ string FILTER_INT ] { int }
        Constant [ string FILTER_INT_CAST ] { int! }
        Constant [ string FILTER_STRING ] { string }
        Constant [ string FILTER_FLOAT ] { float }
        Constant [ string FILTER_FLOAT_CAST ] { float! }
        Constant [ string FILTER_ALPHANUM ] { alphanum }
        Constant [ string FILTER_TRIM ] { trim }
        Constant [ string FILTER_STRIPTAGS ] { striptags }
        Constant [ string FILTER_LOWER ] { lower }
        Constant [ string FILTER_UPPER ] { upper }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_filters ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, prototype Phalcon\FilterInterface> public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FilterInterface> public method sanitize ] {

          - Parameters [3] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <required> $filters ]
            Parameter #2 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon> protected method _sanitize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\FilterInterface> public method getFilters ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Filter\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Flash\Direct extends Phalcon\Flash implements Phalcon\Di\InjectionAwareInterface, Phalcon\FlashInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_cssClasses ]
        Property [ <default> protected $_implicitFlush ]
        Property [ <default> protected $_automaticHtml ]
        Property [ <default> protected $_escaperService ]
        Property [ <default> protected $_autoescape ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_messages ]
      }

      - Methods [18] {
        Method [ <internal:phalcon, overwrites Phalcon\FlashInterface, prototype Phalcon\FlashInterface> public method message ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> public method output ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $cssClasses ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method getAutoescape ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setAutoescape ] {

          - Parameters [1] {
            Parameter #0 [ <required> $autoescape ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method getEscaperService ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setEscaperService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\EscaperInterface $escaperService ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setImplicitFlush ] {

          - Parameters [1] {
            Parameter #0 [ <required> $implicitFlush ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setAutomaticHtml ] {

          - Parameters [1] {
            Parameter #0 [ <required> $automaticHtml ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setCssClasses ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $cssClasses ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method error ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method notice ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method success ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method warning ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method outputMessage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method clear ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Flash\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Flash\Session extends Phalcon\Flash implements Phalcon\Di\InjectionAwareInterface, Phalcon\FlashInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_cssClasses ]
        Property [ <default> protected $_implicitFlush ]
        Property [ <default> protected $_automaticHtml ]
        Property [ <default> protected $_escaperService ]
        Property [ <default> protected $_autoescape ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_messages ]
      }

      - Methods [22] {
        Method [ <internal:phalcon> protected method _getSessionMessages ] {

          - Parameters [2] {
            Parameter #0 [ <required> $remove ]
            Parameter #1 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> protected method _setSessionMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $messages ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\FlashInterface, prototype Phalcon\FlashInterface> public method message ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> public method getMessages ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $type ]
            Parameter #1 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon> public method output ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Flash, prototype Phalcon\Flash> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $cssClasses ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method getAutoescape ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setAutoescape ] {

          - Parameters [1] {
            Parameter #0 [ <required> $autoescape ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method getEscaperService ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setEscaperService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\EscaperInterface $escaperService ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setImplicitFlush ] {

          - Parameters [1] {
            Parameter #0 [ <required> $implicitFlush ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setAutomaticHtml ] {

          - Parameters [1] {
            Parameter #0 [ <required> $automaticHtml ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method setCssClasses ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $cssClasses ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method error ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method notice ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method success ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash, prototype Phalcon\FlashInterface> public method warning ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Flash> public method outputMessage ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $message ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Check extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Date extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Email extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\File extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Hidden extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Numeric extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Password extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Radio extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Select extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [10] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
        Property [ <default> protected $_optionsValues ]
      }

      - Methods [36] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $options ]
            Parameter #2 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $options ]
          }
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon> public method addOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Submit extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\Text extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Element\TextArea extends Phalcon\Forms\Element implements Phalcon\Forms\ElementInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_form ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_label ]
        Property [ <default> protected $_attributes ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, overwrites Phalcon\Forms\ElementInterface, prototype Phalcon\Forms\ElementInterface> public method render ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setForm ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Forms\Form $form ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getForm ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setFilters ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getFilters ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidators ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $validators ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method addValidator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method prepareAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <optional> array or NULL $attributes ]
            Parameter #1 [ <optional> $useChecked ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getAttributes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getUserOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $label ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getLabel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method label ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setDefault ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method hasMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method setMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\Message\Group $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element, prototype Phalcon\Forms\ElementInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Forms\Element> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Forms\Form extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Countable, Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [11] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_position ]
        Property [ <default> protected $_entity ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_data ]
        Property [ <default> protected $_elements ]
        Property [ <default> protected $_elementsIndexed ]
        Property [ <default> protected $_messages ]
        Property [ <default> protected $_action ]
        Property [ <default> protected $_validation ]
      }

      - Methods [37] {
        Method [ <internal:phalcon> public method setValidation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $validation ]
          }
        }

        Method [ <internal:phalcon> public method getValidation ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $entity ]
            Parameter #1 [ <optional> $userOptions ]
          }
        }

        Method [ <internal:phalcon> public method setAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $action ]
          }
        }

        Method [ <internal:phalcon> public method getAction ] {
        }

        Method [ <internal:phalcon> public method setUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method getUserOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon> public method setUserOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method getUserOptions ] {
        }

        Method [ <internal:phalcon> public method setEntity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $entity ]
          }
        }

        Method [ <internal:phalcon> public method getEntity ] {
        }

        Method [ <internal:phalcon> public method getElements ] {
        }

        Method [ <internal:phalcon> public method bind ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <required> $entity ]
            Parameter #2 [ <optional> $whitelist ]
          }
        }

        Method [ <internal:phalcon> public method isValid ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $entity ]
          }
        }

        Method [ <internal:phalcon> public method getMessages ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $byItemName ]
          }
        }

        Method [ <internal:phalcon> public method getMessagesFor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method hasMessagesFor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method add ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Forms\ElementInterface $element ]
            Parameter #1 [ <optional> $position ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> public method render ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $attributes ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method label ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> array or NULL $attributes ]
          }
        }

        Method [ <internal:phalcon> public method getLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method getValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method clear ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $fields ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method rewind ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method current ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Forms\Manager ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_forms ]
      }

      - Methods [4] {
        Method [ <internal:phalcon> public method create ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $entity ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> Phalcon\Forms\Form $form ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Cookie implements Phalcon\Http\CookieInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [12] {
        Property [ <default> protected $_readed ]
        Property [ <default> protected $_restored ]
        Property [ <default> protected $_useEncryption ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_value ]
        Property [ <default> protected $_expire ]
        Property [ <default> protected $_path ]
        Property [ <default> protected $_domain ]
        Property [ <default> protected $_secure ]
        Property [ <default> protected $_httpOnly ]
      }

      - Methods [22] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [7] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $value ]
            Parameter #2 [ <optional> $expire ]
            Parameter #3 [ <optional> $path ]
            Parameter #4 [ <optional> $secure ]
            Parameter #5 [ <optional> $domain ]
            Parameter #6 [ <optional> $httpOnly ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getValue ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $filters ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method send ] {
        }

        Method [ <internal:phalcon> public method restore ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method delete ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method useEncryption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useEncryption ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method isUsingEncryption ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setExpiration ] {

          - Parameters [1] {
            Parameter #0 [ <required> $expire ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getExpiration ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getPath ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setDomain ] {

          - Parameters [1] {
            Parameter #0 [ <required> $domain ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getDomain ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setSecure ] {

          - Parameters [1] {
            Parameter #0 [ <required> $secure ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getSecure ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method setHttpOnly ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpOnly ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\CookieInterface> public method getHttpOnly ] {
        }

        Method [ <internal:phalcon> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Cookie\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Request implements Phalcon\Http\RequestInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_rawBody ]
        Property [ <default> protected $_filter ]
        Property [ <default> protected $_putCache ]
        Property [ <default> protected $_httpMethodParameterOverride ]
        Property [ <default> protected $_strictHostCheck ]
      }

      - Methods [63] {
        Method [ <internal:phalcon> public method getHttpMethodParameterOverride ] {
        }

        Method [ <internal:phalcon> public method setHttpMethodParameterOverride ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpMethodParameterOverride ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method get ] {

          - Parameters [5] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
            Parameter #3 [ <optional> $notAllowEmpty ]
            Parameter #4 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getPost ] {

          - Parameters [5] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
            Parameter #3 [ <optional> $notAllowEmpty ]
            Parameter #4 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon> public method getPut ] {

          - Parameters [5] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
            Parameter #3 [ <optional> $notAllowEmpty ]
            Parameter #4 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getQuery ] {

          - Parameters [5] {
            Parameter #0 [ <optional> $name ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
            Parameter #3 [ <optional> $notAllowEmpty ]
            Parameter #4 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon> final protected method getHelper ] {

          - Parameters [6] {
            Parameter #0 [ <required> array $source ]
            Parameter #1 [ <optional> $name ]
            Parameter #2 [ <optional> $filters ]
            Parameter #3 [ <optional> $defaultValue ]
            Parameter #4 [ <optional> $notAllowEmpty ]
            Parameter #5 [ <optional> $noRecursive ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getServer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method hasPost ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method hasPut ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method hasQuery ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> final public method hasServer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> final public method getHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getScheme ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isAjax ] {
        }

        Method [ <internal:phalcon> public method isSoap ] {
        }

        Method [ <internal, deprecated:phalcon, prototype Phalcon\Http\RequestInterface> public method isSoapRequested ] {
        }

        Method [ <internal:phalcon> public method isSecure ] {
        }

        Method [ <internal, deprecated:phalcon, prototype Phalcon\Http\RequestInterface> public method isSecureRequest ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getRawBody ] {
        }

        Method [ <internal:phalcon> public method getJsonRawBody ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $associative ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getServerAddress ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getServerName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getHttpHost ] {
        }

        Method [ <internal:phalcon> public method setStrictHostCheck ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $flag ]
          }
        }

        Method [ <internal:phalcon> public method isStrictHostCheck ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getPort ] {
        }

        Method [ <internal:phalcon> final public method getURI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getClientAddress ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $trustForwardedHeader ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> final public method getMethod ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getUserAgent ] {
        }

        Method [ <internal:phalcon> public method isValidHttpMethod ] {

          - Parameters [1] {
            Parameter #0 [ <required> $method ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isMethod ] {

          - Parameters [2] {
            Parameter #0 [ <required> $methods ]
            Parameter #1 [ <optional> $strict ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isPost ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isGet ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isPut ] {
        }

        Method [ <internal:phalcon> public method isPatch ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isHead ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isDelete ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isOptions ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isPurge ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isTrace ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method isConnect ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method hasFiles ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $onlySuccessful ]
          }
        }

        Method [ <internal:phalcon> final protected method hasFileHelper ] {

          - Parameters [2] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <required> $onlySuccessful ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getUploadedFiles ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $onlySuccessful ]
          }
        }

        Method [ <internal:phalcon> final protected method smoothFiles ] {

          - Parameters [6] {
            Parameter #0 [ <required> array $names ]
            Parameter #1 [ <required> array $types ]
            Parameter #2 [ <required> array $tmp_names ]
            Parameter #3 [ <required> array $sizes ]
            Parameter #4 [ <required> array $errors ]
            Parameter #5 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon> public method getHeaders ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getHTTPReferer ] {
        }

        Method [ <internal:phalcon> final protected method _getBestQuality ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $qualityParts ]
            Parameter #1 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method getContentType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getAcceptableContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getBestAccept ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getClientCharsets ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getBestCharset ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getLanguages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getBestLanguage ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getBasicAuth ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\RequestInterface> public method getDigestAuth ] {
        }

        Method [ <internal:phalcon> final protected method _getQualityHeader ] {

          - Parameters [2] {
            Parameter #0 [ <required> $serverIndex ]
            Parameter #1 [ <required> $name ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Request\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Request\File implements Phalcon\Http\Request\FileInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_name ]
        Property [ <default> protected $_tmp ]
        Property [ <default> protected $_size ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_realType ]
        Property [ <default> protected $_error ]
        Property [ <default> protected $_key ]
        Property [ <default> protected $_extension ]
      }

      - Methods [11] {
        Method [ <internal:phalcon> public method getError ] {
        }

        Method [ <internal:phalcon> public method getKey ] {
        }

        Method [ <internal:phalcon> public method getExtension ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $file ]
            Parameter #1 [ <optional> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method getSize ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method getTempName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method getRealType ] {
        }

        Method [ <internal:phalcon> public method isUploadedFile ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Request\FileInterface> public method moveTo ] {

          - Parameters [1] {
            Parameter #0 [ <required> $destination ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Response implements Phalcon\Http\ResponseInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_sent ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_headers ]
        Property [ <default> protected $_cookies ]
        Property [ <default> protected $_file ]
        Property [ <default> protected $_dependencyInjector ]
      }

      - Methods [29] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $content ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $status ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setStatusCode ] {

          - Parameters [2] {
            Parameter #0 [ <required> $code ]
            Parameter #1 [ <optional> $message ]
          }
        }

        Method [ <internal:phalcon> public method getStatusCode ] {
        }

        Method [ <internal:phalcon> public method setHeaders ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Http\Response\HeadersInterface $headers ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method getHeaders ] {
        }

        Method [ <internal:phalcon> public method setCookies ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Http\Response\CookiesInterface $cookies ]
          }
        }

        Method [ <internal:phalcon> public method getCookies ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setHeader ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setRawHeader ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method resetHeaders ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setExpires ] {

          - Parameters [1] {
            Parameter #0 [ <required> DateTime $datetime ]
          }
        }

        Method [ <internal:phalcon> public method setLastModified ] {

          - Parameters [1] {
            Parameter #0 [ <required> DateTime $datetime ]
          }
        }

        Method [ <internal:phalcon> public method setCache ] {

          - Parameters [1] {
            Parameter #0 [ <required> $minutes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setNotModified ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setContentType ] {

          - Parameters [2] {
            Parameter #0 [ <required> $contentType ]
            Parameter #1 [ <optional> $charset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setContentLength ] {

          - Parameters [1] {
            Parameter #0 [ <required> $contentLength ]
          }
        }

        Method [ <internal:phalcon> public method setEtag ] {

          - Parameters [1] {
            Parameter #0 [ <required> $etag ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method redirect ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $location ]
            Parameter #1 [ <optional> $externalRedirect ]
            Parameter #2 [ <optional> $statusCode ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setJsonContent ] {

          - Parameters [3] {
            Parameter #0 [ <required> $content ]
            Parameter #1 [ <optional> $jsonOptions ]
            Parameter #2 [ <optional> $depth ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method appendContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method getContent ] {
        }

        Method [ <internal:phalcon> public method isSent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method sendHeaders ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method sendCookies ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method send ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\ResponseInterface> public method setFileToSend ] {

          - Parameters [3] {
            Parameter #0 [ <required> $filePath ]
            Parameter #1 [ <optional> $attachmentName ]
            Parameter #2 [ <optional> $attachment ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Response\Cookies implements Phalcon\Http\Response\CookiesInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_registered ]
        Property [ <default> protected $_useEncryption ]
        Property [ <default> protected $_cookies ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method useEncryption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useEncryption ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method isUsingEncryption ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method set ] {

          - Parameters [7] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $value ]
            Parameter #2 [ <optional> $expire ]
            Parameter #3 [ <optional> $path ]
            Parameter #4 [ <optional> $secure ]
            Parameter #5 [ <optional> $domain ]
            Parameter #6 [ <optional> $httpOnly ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method send ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\CookiesInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Response\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Http\Response\Headers implements Phalcon\Http\Response\HeadersInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $data ]
          }
        }
      }

      - Properties [1] {
        Property [ <default> protected $_headers ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> public method setRaw ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $header ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> public method send ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Http\Response\HeadersInterface> public method reset ] {
        }

        Method [ <internal:phalcon> public method toArray ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Image ] {

      - Constants [9] {
        Constant [ integer NONE ] { 1 }
        Constant [ integer WIDTH ] { 2 }
        Constant [ integer HEIGHT ] { 3 }
        Constant [ integer AUTO ] { 4 }
        Constant [ integer INVERSE ] { 5 }
        Constant [ integer PRECISE ] { 6 }
        Constant [ integer TENSILE ] { 7 }
        Constant [ integer HORIZONTAL ] { 11 }
        Constant [ integer VERTICAL ] { 12 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Image\Adapter\Gd extends Phalcon\Image\Adapter implements Phalcon\Image\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_checked ]
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method check ] {
        }
      }

      - Properties [7] {
        Property [ <default> protected $_image ]
        Property [ <default> protected $_file ]
        Property [ <default> protected $_realpath ]
        Property [ <default> protected $_width ]
        Property [ <default> protected $_height ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_mime ]
      }

      - Methods [38] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $file ]
            Parameter #1 [ <optional> $width ]
            Parameter #2 [ <optional> $height ]
          }
        }

        Method [ <internal:phalcon> protected method _resize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
          }
        }

        Method [ <internal:phalcon> protected method _crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $offsetX ]
            Parameter #3 [ <required> $offsetY ]
          }
        }

        Method [ <internal:phalcon> protected method _rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon> protected method _flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon> protected method _sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> protected method _reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <required> $opacity ]
            Parameter #2 [ <required> $fadeIn ]
          }
        }

        Method [ <internal:phalcon> protected method _watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
            Parameter #1 [ <required> $offsetX ]
            Parameter #2 [ <required> $offsetY ]
            Parameter #3 [ <required> $opacity ]
          }
        }

        Method [ <internal:phalcon> protected method _text ] {

          - Parameters [9] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <required> $offsetX ]
            Parameter #2 [ <required> $offsetY ]
            Parameter #3 [ <required> $opacity ]
            Parameter #4 [ <required> $r ]
            Parameter #5 [ <required> $g ]
            Parameter #6 [ <required> $b ]
            Parameter #7 [ <required> $size ]
            Parameter #8 [ <required> $fontfile ]
          }
        }

        Method [ <internal:phalcon> protected method _mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $mask ]
          }
        }

        Method [ <internal:phalcon> protected method _background ] {

          - Parameters [4] {
            Parameter #0 [ <required> $r ]
            Parameter #1 [ <required> $g ]
            Parameter #2 [ <required> $b ]
            Parameter #3 [ <required> $opacity ]
          }
        }

        Method [ <internal:phalcon> protected method _blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon> protected method _pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> protected method _save ] {

          - Parameters [2] {
            Parameter #0 [ <required> $file ]
            Parameter #1 [ <required> $quality ]
          }
        }

        Method [ <internal:phalcon> protected method _render ] {

          - Parameters [2] {
            Parameter #0 [ <required> $ext ]
            Parameter #1 [ <required> $quality ]
          }
        }

        Method [ <internal:phalcon> protected method _create ] {

          - Parameters [2] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
          }
        }

        Method [ <internal:phalcon, dtor> public method __destruct ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getImage ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getRealpath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getWidth ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getHeight ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getMime ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method resize ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $width ]
            Parameter #1 [ <optional> $height ]
            Parameter #2 [ <optional> $master ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method liquidRescale ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $deltaX ]
            Parameter #3 [ <optional> $rigidity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $offsetX ]
            Parameter #3 [ <optional> $offsetY ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <optional> $opacity ]
            Parameter #2 [ <optional> $fadeIn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method text ] {

          - Parameters [7] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
            Parameter #4 [ <optional> $color ]
            Parameter #5 [ <optional> $size ]
            Parameter #6 [ <optional> $fontfile ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method background ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $file ]
            Parameter #1 [ <optional> $quality ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method render ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $ext ]
            Parameter #1 [ <optional> $quality ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Image\Adapter\Imagick extends Phalcon\Image\Adapter implements Phalcon\Image\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [2] {
        Property [ protected static $_version ]
        Property [ protected static $_checked ]
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method check ] {
        }
      }

      - Properties [7] {
        Property [ <default> protected $_image ]
        Property [ <default> protected $_file ]
        Property [ <default> protected $_realpath ]
        Property [ <default> protected $_width ]
        Property [ <default> protected $_height ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_mime ]
      }

      - Methods [40] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $file ]
            Parameter #1 [ <optional> $width ]
            Parameter #2 [ <optional> $height ]
          }
        }

        Method [ <internal:phalcon> protected method _resize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
          }
        }

        Method [ <internal:phalcon> protected method _liquidRescale ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $deltaX ]
            Parameter #3 [ <required> $rigidity ]
          }
        }

        Method [ <internal:phalcon> protected method _crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <required> $offsetX ]
            Parameter #3 [ <required> $offsetY ]
          }
        }

        Method [ <internal:phalcon> protected method _rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon> protected method _flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon> protected method _sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> protected method _reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <required> $opacity ]
            Parameter #2 [ <required> $fadeIn ]
          }
        }

        Method [ <internal:phalcon> protected method _watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $image ]
            Parameter #1 [ <required> $offsetX ]
            Parameter #2 [ <required> $offsetY ]
            Parameter #3 [ <required> $opacity ]
          }
        }

        Method [ <internal:phalcon> protected method _text ] {

          - Parameters [9] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <required> $offsetX ]
            Parameter #2 [ <required> $offsetY ]
            Parameter #3 [ <required> $opacity ]
            Parameter #4 [ <required> $r ]
            Parameter #5 [ <required> $g ]
            Parameter #6 [ <required> $b ]
            Parameter #7 [ <required> $size ]
            Parameter #8 [ <required> $fontfile ]
          }
        }

        Method [ <internal:phalcon> protected method _mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $image ]
          }
        }

        Method [ <internal:phalcon> protected method _background ] {

          - Parameters [4] {
            Parameter #0 [ <required> $r ]
            Parameter #1 [ <required> $g ]
            Parameter #2 [ <required> $b ]
            Parameter #3 [ <required> $opacity ]
          }
        }

        Method [ <internal:phalcon> protected method _blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon> protected method _pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon> protected method _save ] {

          - Parameters [2] {
            Parameter #0 [ <required> $file ]
            Parameter #1 [ <required> $quality ]
          }
        }

        Method [ <internal:phalcon> protected method _render ] {

          - Parameters [2] {
            Parameter #0 [ <required> $extension ]
            Parameter #1 [ <required> $quality ]
          }
        }

        Method [ <internal:phalcon, dtor> public method __destruct ] {
        }

        Method [ <internal:phalcon> public method getInternalImInstance ] {
        }

        Method [ <internal:phalcon> public method setResourceLimit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $limit ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getImage ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getRealpath ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getWidth ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getHeight ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method getMime ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method resize ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $width ]
            Parameter #1 [ <optional> $height ]
            Parameter #2 [ <optional> $master ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter> public method liquidRescale ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $deltaX ]
            Parameter #3 [ <optional> $rigidity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method crop ] {

          - Parameters [4] {
            Parameter #0 [ <required> $width ]
            Parameter #1 [ <required> $height ]
            Parameter #2 [ <optional> $offsetX ]
            Parameter #3 [ <optional> $offsetY ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method rotate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $degrees ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method flip ] {

          - Parameters [1] {
            Parameter #0 [ <required> $direction ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method sharpen ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method reflection ] {

          - Parameters [3] {
            Parameter #0 [ <required> $height ]
            Parameter #1 [ <optional> $opacity ]
            Parameter #2 [ <optional> $fadeIn ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method watermark ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method text ] {

          - Parameters [7] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $offsetX ]
            Parameter #2 [ <optional> $offsetY ]
            Parameter #3 [ <optional> $opacity ]
            Parameter #4 [ <optional> $color ]
            Parameter #5 [ <optional> $size ]
            Parameter #6 [ <optional> $fontfile ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method mask ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Image\Adapter $watermark ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method background ] {

          - Parameters [2] {
            Parameter #0 [ <required> $color ]
            Parameter #1 [ <optional> $opacity ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method blur ] {

          - Parameters [1] {
            Parameter #0 [ <required> $radius ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method pixelate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $amount ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $file ]
            Parameter #1 [ <optional> $quality ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Image\Adapter, prototype Phalcon\Image\AdapterInterface> public method render ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $ext ]
            Parameter #1 [ <optional> $quality ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Image\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Kernel ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method preComputeHashKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Loader implements Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_foundPath ]
        Property [ <default> protected $_checkedPath ]
        Property [ <default> protected $_classes ]
        Property [ <default> protected $_extensions ]
        Property [ <default> protected $_namespaces ]
        Property [ <default> protected $_directories ]
        Property [ <default> protected $_files ]
        Property [ <default> protected $_registered ]
      }

      - Methods [19] {
        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method setExtensions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $extensions ]
          }
        }

        Method [ <internal:phalcon> public method getExtensions ] {
        }

        Method [ <internal:phalcon> public method registerNamespaces ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $namespaces ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> protected method prepareNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $namespace ]
          }
        }

        Method [ <internal:phalcon> public method getNamespaces ] {
        }

        Method [ <internal:phalcon> public method registerDirs ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $directories ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method getDirs ] {
        }

        Method [ <internal:phalcon> public method registerFiles ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $files ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method getFiles ] {
        }

        Method [ <internal:phalcon> public method registerClasses ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $classes ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method getClasses ] {
        }

        Method [ <internal:phalcon> public method register ] {
        }

        Method [ <internal:phalcon> public method unregister ] {
        }

        Method [ <internal:phalcon> public method loadFiles ] {
        }

        Method [ <internal:phalcon> public method autoLoad ] {

          - Parameters [1] {
            Parameter #0 [ <required> $className ]
          }
        }

        Method [ <internal:phalcon> public method getFoundPath ] {
        }

        Method [ <internal:phalcon> public method getCheckedPath ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Loader\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Logger ] {

      - Constants [11] {
        Constant [ integer SPECIAL ] { 9 }
        Constant [ integer CUSTOM ] { 8 }
        Constant [ integer DEBUG ] { 7 }
        Constant [ integer INFO ] { 6 }
        Constant [ integer NOTICE ] { 5 }
        Constant [ integer WARNING ] { 4 }
        Constant [ integer ERROR ] { 3 }
        Constant [ integer ALERT ] { 2 }
        Constant [ integer CRITICAL ] { 1 }
        Constant [ integer EMERGENCE ] { 0 }
        Constant [ integer EMERGENCY ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Adapter\File extends Phalcon\Logger\Adapter implements Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_queue ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
        Property [ <default> protected $_fileHandler ]
        Property [ <default> protected $_path ]
        Property [ <default> protected $_options ]
      }

      - Methods [22] {
        Method [ <internal:phalcon> public method getPath ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method getFormatter ] {
        }

        Method [ <internal:phalcon> public method logInternal ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $time ]
            Parameter #3 [ <required> array $context ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon> public method __wakeup ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method getLogLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method begin ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method commit ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method rollback ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method isTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Adapter\Firephp extends Phalcon\Logger\Adapter implements Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_queue ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
        Property [ <default> private $_initialized ]
        Property [ <default> private $_index ]
      }

      - Methods [19] {
        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method getFormatter ] {
        }

        Method [ <internal:phalcon> public method logInternal ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $time ]
            Parameter #3 [ <required> array $context ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method getLogLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method begin ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method commit ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method rollback ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method isTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Adapter\Stream extends Phalcon\Logger\Adapter implements Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_queue ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
        Property [ <default> protected $_stream ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method getFormatter ] {
        }

        Method [ <internal:phalcon> public method logInternal ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $time ]
            Parameter #3 [ <required> array $context ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method getLogLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method begin ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method commit ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method rollback ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method isTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Adapter\Syslog extends Phalcon\Logger\Adapter implements Phalcon\Logger\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_queue ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
        Property [ <default> protected $_opened ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method getFormatter ] {
        }

        Method [ <internal:phalcon> public method logInternal ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $time ]
            Parameter #3 [ <required> array $context ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\AdapterInterface, prototype Phalcon\Logger\AdapterInterface> public method close ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method getLogLevel ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method begin ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method commit ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method rollback ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method isTransaction ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Adapter, prototype Phalcon\Logger\AdapterInterface> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Formatter\Firephp extends Phalcon\Logger\Formatter implements Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_showBacktrace ]
        Property [ <default> protected $_enableLabels ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Logger\Formatter, prototype Phalcon\Logger\Formatter> public method getTypeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method setShowBacktrace ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $isShow ]
          }
        }

        Method [ <internal:phalcon> public method getShowBacktrace ] {
        }

        Method [ <internal:phalcon> public method enableLabels ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $isEnable ]
          }
        }

        Method [ <internal:phalcon> public method labelsEnabled ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\FormatterInterface, prototype Phalcon\Logger\FormatterInterface> public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method interpolate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Formatter\Json extends Phalcon\Logger\Formatter implements Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon, overwrites Phalcon\Logger\FormatterInterface, prototype Phalcon\Logger\FormatterInterface> public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method getTypeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method interpolate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Formatter\Line extends Phalcon\Logger\Formatter implements Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dateFormat ]
        Property [ <default> protected $_format ]
      }

      - Methods [8] {
        Method [ <internal:phalcon> public method getDateFormat ] {
        }

        Method [ <internal:phalcon> public method setDateFormat ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dateFormat ]
          }
        }

        Method [ <internal:phalcon> public method getFormat ] {
        }

        Method [ <internal:phalcon> public method setFormat ] {

          - Parameters [1] {
            Parameter #0 [ <required> $format ]
          }
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $format ]
            Parameter #1 [ <optional> $dateFormat ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Logger\FormatterInterface, prototype Phalcon\Logger\FormatterInterface> public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method getTypeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method interpolate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Formatter\Syslog extends Phalcon\Logger\Formatter implements Phalcon\Logger\FormatterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:phalcon, overwrites Phalcon\Logger\FormatterInterface, prototype Phalcon\Logger\FormatterInterface> public method format ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $timestamp ]
            Parameter #3 [ <optional> $context ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method getTypeString ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Logger\Formatter> public method interpolate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Item ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_message ]
        Property [ <default> protected $_time ]
        Property [ <default> protected $_context ]
      }

      - Methods [5] {
        Method [ <internal:phalcon> public method getType ] {
        }

        Method [ <internal:phalcon> public method getMessage ] {
        }

        Method [ <internal:phalcon> public method getTime ] {
        }

        Method [ <internal:phalcon> public method getContext ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <optional> $time ]
            Parameter #3 [ <optional> $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Logger\Multiple ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_loggers ]
        Property [ <default> protected $_formatter ]
        Property [ <default> protected $_logLevel ]
      }

      - Methods [15] {
        Method [ <internal:phalcon> public method getLoggers ] {
        }

        Method [ <internal:phalcon> public method getFormatter ] {
        }

        Method [ <internal:phalcon> public method getLogLevel ] {
        }

        Method [ <internal:phalcon> public method push ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\AdapterInterface $logger ]
          }
        }

        Method [ <internal:phalcon> public method setFormatter ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Logger\FormatterInterface $formatter ]
          }
        }

        Method [ <internal:phalcon> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon> public method log ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <optional> $message ]
            Parameter #2 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method critical ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method emergency ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method debug ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method error ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method info ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method notice ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method warning ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }

        Method [ <internal:phalcon> public method alert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> array or NULL $context ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Application extends Phalcon\Application implements Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_modules ]
        Property [ <default> protected $_implicitView ]
      }

      - Methods [13] {
        Method [ <internal:phalcon> public method useImplicitView ] {

          - Parameters [1] {
            Parameter #0 [ <required> $implicitView ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Application, prototype Phalcon\Application> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method registerModules ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $modules ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getModules ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultModule ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Application> public method getDefaultModule ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Application\Exception extends Phalcon\Application\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Collection implements Phalcon\Mvc\EntityInterface, Phalcon\Mvc\CollectionInterface, Phalcon\Di\InjectionAwareInterface, Serializable ] {

      - Constants [4] {
        Constant [ integer OP_NONE ] { 0 }
        Constant [ integer OP_CREATE ] { 1 }
        Constant [ integer OP_UPDATE ] { 2 }
        Constant [ integer OP_DELETE ] { 3 }
      }

      - Static properties [2] {
        Property [ protected static $_reserved ]
        Property [ protected static $_disableEvents ]
      }

      - Static methods [9] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> static public method cloneResult ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $collection ]
            Parameter #1 [ <required> array $document ]
          }
        }

        Method [ <internal:phalcon> static protected method _getResultset ] {

          - Parameters [4] {
            Parameter #0 [ <required> $params ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $collection ]
            Parameter #2 [ <required> $connection ]
            Parameter #3 [ <required> $unique ]
          }
        }

        Method [ <internal:phalcon> static protected method _getGroupResultset ] {

          - Parameters [3] {
            Parameter #0 [ <required> $params ]
            Parameter #1 [ <required> Phalcon\Mvc\Collection $collection ]
            Parameter #2 [ <required> $connection ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> static public method findById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> static public method findFirst ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> static public method find ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> static public method count ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method aggregate ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method summatory ] {

          - Parameters [3] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $finalize ]
          }
        }
      }

      - Properties [8] {
        Property [ <default> public $_id ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_modelsManager ]
        Property [ <default> protected $_source ]
        Property [ <default> protected $_operationMade ]
        Property [ <default> protected $_connection ]
        Property [ <default> protected $_errorMessages ]
        Property [ <default> protected $_skipped ]
      }

      - Methods [38] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
            Parameter #1 [ <optional> Phalcon\Mvc\Collection\ManagerInterface or NULL $modelsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method getId ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> protected method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Collection\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> protected method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method getCollectionManager ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method getReservedAttributes ] {
        }

        Method [ <internal:phalcon> protected method useImplicitObjectIds ] {

          - Parameters [1] {
            Parameter #0 [ <required> $useImplicitObjectIds ]
          }
        }

        Method [ <internal:phalcon> protected method setSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $source ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method getSource ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method setConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> public method getConnectionService ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method getConnection ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method readAttribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method writeAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> final protected method _preSave ] {

          - Parameters [3] {
            Parameter #0 [ <required> $dependencyInjector ]
            Parameter #1 [ <required> $disableEvents ]
            Parameter #2 [ <required> $exists ]
          }
        }

        Method [ <internal:phalcon> final protected method _postSave ] {

          - Parameters [3] {
            Parameter #0 [ <required> $disableEvents ]
            Parameter #1 [ <required> $success ]
            Parameter #2 [ <required> $exists ]
          }
        }

        Method [ <internal:phalcon> protected method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method validationHasFailed ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method fireEvent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method fireEventCancel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> protected method _cancelOperation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $disableEvents ]
          }
        }

        Method [ <internal:phalcon> protected method _exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $collection ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> protected method prepareCU ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method save ] {
        }

        Method [ <internal:phalcon> public method create ] {
        }

        Method [ <internal:phalcon> public method createIfNotExist ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $criteria ]
          }
        }

        Method [ <internal:phalcon> public method update ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\CollectionInterface> public method delete ] {
        }

        Method [ <internal:phalcon> protected method addBehavior ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Collection\BehaviorInterface $behavior ]
          }
        }

        Method [ <internal:phalcon> public method skipOperation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $skip ]
          }
        }

        Method [ <internal:phalcon> public method toArray ] {
        }

        Method [ <internal:phalcon, prototype Serializable> public method serialize ] {
        }

        Method [ <internal:phalcon, prototype Serializable> public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Collection\Behavior\SoftDelete extends Phalcon\Mvc\Collection\Behavior implements Phalcon\Mvc\Collection\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Collection\Behavior, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Collection\Behavior\Timestampable extends Phalcon\Mvc\Collection\Behavior implements Phalcon\Mvc\Collection\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Collection\Behavior, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Collection\Behavior, prototype Phalcon\Mvc\Collection\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Collection\Document implements Phalcon\Mvc\EntityInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method readAttribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method writeAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method toArray ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Collection\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Collection\Manager implements Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_initialized ]
        Property [ <default> protected $_lastInitialized ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_customEventsManager ]
        Property [ <default> protected $_connectionServices ]
        Property [ <default> protected $_implicitObjectsIds ]
        Property [ <default> protected $_behaviors ]
        Property [ <default> protected $_serviceName ]
      }

      - Methods [19] {
        Method [ <internal:phalcon> public method getServiceName ] {
        }

        Method [ <internal:phalcon> public method setServiceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serviceName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method setCustomEventsManager ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> public method getCustomEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method initialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method isInitialized ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon> public method getLastInitialized ] {
        }

        Method [ <internal:phalcon> public method setConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon> public method getConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method useImplicitObjectIds ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $useImplicitObjectIds ]
          }
        }

        Method [ <internal:phalcon> public method isUsingImplicitObjectIds ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method getConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method notifyEvent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventName ]
            Parameter #1 [ <required> Phalcon\Mvc\CollectionInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> $eventName ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> public method addBehavior ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\CollectionInterface $model ]
            Parameter #1 [ <required> Phalcon\Mvc\Collection\BehaviorInterface $behavior ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Controller extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\ControllerInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Dispatcher extends Phalcon\Dispatcher implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\DispatcherInterface, Phalcon\Mvc\DispatcherInterface ] {

      - Constants [6] {
        Constant [ integer EXCEPTION_NO_DI ] { 0 }
        Constant [ integer EXCEPTION_CYCLIC_ROUTING ] { 1 }
        Constant [ integer EXCEPTION_HANDLER_NOT_FOUND ] { 2 }
        Constant [ integer EXCEPTION_INVALID_HANDLER ] { 3 }
        Constant [ integer EXCEPTION_INVALID_PARAMS ] { 4 }
        Constant [ integer EXCEPTION_ACTION_NOT_FOUND ] { 5 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [21] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_activeHandler ]
        Property [ <default> protected $_finished ]
        Property [ <default> protected $_forwarded ]
        Property [ <default> protected $_moduleName ]
        Property [ <default> protected $_namespaceName ]
        Property [ <default> protected $_handlerName ]
        Property [ <default> protected $_actionName ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_returnedValue ]
        Property [ <default> protected $_lastHandler ]
        Property [ <default> protected $_defaultNamespace ]
        Property [ <default> protected $_actionSuffix ]
        Property [ <default> protected $_previousNamespaceName ]
        Property [ <default> protected $_previousHandlerName ]
        Property [ <default> protected $_previousActionName ]
        Property [ <default> protected $_modelBinding ]
        Property [ <default> protected $_handlerSuffix ]
        Property [ <default> protected $_defaultHandler ]
        Property [ <default> protected $_defaultAction ]
      }

      - Methods [44] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method setControllerSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerSuffix ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method setDefaultController ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method setControllerName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method getControllerName ] {
        }

        Method [ <internal:phalcon> public method getPreviousNamespaceName ] {
        }

        Method [ <internal:phalcon> public method getPreviousControllerName ] {
        }

        Method [ <internal:phalcon> public method getPreviousActionName ] {
        }

        Method [ <internal:phalcon> protected method _throwDispatchException ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $exceptionCode ]
          }
        }

        Method [ <internal:phalcon> protected method _handleException ] {

          - Parameters [1] {
            Parameter #0 [ <required> Exception $exception ]
          }
        }

        Method [ <internal:phalcon> public method getControllerClass ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method getLastController ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\DispatcherInterface> public method getActiveController ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getActionSuffix ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setModuleName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getModuleName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setNamespaceName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getNamespaceName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getDefaultNamespace ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setActionName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getParam ] {

          - Parameters [3] {
            Parameter #0 [ <required> $param ]
            Parameter #1 [ <optional> $filters ]
            Parameter #2 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method hasParam ] {

          - Parameters [1] {
            Parameter #0 [ <required> $param ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getActiveMethod ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method isFinished ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method setReturnedValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method getReturnedValue ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method setModelBinding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> protected method _dispatch ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher, prototype Phalcon\DispatcherInterface> public method forward ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forward ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method wasForwarded ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method getHandlerClass ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> public method callActionMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <required> $actionMethod ]
            Parameter #2 [ <optional> array or NULL $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Dispatcher> protected method _resolveEmptyProperties ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Dispatcher\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Micro extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [12] {
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_handlers ]
        Property [ <default> protected $_router ]
        Property [ <default> protected $_stopped ]
        Property [ <default> protected $_notFoundHandler ]
        Property [ <default> protected $_errorHandler ]
        Property [ <default> protected $_activeHandler ]
        Property [ <default> protected $_beforeHandlers ]
        Property [ <default> protected $_afterHandlers ]
        Property [ <default> protected $_finishHandlers ]
        Property [ <default> protected $_returnedValue ]
      }

      - Methods [35] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> public method map ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method post ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method put ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method patch ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method head ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method delete ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method options ] {

          - Parameters [2] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method mount ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Micro\CollectionInterface $collection ]
          }
        }

        Method [ <internal:phalcon> public method notFound ] {

          - Parameters [1] {
            Parameter #0 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method error ] {

          - Parameters [1] {
            Parameter #0 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method getRouter ] {
        }

        Method [ <internal:phalcon> public method setService ] {

          - Parameters [3] {
            Parameter #0 [ <required> $serviceName ]
            Parameter #1 [ <required> $definition ]
            Parameter #2 [ <optional> $shared ]
          }
        }

        Method [ <internal:phalcon> public method hasService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serviceName ]
          }
        }

        Method [ <internal:phalcon> public method getService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serviceName ]
          }
        }

        Method [ <internal:phalcon> public method getSharedService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $serviceName ]
          }
        }

        Method [ <internal:phalcon> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon> public method stop ] {
        }

        Method [ <internal:phalcon> public method setActiveHandler ] {

          - Parameters [1] {
            Parameter #0 [ <required> $activeHandler ]
          }
        }

        Method [ <internal:phalcon> public method getActiveHandler ] {
        }

        Method [ <internal:phalcon> public method getReturnedValue ] {
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $alias ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }

        Method [ <internal:phalcon> public method before ] {

          - Parameters [1] {
            Parameter #0 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method after ] {

          - Parameters [1] {
            Parameter #0 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method finish ] {

          - Parameters [1] {
            Parameter #0 [ <required> $handler ]
          }
        }

        Method [ <internal:phalcon> public method getHandlers ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Micro\Collection implements Phalcon\Mvc\Micro\CollectionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_lazy ]
        Property [ <default> protected $_handler ]
        Property [ <default> protected $_handlers ]
      }

      - Methods [16] {
        Method [ <internal:phalcon> protected method _addMap ] {

          - Parameters [4] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $routePattern ]
            Parameter #2 [ <required> $handler ]
            Parameter #3 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method setPrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method getPrefix ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method getHandlers ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method setHandler ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <optional> $lazy ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method setLazy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lazy ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method isLazy ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method getHandler ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method map ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method post ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method put ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method patch ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method head ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method delete ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Micro\CollectionInterface> public method options ] {

          - Parameters [3] {
            Parameter #0 [ <required> $routePattern ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $name ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Micro\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Micro\LazyLoader ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_handler ]
        Property [ <default> protected $_definition ]
      }

      - Methods [3] {
        Method [ <internal:phalcon> public method getDefinition ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon> public method __call ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Model implements Phalcon\Mvc\EntityInterface, Phalcon\Mvc\ModelInterface, Phalcon\Mvc\Model\ResultInterface, Phalcon\Di\InjectionAwareInterface, Serializable, JsonSerializable ] {

      - Constants [7] {
        Constant [ integer OP_NONE ] { 0 }
        Constant [ integer OP_CREATE ] { 1 }
        Constant [ integer OP_UPDATE ] { 2 }
        Constant [ integer OP_DELETE ] { 3 }
        Constant [ integer DIRTY_STATE_PERSISTENT ] { 0 }
        Constant [ integer DIRTY_STATE_TRANSIENT ] { 1 }
        Constant [ integer DIRTY_STATE_DETACHED ] { 2 }
      }

      - Static properties [0] {
      }

      - Static methods [15] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method cloneResultMap ] {

          - Parameters [5] {
            Parameter #0 [ <required> $base ]
            Parameter #1 [ <required> array $data ]
            Parameter #2 [ <required> $columnMap ]
            Parameter #3 [ <optional> $dirtyState ]
            Parameter #4 [ <optional> $keepSnapshots ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method cloneResultMapHydrate ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <required> $columnMap ]
            Parameter #2 [ <required> $hydrationMode ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method cloneResult ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $base ]
            Parameter #1 [ <required> array $data ]
            Parameter #2 [ <optional> $dirtyState ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method find ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method findFirst ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method query ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> static protected method _groupResult ] {

          - Parameters [3] {
            Parameter #0 [ <required> $functionName ]
            Parameter #1 [ <required> $alias ]
            Parameter #2 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method count ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method sum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method maximum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method minimum ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> static public method average ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> final static protected method _invokeFinder ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $arguments ]
          }
        }

        Method [ <internal:phalcon> static public method __callStatic ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $arguments ]
          }
        }

        Method [ <internal:phalcon> static public method setup ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }
      }

      - Properties [13] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_modelsManager ]
        Property [ <default> protected $_modelsMetaData ]
        Property [ <default> protected $_errorMessages ]
        Property [ <default> protected $_operationMade ]
        Property [ <default> protected $_dirtyState ]
        Property [ <default> protected $_transaction ]
        Property [ <default> protected $_uniqueKey ]
        Property [ <default> protected $_uniqueParams ]
        Property [ <default> protected $_uniqueTypes ]
        Property [ <default> protected $_skipped ]
        Property [ <default> protected $_related ]
        Property [ <default> protected $_snapshot ]
      }

      - Methods [77] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
            Parameter #2 [ <optional> Phalcon\Mvc\Model\ManagerInterface or NULL $modelsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> protected method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> protected method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method getModelsMetaData ] {
        }

        Method [ <internal:phalcon> public method getModelsManager ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method setTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon> protected method setSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $source ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getSource ] {
        }

        Method [ <internal:phalcon> protected method setSchema ] {

          - Parameters [1] {
            Parameter #0 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getSchema ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method setConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method setReadConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method setWriteConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getReadConnectionService ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getWriteConnectionService ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultInterface> public method setDirtyState ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dirtyState ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getDirtyState ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getReadConnection ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getWriteConnection ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method assign ] {

          - Parameters [3] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <optional> $dataColumnMap ]
            Parameter #2 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon> protected method _exists ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaDataInterface $metaData ]
            Parameter #1 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #2 [ <optional> $table ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method fireEvent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method fireEventCancel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon> protected method _cancelOperation ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> protected method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\ValidationInterface $validator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method validationHasFailed ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getMessages ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $filter ]
          }
        }

        Method [ <internal:phalcon> final protected method _checkForeignKeysRestrict ] {
        }

        Method [ <internal:phalcon> final protected method _checkForeignKeysReverseCascade ] {
        }

        Method [ <internal:phalcon> final protected method _checkForeignKeysReverseRestrict ] {
        }

        Method [ <internal:phalcon> protected method _preSave ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaDataInterface $metaData ]
            Parameter #1 [ <required> $exists ]
            Parameter #2 [ <required> $identityField ]
          }
        }

        Method [ <internal:phalcon> protected method _postSave ] {

          - Parameters [2] {
            Parameter #0 [ <required> $success ]
            Parameter #1 [ <required> $exists ]
          }
        }

        Method [ <internal:phalcon> protected method _doLowInsert ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaDataInterface $metaData ]
            Parameter #1 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $identityField ]
          }
        }

        Method [ <internal:phalcon> protected method _doLowUpdate ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaDataInterface $metaData ]
            Parameter #1 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #2 [ <required> $table ]
          }
        }

        Method [ <internal:phalcon> protected method _preSaveRelatedRecords ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #1 [ <required> $related ]
          }
        }

        Method [ <internal:phalcon> protected method _postSaveRelatedRecords ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Db\AdapterInterface $connection ]
            Parameter #1 [ <required> $related ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method save ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method create ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method update ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $whiteList ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method delete ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getOperationMade ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method refresh ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method skipOperation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $skip ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method readAttribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method writeAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> protected method skipAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> protected method skipAttributesOnCreate ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> protected method skipAttributesOnUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> protected method allowEmptyStringValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> protected method hasOne ] {

          - Parameters [4] {
            Parameter #0 [ <required> $fields ]
            Parameter #1 [ <required> $referenceModel ]
            Parameter #2 [ <required> $referencedFields ]
            Parameter #3 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> protected method belongsTo ] {

          - Parameters [4] {
            Parameter #0 [ <required> $fields ]
            Parameter #1 [ <required> $referenceModel ]
            Parameter #2 [ <required> $referencedFields ]
            Parameter #3 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> protected method hasMany ] {

          - Parameters [4] {
            Parameter #0 [ <required> $fields ]
            Parameter #1 [ <required> $referenceModel ]
            Parameter #2 [ <required> $referencedFields ]
            Parameter #3 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> protected method hasManyToMany ] {

          - Parameters [7] {
            Parameter #0 [ <required> $fields ]
            Parameter #1 [ <required> $intermediateModel ]
            Parameter #2 [ <required> $intermediateFields ]
            Parameter #3 [ <required> $intermediateReferencedFields ]
            Parameter #4 [ <required> $referenceModel ]
            Parameter #5 [ <required> $referencedFields ]
            Parameter #6 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method addBehavior ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\BehaviorInterface $behavior ]
          }
        }

        Method [ <internal:phalcon> protected method keepSnapshots ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keepSnapshot ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method setSnapshotData ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $data ]
            Parameter #1 [ <optional> $columnMap ]
          }
        }

        Method [ <internal:phalcon> public method hasSnapshotData ] {
        }

        Method [ <internal:phalcon> public method getSnapshotData ] {
        }

        Method [ <internal:phalcon> public method hasChanged ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $fieldName ]
          }
        }

        Method [ <internal:phalcon> public method getChangedFields ] {
        }

        Method [ <internal:phalcon> protected method useDynamicUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dynamicUpdate ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method getRelated ] {

          - Parameters [2] {
            Parameter #0 [ <required> $alias ]
            Parameter #1 [ <optional> $arguments ]
          }
        }

        Method [ <internal:phalcon> protected method _getRelatedRecords ] {

          - Parameters [3] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <required> $arguments ]
          }
        }

        Method [ <internal:phalcon> public method __call ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $arguments ]
          }
        }

        Method [ <internal:phalcon> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> final protected method _possibleSetter ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype Serializable> public method serialize ] {
        }

        Method [ <internal:phalcon, prototype Serializable> public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> public method dump ] {
        }

        Method [ <internal:phalcon> public method toArray ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $columns ]
          }
        }

        Method [ <internal:phalcon, prototype JsonSerializable> public method jsonSerialize ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ModelInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Behavior\SoftDelete extends Phalcon\Mvc\Model\Behavior implements Phalcon\Mvc\Model\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\Behavior, prototype Phalcon\Mvc\Model\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior, prototype Phalcon\Mvc\Model\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Behavior\Timestampable extends Phalcon\Mvc\Model\Behavior implements Phalcon\Mvc\Model\BehaviorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\Behavior, prototype Phalcon\Mvc\Model\BehaviorInterface> public method notify ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior> protected method mustTakeAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior> protected method getOptions ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $eventName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Behavior, prototype Phalcon\Mvc\Model\BehaviorInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <optional> $arguments ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Criteria implements Phalcon\Mvc\Model\CriteriaInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method fromInput ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> array $data ]
            Parameter #3 [ <optional> $operator ]
          }
        }
      }

      - Properties [5] {
        Property [ <default> protected $_model ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_bindParams ]
        Property [ <default> protected $_bindTypes ]
        Property [ <default> protected $_hiddenParamNumber ]
      }

      - Methods [38] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method setModelName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getModelName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method bind ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $bindParams ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method bindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $bindTypes ]
          }
        }

        Method [ <internal:phalcon> public method distinct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $distinct ]
          }
        }

        Method [ <internal:phalcon> public method columns ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columns ]
          }
        }

        Method [ <internal:phalcon> public method join ] {

          - Parameters [4] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon> public method innerJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> public method leftJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon> public method rightJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method where ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> public method addWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method andWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method orWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method betweenWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method notBetweenWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method inWhere ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method notInWhere ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method conditions ] {

          - Parameters [1] {
            Parameter #0 [ <required> $conditions ]
          }
        }

        Method [ <internal, deprecated:phalcon> public method order ] {

          - Parameters [1] {
            Parameter #0 [ <required> $orderColumns ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method orderBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $orderColumns ]
          }
        }

        Method [ <internal:phalcon> public method groupBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $group ]
          }
        }

        Method [ <internal:phalcon> public method having ] {

          - Parameters [1] {
            Parameter #0 [ <required> $having ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $limit ]
            Parameter #1 [ <optional> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $forUpdate ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method sharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sharedLock ]
          }
        }

        Method [ <internal:phalcon> public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $cache ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getWhere ] {
        }

        Method [ <internal:phalcon> public method getColumns ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getConditions ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getLimit ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getOrderBy ] {
        }

        Method [ <internal:phalcon> public method getGroupBy ] {
        }

        Method [ <internal:phalcon> public method getHaving ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\CriteriaInterface> public method execute ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Manager implements Phalcon\Mvc\Model\ManagerInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [25] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_customEventsManager ]
        Property [ <default> protected $_readConnectionServices ]
        Property [ <default> protected $_writeConnectionServices ]
        Property [ <default> protected $_aliases ]
        Property [ <default> protected $_modelVisibility ]
        Property [ <default> protected $_hasMany ]
        Property [ <default> protected $_hasManySingle ]
        Property [ <default> protected $_hasOne ]
        Property [ <default> protected $_hasOneSingle ]
        Property [ <default> protected $_belongsTo ]
        Property [ <default> protected $_belongsToSingle ]
        Property [ <default> protected $_hasManyToMany ]
        Property [ <default> protected $_hasManyToManySingle ]
        Property [ <default> protected $_initialized ]
        Property [ <default> protected $_sources ]
        Property [ <default> protected $_schemas ]
        Property [ <default> protected $_behaviors ]
        Property [ <default> protected $_lastInitialized ]
        Property [ <default> protected $_lastQuery ]
        Property [ <default> protected $_reusable ]
        Property [ <default> protected $_keepSnapshots ]
        Property [ <default> protected $_dynamicUpdate ]
        Property [ <default> protected $_namespaceAliases ]
      }

      - Methods [63] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon> public method setCustomEventsManager ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon> public method getCustomEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method initialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method isInitialized ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getLastInitialized ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method load ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <optional> $newInstance ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method setModelSource ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $source ]
          }
        }

        Method [ <internal:phalcon> final public method isVisibleModelProperty ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getModelSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method setModelSchema ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getModelSchema ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method setConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method setWriteConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method setReadConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionService ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getReadConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getWriteConnection ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> protected method _getConnection ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionServices ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getReadConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getWriteConnectionService ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method _getConnectionService ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $connectionServices ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method notifyEvent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $eventName ]
            Parameter #1 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method missingMethod ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $eventName ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method addBehavior ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\Mvc\Model\BehaviorInterface $behavior ]
          }
        }

        Method [ <internal:phalcon> public method keepSnapshots ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $keepSnapshots ]
          }
        }

        Method [ <internal:phalcon> public method isKeepingSnapshots ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method useDynamicUpdate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $dynamicUpdate ]
          }
        }

        Method [ <internal:phalcon> public method isUsingDynamicUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method addHasOne ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method addBelongsTo ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method addHasMany ] {

          - Parameters [5] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $referencedModel ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon> public method addHasManyToMany ] {

          - Parameters [8] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $fields ]
            Parameter #2 [ <required> $intermediateModel ]
            Parameter #3 [ <required> $intermediateFields ]
            Parameter #4 [ <required> $intermediateReferencedFields ]
            Parameter #5 [ <required> $referencedModel ]
            Parameter #6 [ <required> $referencedFields ]
            Parameter #7 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method existsBelongsTo ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method existsHasMany ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method existsHasOne ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon> public method existsHasManyToMany ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $modelRelation ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getRelationByAlias ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $alias ]
          }
        }

        Method [ <internal:phalcon> final protected method _mergeFindParameters ] {

          - Parameters [2] {
            Parameter #0 [ <required> $findParamsOne ]
            Parameter #1 [ <required> $findParamsTwo ]
          }
        }

        Method [ <internal:phalcon> public method getRelationRecords ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\RelationInterface $relation ]
            Parameter #1 [ <required> $method ]
            Parameter #2 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #3 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon> public method getReusableRecords ] {

          - Parameters [2] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> public method setReusableRecords ] {

          - Parameters [3] {
            Parameter #0 [ <required> $modelName ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $records ]
          }
        }

        Method [ <internal:phalcon> public method clearReusableObjects ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getBelongsToRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getHasManyRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getHasOneRecords ] {

          - Parameters [5] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $modelName ]
            Parameter #2 [ <required> $modelRelation ]
            Parameter #3 [ <required> Phalcon\Mvc\ModelInterface $record ]
            Parameter #4 [ <optional> $parameters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getBelongsTo ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getHasMany ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getHasOne ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method getHasManyToMany ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getHasOneAndHasMany ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getRelations ] {

          - Parameters [1] {
            Parameter #0 [ <required> $modelName ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getRelationsBetween ] {

          - Parameters [2] {
            Parameter #0 [ <required> $first ]
            Parameter #1 [ <required> $second ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method createQuery ] {

          - Parameters [1] {
            Parameter #0 [ <required> $phql ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method executeQuery ] {

          - Parameters [3] {
            Parameter #0 [ <required> $phql ]
            Parameter #1 [ <optional> $placeholders ]
            Parameter #2 [ <optional> $types ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method createBuilder ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ManagerInterface> public method getLastQuery ] {
        }

        Method [ <internal:phalcon> public method registerNamespaceAlias ] {

          - Parameters [2] {
            Parameter #0 [ <required> $alias ]
            Parameter #1 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon> public method getNamespaceAlias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }

        Method [ <internal:phalcon> public method getNamespaceAliases ] {
        }

        Method [ <internal:phalcon, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Message implements Phalcon\Mvc\Model\MessageInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $message ]
          }
        }
      }

      - Properties [5] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_message ]
        Property [ <default> protected $_field ]
        Property [ <default> protected $_model ]
        Property [ <default> protected $_code ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
            Parameter #3 [ <optional> $model ]
            Parameter #4 [ <optional> $code ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method setMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method getMessage ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method setField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method getField ] {
        }

        Method [ <internal:phalcon> public method setModel ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon> public method setCode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $code ]
          }
        }

        Method [ <internal:phalcon> public method getModel ] {
        }

        Method [ <internal:phalcon> public method getCode ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MessageInterface> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Apc extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_ttl ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Files extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_metaDataDir ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Libmemcached extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_ttl ]
        Property [ <default> protected $_memcache ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Memcache extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_ttl ]
        Property [ <default> protected $_memcache ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Memory extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Redis extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_ttl ]
        Property [ <default> protected $_redis ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Session extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_metaData ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_prefix ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Strategy\Annotations implements Phalcon\Mvc\Model\MetaData\StrategyInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaData\StrategyInterface> final public method getMetaData ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaData\StrategyInterface> final public method getColumnMaps ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Strategy\Introspection implements Phalcon\Mvc\Model\MetaData\StrategyInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaData\StrategyInterface> final public method getMetaData ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\MetaData\StrategyInterface> final public method getColumnMaps ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\MetaData\Xcache extends Phalcon\Mvc\Model\MetaData implements Phalcon\Mvc\Model\MetaDataInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [16] {
        Constant [ integer MODELS_ATTRIBUTES ] { 0 }
        Constant [ integer MODELS_PRIMARY_KEY ] { 1 }
        Constant [ integer MODELS_NON_PRIMARY_KEY ] { 2 }
        Constant [ integer MODELS_NOT_NULL ] { 3 }
        Constant [ integer MODELS_DATA_TYPES ] { 4 }
        Constant [ integer MODELS_DATA_TYPES_NUMERIC ] { 5 }
        Constant [ integer MODELS_DATE_AT ] { 6 }
        Constant [ integer MODELS_DATE_IN ] { 7 }
        Constant [ integer MODELS_IDENTITY_COLUMN ] { 8 }
        Constant [ integer MODELS_DATA_TYPES_BIND ] { 9 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_INSERT ] { 10 }
        Constant [ integer MODELS_AUTOMATIC_DEFAULT_UPDATE ] { 11 }
        Constant [ integer MODELS_DEFAULT_VALUES ] { 12 }
        Constant [ integer MODELS_EMPTY_STRING_VALUES ] { 13 }
        Constant [ integer MODELS_COLUMN_MAP ] { 0 }
        Constant [ integer MODELS_REVERSE_COLUMN_MAP ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_strategy ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_ttl ]
        Property [ <default> protected $_metaData ]
      }

      - Methods [33] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\MetaDataInterface, prototype Phalcon\Mvc\Model\MetaDataInterface> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData> final protected method _initialize ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $table ]
            Parameter #3 [ <required> $schema ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setStrategy ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\MetaData\StrategyInterface $strategy ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getStrategy ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaData ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readMetaDataIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method writeMetaDataIndex ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> final public method readColumnMapIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNonPrimaryKeyAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getNotNullAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDataTypesNumeric ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getIdentityField ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getBindTypes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticCreateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getAutomaticUpdateAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticCreateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setAutomaticUpdateAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method setEmptyStringAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getEmptyStringAttributes ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getDefaultValues ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method getReverseColumnMap ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method hasAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method isEmpty ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\MetaData, prototype Phalcon\Mvc\Model\MetaDataInterface> public method reset ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Query implements Phalcon\Mvc\Model\QueryInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [4] {
        Constant [ integer TYPE_SELECT ] { 309 }
        Constant [ integer TYPE_INSERT ] { 306 }
        Constant [ integer TYPE_UPDATE ] { 300 }
        Constant [ integer TYPE_DELETE ] { 303 }
      }

      - Static properties [1] {
        Property [ protected static $_irPhqlCache ]
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method clean ] {
        }
      }

      - Properties [21] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_manager ]
        Property [ <default> protected $_metaData ]
        Property [ <default> protected $_type ]
        Property [ <default> protected $_phql ]
        Property [ <default> protected $_ast ]
        Property [ <default> protected $_intermediate ]
        Property [ <default> protected $_models ]
        Property [ <default> protected $_sqlAliases ]
        Property [ <default> protected $_sqlAliasesModels ]
        Property [ <default> protected $_sqlModelsAliases ]
        Property [ <default> protected $_sqlAliasesModelsInstances ]
        Property [ <default> protected $_sqlColumnAliases ]
        Property [ <default> protected $_modelsInstances ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_cacheOptions ]
        Property [ <default> protected $_uniqueRow ]
        Property [ <default> protected $_bindParams ]
        Property [ <default> protected $_bindTypes ]
        Property [ <default> protected $_enableImplicitJoins ]
        Property [ <default> protected $_sharedLock ]
      }

      - Methods [45] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $phql ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
            Parameter #2 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method setUniqueRow ] {

          - Parameters [1] {
            Parameter #0 [ <required> $uniqueRow ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method getUniqueRow ] {
        }

        Method [ <internal:phalcon> final protected method _getQualified ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> final protected method _getCallArgument ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $argument ]
          }
        }

        Method [ <internal:phalcon> final protected method _getCaseExpression ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> final protected method _getFunctionCall ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> final protected method _getExpression ] {

          - Parameters [2] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <optional> $quoting ]
          }
        }

        Method [ <internal:phalcon> final protected method _getSelectColumn ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $column ]
          }
        }

        Method [ <internal:phalcon> final protected method _getTable ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\ManagerInterface $manager ]
            Parameter #1 [ <required> $qualifiedName ]
          }
        }

        Method [ <internal:phalcon> final protected method _getJoin ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\ManagerInterface $manager ]
            Parameter #1 [ <required> $join ]
          }
        }

        Method [ <internal:phalcon> final protected method _getJoinType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $join ]
          }
        }

        Method [ <internal:phalcon> final protected method _getSingleJoin ] {

          - Parameters [5] {
            Parameter #0 [ <required> $joinType ]
            Parameter #1 [ <required> $joinSource ]
            Parameter #2 [ <required> $modelAlias ]
            Parameter #3 [ <required> $joinAlias ]
            Parameter #4 [ <required> Phalcon\Mvc\Model\RelationInterface $relation ]
          }
        }

        Method [ <internal:phalcon> final protected method _getMultiJoin ] {

          - Parameters [5] {
            Parameter #0 [ <required> $joinType ]
            Parameter #1 [ <required> $joinSource ]
            Parameter #2 [ <required> $modelAlias ]
            Parameter #3 [ <required> $joinAlias ]
            Parameter #4 [ <required> Phalcon\Mvc\Model\RelationInterface $relation ]
          }
        }

        Method [ <internal:phalcon> final protected method _getJoins ] {

          - Parameters [1] {
            Parameter #0 [ <required> $select ]
          }
        }

        Method [ <internal:phalcon> final protected method _getOrderClause ] {

          - Parameters [1] {
            Parameter #0 [ <required> $order ]
          }
        }

        Method [ <internal:phalcon> final protected method _getGroupClause ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $group ]
          }
        }

        Method [ <internal:phalcon> final protected method _getLimitClause ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $limitClause ]
          }
        }

        Method [ <internal:phalcon> final protected method _prepareSelect ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $ast ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> final protected method _prepareInsert ] {
        }

        Method [ <internal:phalcon> final protected method _prepareUpdate ] {
        }

        Method [ <internal:phalcon> final protected method _prepareDelete ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method parse ] {
        }

        Method [ <internal:phalcon> public method getCache ] {
        }

        Method [ <internal:phalcon> final protected method _executeSelect ] {

          - Parameters [4] {
            Parameter #0 [ <required> $intermediate ]
            Parameter #1 [ <required> $bindParams ]
            Parameter #2 [ <required> $bindTypes ]
            Parameter #3 [ <optional> $simulate ]
          }
        }

        Method [ <internal:phalcon> final protected method _executeInsert ] {

          - Parameters [3] {
            Parameter #0 [ <required> $intermediate ]
            Parameter #1 [ <required> $bindParams ]
            Parameter #2 [ <required> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> final protected method _executeUpdate ] {

          - Parameters [3] {
            Parameter #0 [ <required> $intermediate ]
            Parameter #1 [ <required> $bindParams ]
            Parameter #2 [ <required> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> final protected method _executeDelete ] {

          - Parameters [3] {
            Parameter #0 [ <required> $intermediate ]
            Parameter #1 [ <required> $bindParams ]
            Parameter #2 [ <required> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> final protected method _getRelatedRecords ] {

          - Parameters [4] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $model ]
            Parameter #1 [ <required> $intermediate ]
            Parameter #2 [ <required> $bindParams ]
            Parameter #3 [ <required> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method execute ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $bindParams ]
            Parameter #1 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> public method getSingleResult ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $bindParams ]
            Parameter #1 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon> public method getType ] {
        }

        Method [ <internal:phalcon> public method setBindParams ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $bindParams ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method getBindParams ] {
        }

        Method [ <internal:phalcon> public method setBindTypes ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $bindTypes ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> public method setSharedLock ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sharedLock ]
          }
        }

        Method [ <internal:phalcon> public method getBindTypes ] {
        }

        Method [ <internal:phalcon> public method setIntermediate ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $intermediate ]
          }
        }

        Method [ <internal:phalcon> public method getIntermediate ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cacheOptions ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\QueryInterface> public method getCacheOptions ] {
        }

        Method [ <internal:phalcon> public method getSql ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Query\Builder implements Phalcon\Mvc\Model\Query\BuilderInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [2] {
        Constant [ string OPERATOR_OR ] { or }
        Constant [ string OPERATOR_AND ] { and }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [17] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_columns ]
        Property [ <default> protected $_models ]
        Property [ <default> protected $_joins ]
        Property [ <default> protected $_with ]
        Property [ <default> protected $_conditions ]
        Property [ <default> protected $_group ]
        Property [ <default> protected $_having ]
        Property [ <default> protected $_order ]
        Property [ <default> protected $_limit ]
        Property [ <default> protected $_offset ]
        Property [ <default> protected $_forUpdate ]
        Property [ <default> protected $_sharedLock ]
        Property [ <default> protected $_bindParams ]
        Property [ <default> protected $_bindTypes ]
        Property [ <default> protected $_distinct ]
        Property [ <default> protected $_hiddenParamNumber ]
      }

      - Methods [37] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $params ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method distinct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $distinct ]
          }
        }

        Method [ <internal:phalcon> public method getDistinct ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method columns ] {

          - Parameters [1] {
            Parameter #0 [ <required> $columns ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getColumns ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method from ] {

          - Parameters [1] {
            Parameter #0 [ <required> $models ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method addFrom ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $alias ]
            Parameter #2 [ <optional> $with ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getFrom ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method join ] {

          - Parameters [4] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
            Parameter #3 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method innerJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method leftJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method rightJoin ] {

          - Parameters [3] {
            Parameter #0 [ <required> $model ]
            Parameter #1 [ <optional> $conditions ]
            Parameter #2 [ <optional> $alias ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getJoins ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method where ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method andWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method orWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $conditions ]
            Parameter #1 [ <optional> $bindParams ]
            Parameter #2 [ <optional> $bindTypes ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method betweenWhere ] {

          - Parameters [4] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
            Parameter #3 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method notBetweenWhere ] {

          - Parameters [4] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> $minimum ]
            Parameter #2 [ <required> $maximum ]
            Parameter #3 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method inWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method notInWhere ] {

          - Parameters [3] {
            Parameter #0 [ <required> $expr ]
            Parameter #1 [ <required> array $values ]
            Parameter #2 [ <optional> $operator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getWhere ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method orderBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $orderBy ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getOrderBy ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method having ] {

          - Parameters [1] {
            Parameter #0 [ <required> $having ]
          }
        }

        Method [ <internal:phalcon> public method forUpdate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $forUpdate ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getHaving ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method limit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $limit ]
            Parameter #1 [ <optional> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getLimit ] {
        }

        Method [ <internal:phalcon> public method offset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon> public method getOffset ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method groupBy ] {

          - Parameters [1] {
            Parameter #0 [ <required> $group ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getGroupBy ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> final public method getPhql ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\BuilderInterface> public method getQuery ] {
        }

        Method [ <internal:phalcon> final public method autoescape ] {

          - Parameters [1] {
            Parameter #0 [ <required> $identifier ]
          }
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Mvc\Model\Query\Lang ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method parsePHQL ] {

          - Parameters [1] {
            Parameter #0 [ <required> $phql ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Query\Status implements Phalcon\Mvc\Model\Query\StatusInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_success ]
        Property [ <default> protected $_model ]
      }

      - Methods [4] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $success ]
            Parameter #1 [ <optional> Phalcon\Mvc\ModelInterface or NULL $model ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\StatusInterface> public method getModel ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\StatusInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Query\StatusInterface> public method success ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Relation implements Phalcon\Mvc\Model\RelationInterface ] {

      - Constants [8] {
        Constant [ integer BELONGS_TO ] { 0 }
        Constant [ integer HAS_ONE ] { 1 }
        Constant [ integer HAS_MANY ] { 2 }
        Constant [ integer HAS_ONE_THROUGH ] { 3 }
        Constant [ integer HAS_MANY_THROUGH ] { 4 }
        Constant [ integer NO_ACTION ] { 0 }
        Constant [ integer ACTION_RESTRICT ] { 1 }
        Constant [ integer ACTION_CASCADE ] { 2 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_referencedModel ]
        Property [ <default> protected $_fields ]
        Property [ <default> protected $_referencedFields ]
        Property [ <default> protected $_intermediateModel ]
        Property [ <default> protected $_intermediateFields ]
        Property [ <default> protected $_intermediateReferencedFields ]
        Property [ <default> protected $_options ]
      }

      - Methods [16] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $referencedModel ]
            Parameter #2 [ <required> $fields ]
            Parameter #3 [ <required> $referencedFields ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method setIntermediateRelation ] {

          - Parameters [3] {
            Parameter #0 [ <required> $intermediateFields ]
            Parameter #1 [ <required> $intermediateModel ]
            Parameter #2 [ <required> $intermediateReferencedFields ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getReferencedModel ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getFields ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getReferencedFields ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method isForeignKey ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getForeignKey ] {
        }

        Method [ <internal:phalcon> public method getParams ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method isThrough ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method isReusable ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getIntermediateFields ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getIntermediateModel ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\RelationInterface> public method getIntermediateReferencedFields ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Mvc\Model\Resultset\Complex extends Phalcon\Mvc\Model\Resultset implements JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, Phalcon\Mvc\Model\ResultsetInterface ] {

      - Constants [5] {
        Constant [ integer TYPE_RESULT_FULL ] { 0 }
        Constant [ integer TYPE_RESULT_PARTIAL ] { 1 }
        Constant [ integer HYDRATE_RECORDS ] { 0 }
        Constant [ integer HYDRATE_OBJECTS ] { 2 }
        Constant [ integer HYDRATE_ARRAYS ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [12] {
        Property [ <default> protected $_result ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_isFresh ]
        Property [ <default> protected $_pointer ]
        Property [ <default> protected $_count ]
        Property [ <default> protected $_activeRow ]
        Property [ <default> protected $_rows ]
        Property [ <default> protected $_row ]
        Property [ <default> protected $_errorMessages ]
        Property [ <default> protected $_hydrateMode ]
        Property [ <default> protected $_columnTypes ]
        Property [ <default> protected $_disableHydration ]
      }

      - Methods [28] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\Resultset, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $columnTypes ]
            Parameter #1 [ <optional> Phalcon\Db\ResultInterface or NULL $result ]
            Parameter #2 [ <optional> Phalcon\Cache\BackendInterface or NULL $cache ]
          }
        }

        Method [ <internal:phalcon, overwrites Iterator, prototype Iterator> final public method current ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ResultsetInterface, prototype Phalcon\Mvc\Model\ResultsetInterface> public method toArray ] {
        }

        Method [ <internal:phalcon, overwrites Serializable, prototype Serializable> public method serialize ] {
        }

        Method [ <internal:phalcon, overwrites Serializable, prototype Serializable> public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> final public method rewind ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype SeekableIterator> final public method seek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Countable> final public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getFirst ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getLast ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method setIsFresh ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isFresh ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method setHydrateMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hydrateMode ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method getHydrateMode ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getCache ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method update ] {

          - Parameters [2] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype JsonSerializable> public method jsonSerialize ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Mvc\Model\Resultset\Simple extends Phalcon\Mvc\Model\Resultset implements JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, Phalcon\Mvc\Model\ResultsetInterface ] {

      - Constants [5] {
        Constant [ integer TYPE_RESULT_FULL ] { 0 }
        Constant [ integer TYPE_RESULT_PARTIAL ] { 1 }
        Constant [ integer HYDRATE_RECORDS ] { 0 }
        Constant [ integer HYDRATE_OBJECTS ] { 2 }
        Constant [ integer HYDRATE_ARRAYS ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> protected $_result ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_isFresh ]
        Property [ <default> protected $_pointer ]
        Property [ <default> protected $_count ]
        Property [ <default> protected $_activeRow ]
        Property [ <default> protected $_rows ]
        Property [ <default> protected $_row ]
        Property [ <default> protected $_errorMessages ]
        Property [ <default> protected $_hydrateMode ]
        Property [ <default> protected $_model ]
        Property [ <default> protected $_columnMap ]
        Property [ <default> protected $_keepSnapshots ]
      }

      - Methods [28] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\Resultset, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> $columnMap ]
            Parameter #1 [ <required> $model ]
            Parameter #2 [ <required> $result ]
            Parameter #3 [ <optional> Phalcon\Cache\BackendInterface or NULL $cache ]
            Parameter #4 [ <optional> $keepSnapshots ]
          }
        }

        Method [ <internal:phalcon, overwrites Iterator, prototype Iterator> final public method current ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ResultsetInterface, prototype Phalcon\Mvc\Model\ResultsetInterface> public method toArray ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $renameColumns ]
          }
        }

        Method [ <internal:phalcon, overwrites Serializable, prototype Serializable> public method serialize ] {
        }

        Method [ <internal:phalcon, overwrites Serializable, prototype Serializable> public method unserialize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Iterator> final public method rewind ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype SeekableIterator> final public method seek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Countable> final public method count ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getType ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getFirst ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getLast ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method setIsFresh ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isFresh ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method isFresh ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method setHydrateMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hydrateMode ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method getHydrateMode ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype Phalcon\Mvc\Model\ResultsetInterface> public method getCache ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method update ] {

          - Parameters [2] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method delete ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Closure or NULL $conditionCallback ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $filter ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Resultset, prototype JsonSerializable> public method jsonSerialize ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Row implements Phalcon\Mvc\EntityInterface, Phalcon\Mvc\Model\ResultInterface, ArrayAccess, JsonSerializable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\ResultInterface> public method setDirtyState ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dirtyState ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method readAttribute ] {

          - Parameters [1] {
            Parameter #0 [ <required> $attribute ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\EntityInterface> public method writeAttribute ] {

          - Parameters [2] {
            Parameter #0 [ <required> $attribute ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method toArray ] {
        }

        Method [ <internal:phalcon, prototype JsonSerializable> public method jsonSerialize ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Transaction implements Phalcon\Mvc\Model\TransactionInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $_connection ]
        Property [ <default> protected $_activeTransaction ]
        Property [ <default> protected $_isNewTransaction ]
        Property [ <default> protected $_rollbackOnAbort ]
        Property [ <default> protected $_manager ]
        Property [ <default> protected $_messages ]
        Property [ <default> protected $_rollbackRecord ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
            Parameter #1 [ <optional> $autoBegin ]
            Parameter #2 [ <optional> $service ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method setTransactionManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\Transaction\ManagerInterface $manager ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method begin ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method commit ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method rollback ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $rollbackMessage ]
            Parameter #1 [ <optional> $rollbackRecord ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method getConnection ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method setIsNewTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $isNew ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method setRollbackOnAbort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rollbackOnAbort ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method isManaged ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method isValid ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\TransactionInterface> public method setRollbackedRecord ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\ModelInterface $record ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Transaction\Failed extends Phalcon\Mvc\Model\Transaction\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
        Property [ <default> protected $_record ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, overwrites Exception, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> Phalcon\Mvc\ModelInterface or NULL $record ]
          }
        }

        Method [ <internal:phalcon> public method getRecordMessages ] {
        }

        Method [ <internal:phalcon> public method getRecord ] {
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Transaction\Manager implements Phalcon\Mvc\Model\Transaction\ManagerInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_initialized ]
        Property [ <default> protected $_rollbackPendent ]
        Property [ <default> protected $_number ]
        Property [ <default> protected $_service ]
        Property [ <default> protected $_transactions ]
      }

      - Methods [17] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method setDbService ] {

          - Parameters [1] {
            Parameter #0 [ <required> $service ]
          }
        }

        Method [ <internal:phalcon> public method getDbService ] {
        }

        Method [ <internal:phalcon> public method setRollbackPendent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rollbackPendent ]
          }
        }

        Method [ <internal:phalcon> public method getRollbackPendent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method has ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $autoBegin ]
          }
        }

        Method [ <internal:phalcon> public method getOrCreateTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $autoBegin ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method rollbackPendent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method commit ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method rollback ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $collect ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method notifyRollback ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method notifyCommit ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon> protected method _collectTransaction ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\TransactionInterface $transaction ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Model\Transaction\ManagerInterface> public method collectTransactions ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\ValidationFailed extends Phalcon\Mvc\Model\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
        Property [ <default> protected $_model ]
        Property [ <default> protected $_messages ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, overwrites Exception, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\Model $model ]
            Parameter #1 [ <required> array $validationMessages ]
          }
        }

        Method [ <internal:phalcon> public method getModel ] {
        }

        Method [ <internal:phalcon> public method getMessages ] {
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Email extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Exclusionin extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Inclusionin extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Ip extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [2] {
        Constant [ integer VERSION_4 ] { 1048576 }
        Constant [ integer VERSION_6 ] { 2097152 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Numericality extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\PresenceOf extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Regex extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\StringLength extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Uniqueness extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Model\Validator\Url extends Phalcon\Mvc\Model\Validator implements Phalcon\Mvc\Model\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> protected $_messages ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Model\ValidatorInterface, prototype Phalcon\Mvc\Model\ValidatorInterface> public method validate ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\EntityInterface $record ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> protected method appendMessage ] {

          - Parameters [3] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator, prototype Phalcon\Mvc\Model\ValidatorInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Model\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Router\Annotations extends Phalcon\Mvc\Router implements Phalcon\Events\EventsAwareInterface, Phalcon\Mvc\RouterInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [4] {
        Constant [ integer URI_SOURCE_GET_URL ] { 0 }
        Constant [ integer URI_SOURCE_SERVER_REQUEST_URI ] { 1 }
        Constant [ integer POSITION_FIRST ] { 0 }
        Constant [ integer POSITION_LAST ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [23] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_uriSource ]
        Property [ <default> protected $_namespace ]
        Property [ <default> protected $_module ]
        Property [ <default> protected $_controller ]
        Property [ <default> protected $_action ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_routes ]
        Property [ <default> protected $_matchedRoute ]
        Property [ <default> protected $_matches ]
        Property [ <default> protected $_wasMatched ]
        Property [ <default> protected $_defaultNamespace ]
        Property [ <default> protected $_defaultModule ]
        Property [ <default> protected $_defaultController ]
        Property [ <default> protected $_defaultAction ]
        Property [ <default> protected $_defaultParams ]
        Property [ <default> protected $_removeExtraSlashes ]
        Property [ <default> protected $_notFoundPaths ]
        Property [ <default> protected $_handlers ]
        Property [ <default> protected $_controllerSuffix ]
        Property [ <default> protected $_actionSuffix ]
        Property [ <default> protected $_routePrefix ]
      }

      - Methods [48] {
        Method [ <internal:phalcon> public method addResource ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon> public method addModuleResource ] {

          - Parameters [3] {
            Parameter #0 [ <required> $module ]
            Parameter #1 [ <required> $handler ]
            Parameter #2 [ <optional> $prefix ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method handle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon> public method processControllerAnnotation ] {

          - Parameters [2] {
            Parameter #0 [ <required> $handler ]
            Parameter #1 [ <required> Phalcon\Annotations\Annotation $annotation ]
          }
        }

        Method [ <internal:phalcon> public method processActionAnnotation ] {

          - Parameters [5] {
            Parameter #0 [ <required> $module ]
            Parameter #1 [ <required> $namespaceName ]
            Parameter #2 [ <required> $controller ]
            Parameter #3 [ <required> $action ]
            Parameter #4 [ <required> Phalcon\Annotations\Annotation $annotation ]
          }
        }

        Method [ <internal:phalcon> public method setControllerSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerSuffix ]
          }
        }

        Method [ <internal:phalcon> public method setActionSuffix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionSuffix ]
          }
        }

        Method [ <internal:phalcon> public method getResources ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $defaultRoutes ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method getRewriteUri ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method setUriSource ] {

          - Parameters [1] {
            Parameter #0 [ <required> $uriSource ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method removeExtraSlashes ] {

          - Parameters [1] {
            Parameter #0 [ <required> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method setDefaultNamespace ] {

          - Parameters [1] {
            Parameter #0 [ <required> $namespaceName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method setDefaultModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $moduleName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method setDefaultController ] {

          - Parameters [1] {
            Parameter #0 [ <required> $controllerName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method setDefaultAction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $actionName ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method setDefaults ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $defaults ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method getDefaults ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method add ] {

          - Parameters [4] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
            Parameter #3 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addGet ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addPost ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addPut ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addPatch ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addDelete ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addOptions ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addHead ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addPurge ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addTrace ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method addConnect ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $position ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method mount ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Router\GroupInterface $group ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method notFound ] {

          - Parameters [1] {
            Parameter #0 [ <required> $paths ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method clear ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getNamespaceName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getModuleName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getControllerName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getMatchedRoute ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getMatches ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method wasMatched ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getRoutes ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getRouteById ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router, prototype Phalcon\Mvc\RouterInterface> public method getRouteByName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\Router> public method isExactControllerName ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Router\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Router\Group implements Phalcon\Mvc\Router\GroupInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_hostname ]
        Property [ <default> protected $_paths ]
        Property [ <default> protected $_routes ]
        Property [ <default> protected $_beforeMatch ]
      }

      - Methods [20] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method setHostname ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hostname ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method getHostname ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method setPrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method getPrefix ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method beforeMatch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $beforeMatch ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method getBeforeMatch ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method setPaths ] {

          - Parameters [1] {
            Parameter #0 [ <required> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method getPaths ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method getRoutes ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method add ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addGet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addPost ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addPut ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addPatch ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addDelete ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addOptions ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method addHead ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\GroupInterface> public method clear ] {
        }

        Method [ <internal:phalcon> protected method _addRoute ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Router\Route implements Phalcon\Mvc\Router\RouteInterface ] {

      - Constants [0] {
      }

      - Static properties [1] {
        Property [ protected static $_uniqueId ]
      }

      - Static methods [2] {
        Method [ <internal:phalcon> static public method getRoutePaths ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> static public method reset ] {
        }
      }

      - Properties [11] {
        Property [ <default> protected $_pattern ]
        Property [ <default> protected $_compiledPattern ]
        Property [ <default> protected $_paths ]
        Property [ <default> protected $_methods ]
        Property [ <default> protected $_hostname ]
        Property [ <default> protected $_converters ]
        Property [ <default> protected $_id ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_beforeMatch ]
        Property [ <default> protected $_match ]
        Property [ <default> protected $_group ]
      }

      - Methods [24] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
            Parameter #2 [ <optional> $httpMethods ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method compilePattern ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method via ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpMethods ]
          }
        }

        Method [ <internal:phalcon> public method extractNamedParams ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pattern ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method reConfigure ] {

          - Parameters [2] {
            Parameter #0 [ <required> $pattern ]
            Parameter #1 [ <optional> $paths ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> public method beforeMatch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $callback ]
          }
        }

        Method [ <internal:phalcon> public method getBeforeMatch ] {
        }

        Method [ <internal:phalcon> public method match ] {

          - Parameters [1] {
            Parameter #0 [ <required> $callback ]
          }
        }

        Method [ <internal:phalcon> public method getMatch ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getRouteId ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getPattern ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getCompiledPattern ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getPaths ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getReversedPaths ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method setHttpMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $httpMethods ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getHttpMethods ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method setHostname ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hostname ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\Router\RouteInterface> public method getHostname ] {
        }

        Method [ <internal:phalcon> public method setGroup ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Router\GroupInterface $group ]
          }
        }

        Method [ <internal:phalcon> public method getGroup ] {
        }

        Method [ <internal:phalcon> public method convert ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $converter ]
          }
        }

        Method [ <internal:phalcon> public method getConverters ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Url implements Phalcon\Mvc\UrlInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_baseUri ]
        Property [ <default> protected $_staticBaseUri ]
        Property [ <default> protected $_basePath ]
        Property [ <default> protected $_router ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method setBaseUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $baseUri ]
          }
        }

        Method [ <internal:phalcon> public method setStaticBaseUri ] {

          - Parameters [1] {
            Parameter #0 [ <required> $staticBaseUri ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method getBaseUri ] {
        }

        Method [ <internal:phalcon> public method getStaticBaseUri ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method setBasePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basePath ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method getBasePath ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method get ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $uri ]
            Parameter #1 [ <optional> $args ]
            Parameter #2 [ <optional> $local ]
            Parameter #3 [ <optional> $baseUri ]
          }
        }

        Method [ <internal:phalcon> public method getStatic ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $uri ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\UrlInterface> public method path ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $path ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\Url\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\User\Component extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\User\Module extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\User\Plugin extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\ViewInterface, Phalcon\Mvc\ViewBaseInterface ] {

      - Constants [8] {
        Constant [ integer LEVEL_MAIN_LAYOUT ] { 5 }
        Constant [ integer LEVEL_AFTER_TEMPLATE ] { 4 }
        Constant [ integer LEVEL_LAYOUT ] { 3 }
        Constant [ integer LEVEL_BEFORE_TEMPLATE ] { 2 }
        Constant [ integer LEVEL_ACTION_VIEW ] { 1 }
        Constant [ integer LEVEL_NO_RENDER ] { 0 }
        Constant [ integer CACHE_MODE_NONE ] { 0 }
        Constant [ integer CACHE_MODE_INVERSE ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [26] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_basePath ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_renderLevel ]
        Property [ <default> protected $_currentRenderLevel ]
        Property [ <default> protected $_disabledLevels ]
        Property [ <default> protected $_viewParams ]
        Property [ <default> protected $_layout ]
        Property [ <default> protected $_layoutsDir ]
        Property [ <default> protected $_partialsDir ]
        Property [ <default> protected $_viewsDirs ]
        Property [ <default> protected $_templatesBefore ]
        Property [ <default> protected $_templatesAfter ]
        Property [ <default> protected $_engines ]
        Property [ <default> protected $_registeredEngines ]
        Property [ <default> protected $_mainView ]
        Property [ <default> protected $_controllerName ]
        Property [ <default> protected $_actionName ]
        Property [ <default> protected $_params ]
        Property [ <default> protected $_pickView ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_cacheLevel ]
        Property [ <default> protected $_activeRenderPaths ]
        Property [ <default> protected $_disabled ]
      }

      - Methods [61] {
        Method [ <internal:phalcon> public method getRenderLevel ] {
        }

        Method [ <internal:phalcon> public method getCurrentRenderLevel ] {
        }

        Method [ <internal:phalcon> public method getRegisteredEngines ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal:phalcon> final protected method _isAbsolutePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setViewsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewsDir ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getViewsDir ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setLayoutsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $layoutsDir ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getLayoutsDir ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setPartialsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $partialsDir ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getPartialsDir ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setBasePath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basePath ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getBasePath ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setRenderLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon> public method disableLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setMainView ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewPath ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getMainView ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setLayout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $layout ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getLayout ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setTemplateBefore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $templateBefore ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method cleanTemplateBefore ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method setTemplateAfter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $templateAfter ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method cleanTemplateAfter ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setParamToView ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method setVars ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $params ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setVar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method getVar ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getParamsToView ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getControllerName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getActionName ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getParams ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method start ] {
        }

        Method [ <internal:phalcon> protected method _loadTemplateEngines ] {
        }

        Method [ <internal:phalcon> protected method _engineRender ] {

          - Parameters [5] {
            Parameter #0 [ <required> $engines ]
            Parameter #1 [ <required> $viewPath ]
            Parameter #2 [ <required> $silence ]
            Parameter #3 [ <required> $mustClean ]
            Parameter #4 [ <optional> Phalcon\Cache\BackendInterface or NULL $cache ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method registerEngines ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $engines ]
          }
        }

        Method [ <internal:phalcon> public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $view ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $controllerName ]
            Parameter #1 [ <required> $actionName ]
            Parameter #2 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method pick ] {

          - Parameters [1] {
            Parameter #0 [ <required> $renderView ]
          }
        }

        Method [ <internal:phalcon> public method getPartial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> public method getRender ] {

          - Parameters [4] {
            Parameter #0 [ <required> $controllerName ]
            Parameter #1 [ <required> $actionName ]
            Parameter #2 [ <optional> $params ]
            Parameter #3 [ <optional> $configCallback ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method finish ] {
        }

        Method [ <internal:phalcon> protected method _createCache ] {
        }

        Method [ <internal:phalcon> public method isCaching ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getCache ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method getActiveRenderPath ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method disable ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method enable ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method reset ] {
        }

        Method [ <internal:phalcon> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Di\Injectable, prototype Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewInterface> public method isDisabled ] {
        }

        Method [ <internal:phalcon> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> protected method getViewsDirs ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Engine\Php extends Phalcon\Mvc\View\Engine implements Phalcon\Mvc\View\EngineInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_view ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, overwrites Phalcon\Mvc\View\EngineInterface, prototype Phalcon\Mvc\View\EngineInterface> public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $params ]
            Parameter #2 [ <optional> $mustClean ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ViewBaseInterface $view ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, prototype Phalcon\Mvc\View\EngineInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, prototype Phalcon\Mvc\View\EngineInterface> public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine> public method getView ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Engine\Volt extends Phalcon\Mvc\View\Engine implements Phalcon\Mvc\View\EngineInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Events\EventsAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_view ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_compiler ]
        Property [ <default> protected $_macros ]
      }

      - Methods [19] {
        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon> public method getCompiler ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Mvc\View\EngineInterface, prototype Phalcon\Mvc\View\EngineInterface> public method render ] {

          - Parameters [3] {
            Parameter #0 [ <required> $templatePath ]
            Parameter #1 [ <required> $params ]
            Parameter #2 [ <optional> $mustClean ]
          }
        }

        Method [ <internal:phalcon> public method length ] {

          - Parameters [1] {
            Parameter #0 [ <required> $item ]
          }
        }

        Method [ <internal:phalcon> public method isIncluded ] {

          - Parameters [2] {
            Parameter #0 [ <required> $needle ]
            Parameter #1 [ <required> $haystack ]
          }
        }

        Method [ <internal:phalcon> public method convertEncoding ] {

          - Parameters [3] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <required> $from ]
            Parameter #2 [ <required> $to ]
          }
        }

        Method [ <internal:phalcon> public method slice ] {

          - Parameters [3] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <optional> $start ]
            Parameter #2 [ <optional> $end ]
          }
        }

        Method [ <internal:phalcon> public method sort ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $value ]
          }
        }

        Method [ <internal:phalcon> public method callMacro ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> array or NULL $arguments ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Mvc\ViewBaseInterface $view ]
            Parameter #1 [ <optional> Phalcon\DiInterface or NULL $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, prototype Phalcon\Mvc\View\EngineInterface> public method getContent ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine, prototype Phalcon\Mvc\View\EngineInterface> public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Mvc\View\Engine> public method getView ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Engine\Volt\Compiler implements Phalcon\Di\InjectionAwareInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [22] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_view ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_arrayHelpers ]
        Property [ <default> protected $_level ]
        Property [ <default> protected $_foreachLevel ]
        Property [ <default> protected $_blockLevel ]
        Property [ <default> protected $_exprLevel ]
        Property [ <default> protected $_extended ]
        Property [ <default> protected $_autoescape ]
        Property [ <default> protected $_extendedBlocks ]
        Property [ <default> protected $_currentBlock ]
        Property [ <default> protected $_blocks ]
        Property [ <default> protected $_forElsePointers ]
        Property [ <default> protected $_loopPointers ]
        Property [ <default> protected $_extensions ]
        Property [ <default> protected $_functions ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_macros ]
        Property [ <default> protected $_prefix ]
        Property [ <default> protected $_currentPath ]
        Property [ <default> protected $_compiledTemplatePath ]
      }

      - Methods [44] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> Phalcon\Mvc\ViewBaseInterface or NULL $view ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method getOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $option ]
          }
        }

        Method [ <internal:phalcon> public method getOptions ] {
        }

        Method [ <internal:phalcon> final public method fireExtensionEvent ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $arguments ]
          }
        }

        Method [ <internal:phalcon> public method addExtension ] {

          - Parameters [1] {
            Parameter #0 [ <required> $extension ]
          }
        }

        Method [ <internal:phalcon> public method getExtensions ] {
        }

        Method [ <internal:phalcon> public method addFunction ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon> public method getFunctions ] {
        }

        Method [ <internal:phalcon> public method addFilter ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $definition ]
          }
        }

        Method [ <internal:phalcon> public method getFilters ] {
        }

        Method [ <internal:phalcon> public method setUniquePrefix ] {

          - Parameters [1] {
            Parameter #0 [ <required> $prefix ]
          }
        }

        Method [ <internal:phalcon> public method getUniquePrefix ] {
        }

        Method [ <internal:phalcon> public method attributeReader ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> public method functionCall ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> public method resolveTest ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $test ]
            Parameter #1 [ <required> $left ]
          }
        }

        Method [ <internal:phalcon> final protected method resolveFilter ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $filter ]
            Parameter #1 [ <required> $left ]
          }
        }

        Method [ <internal:phalcon> final public method expression ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $expr ]
          }
        }

        Method [ <internal:phalcon> final protected method _statementListOrExtends ] {

          - Parameters [1] {
            Parameter #0 [ <required> $statements ]
          }
        }

        Method [ <internal:phalcon> public method compileForeach ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileForElse ] {
        }

        Method [ <internal:phalcon> public method compileIf ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileElseIf ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileCache ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileSet ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileDo ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileReturn ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileAutoEscape ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <required> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileEcho ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileInclude ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $statement ]
          }
        }

        Method [ <internal:phalcon> public method compileMacro ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <required> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileCall ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statement ]
            Parameter #1 [ <required> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> final protected method _statementList ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $statements ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> protected method _compileSource ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewCode ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileString ] {

          - Parameters [2] {
            Parameter #0 [ <required> $viewCode ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compileFile ] {

          - Parameters [3] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $compiledPath ]
            Parameter #2 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method compile ] {

          - Parameters [2] {
            Parameter #0 [ <required> $templatePath ]
            Parameter #1 [ <optional> $extendsMode ]
          }
        }

        Method [ <internal:phalcon> public method getTemplatePath ] {
        }

        Method [ <internal:phalcon> public method getCompiledTemplatePath ] {
        }

        Method [ <internal:phalcon> public method parse ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewCode ]
          }
        }

        Method [ <internal:phalcon> protected method getFinalPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Engine\Volt\Exception extends Phalcon\Mvc\View\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Mvc\View\Simple extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\Mvc\ViewBaseInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [12] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_viewsDir ]
        Property [ <default> protected $_partialsDir ]
        Property [ <default> protected $_viewParams ]
        Property [ <default> protected $_engines ]
        Property [ <default> protected $_registeredEngines ]
        Property [ <default> protected $_activeRenderPath ]
        Property [ <default> protected $_content ]
        Property [ <default> protected $_cache ]
        Property [ <default> protected $_cacheOptions ]
      }

      - Methods [28] {
        Method [ <internal:phalcon> public method getRegisteredEngines ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setViewsDir ] {

          - Parameters [1] {
            Parameter #0 [ <required> $viewsDir ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getViewsDir ] {
        }

        Method [ <internal:phalcon> public method registerEngines ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $engines ]
          }
        }

        Method [ <internal:phalcon> protected method _loadTemplateEngines ] {
        }

        Method [ <internal:phalcon> final protected method _internalRender ] {

          - Parameters [2] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $params ]
          }
        }

        Method [ <internal:phalcon> public method render ] {

          - Parameters [2] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method partial ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partialPath ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> public method setCacheOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method getCacheOptions ] {
        }

        Method [ <internal:phalcon> protected method _createCache ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getCache ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method cache ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setParamToView ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method setVars ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $params ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setVar ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> public method getVar ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getParamsToView ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Mvc\ViewBaseInterface> public method getContent ] {
        }

        Method [ <internal:phalcon> public method getActiveRenderPath ] {
        }

        Method [ <internal:phalcon> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Di\Injectable, prototype Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Paginator\Adapter\Model extends Phalcon\Paginator\Adapter implements Phalcon\Paginator\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_limitRows ]
        Property [ <default> protected $_page ]
        Property [ <default> protected $_config ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $config ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Paginator\AdapterInterface, prototype Phalcon\Paginator\AdapterInterface> public method getPaginate ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setCurrentPage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $limitRows ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method getLimit ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Paginator\Adapter\NativeArray extends Phalcon\Paginator\Adapter implements Phalcon\Paginator\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_limitRows ]
        Property [ <default> protected $_page ]
        Property [ <default> protected $_config ]
      }

      - Methods [5] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $config ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Paginator\AdapterInterface, prototype Phalcon\Paginator\AdapterInterface> public method getPaginate ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setCurrentPage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $limitRows ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method getLimit ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Paginator\Adapter\QueryBuilder extends Phalcon\Paginator\Adapter implements Phalcon\Paginator\AdapterInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $_limitRows ]
        Property [ <default> protected $_page ]
        Property [ <default> protected $_config ]
        Property [ <default> protected $_builder ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $config ]
          }
        }

        Method [ <internal:phalcon> public method getCurrentPage ] {
        }

        Method [ <internal:phalcon> public method setQueryBuilder ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Mvc\Model\Query\Builder $builder ]
          }
        }

        Method [ <internal:phalcon> public method getQueryBuilder ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Paginator\AdapterInterface, prototype Phalcon\Paginator\AdapterInterface> public method getPaginate ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setCurrentPage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $page ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method setLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $limitRows ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Paginator\Adapter, prototype Phalcon\Paginator\AdapterInterface> public method getLimit ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Paginator\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Queue\Beanstalk ] {

      - Constants [6] {
        Constant [ integer DEFAULT_DELAY ] { 0 }
        Constant [ integer DEFAULT_PRIORITY ] { 100 }
        Constant [ integer DEFAULT_TTR ] { 86400 }
        Constant [ string DEFAULT_TUBE ] { default }
        Constant [ string DEFAULT_HOST ] { 127.0.0.1 }
        Constant [ integer DEFAULT_PORT ] { 11300 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_connection ]
        Property [ <default> protected $_parameters ]
      }

      - Methods [24] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $parameters ]
          }
        }

        Method [ <internal:phalcon> public method connect ] {
        }

        Method [ <internal:phalcon> public method put ] {

          - Parameters [2] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal:phalcon> public method reserve ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:phalcon> public method choose ] {

          - Parameters [1] {
            Parameter #0 [ <required> $tube ]
          }
        }

        Method [ <internal:phalcon> public method watch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $tube ]
          }
        }

        Method [ <internal:phalcon> public method ignore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $tube ]
          }
        }

        Method [ <internal:phalcon> public method pauseTube ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tube ]
            Parameter #1 [ <required> $delay ]
          }
        }

        Method [ <internal:phalcon> public method kick ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bound ]
          }
        }

        Method [ <internal:phalcon> public method stats ] {
        }

        Method [ <internal:phalcon> public method statsTube ] {

          - Parameters [1] {
            Parameter #0 [ <required> $tube ]
          }
        }

        Method [ <internal:phalcon> public method listTubes ] {
        }

        Method [ <internal:phalcon> public method listTubeUsed ] {
        }

        Method [ <internal:phalcon> public method listTubesWatched ] {
        }

        Method [ <internal:phalcon> public method peekReady ] {
        }

        Method [ <internal:phalcon> public method peekBuried ] {
        }

        Method [ <internal:phalcon> public method peekDelayed ] {
        }

        Method [ <internal:phalcon> public method jobPeek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon> final public method readStatus ] {
        }

        Method [ <internal:phalcon> final public method readYaml ] {
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $length ]
          }
        }

        Method [ <internal:phalcon> protected method write ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon> public method disconnect ] {
        }

        Method [ <internal:phalcon> public method quit ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Queue\Beanstalk\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Queue\Beanstalk\Job ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_id ]
        Property [ <default> protected $_body ]
        Property [ <default> protected $_queue ]
      }

      - Methods [10] {
        Method [ <internal:phalcon> public method getId ] {
        }

        Method [ <internal:phalcon> public method getBody ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> Phalcon\Queue\Beanstalk $queue ]
            Parameter #1 [ <required> $id ]
            Parameter #2 [ <required> $body ]
          }
        }

        Method [ <internal:phalcon> public method delete ] {
        }

        Method [ <internal:phalcon> public method release ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $priority ]
            Parameter #1 [ <optional> $delay ]
          }
        }

        Method [ <internal:phalcon> public method bury ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $priority ]
          }
        }

        Method [ <internal:phalcon> public method touch ] {
        }

        Method [ <internal:phalcon> public method kick ] {
        }

        Method [ <internal:phalcon> public method stats ] {
        }

        Method [ <internal:phalcon> public method __wakeup ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> final class Phalcon\Registry implements ArrayAccess, Countable, Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_data ]
      }

      - Methods [15] {
        Method [ <internal:phalcon, ctor> final public method __construct ] {
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> final public method count ] {
        }

        Method [ <internal:phalcon, prototype Iterator> final public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> final public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> final public method rewind ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method current ] {
        }

        Method [ <internal:phalcon> final public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> final public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> final public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon> final public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Security implements Phalcon\Di\InjectionAwareInterface ] {

      - Constants [10] {
        Constant [ integer CRYPT_DEFAULT ] { 0 }
        Constant [ integer CRYPT_STD_DES ] { 1 }
        Constant [ integer CRYPT_EXT_DES ] { 2 }
        Constant [ integer CRYPT_MD5 ] { 3 }
        Constant [ integer CRYPT_BLOWFISH ] { 4 }
        Constant [ integer CRYPT_BLOWFISH_A ] { 5 }
        Constant [ integer CRYPT_BLOWFISH_X ] { 6 }
        Constant [ integer CRYPT_BLOWFISH_Y ] { 7 }
        Constant [ integer CRYPT_SHA256 ] { 8 }
        Constant [ integer CRYPT_SHA512 ] { 9 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [9] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_workFactor ]
        Property [ <default> protected $_numberBytes ]
        Property [ <default> protected $_tokenKeySessionID ]
        Property [ <default> protected $_tokenValueSessionID ]
        Property [ <default> protected $_token ]
        Property [ <default> protected $_tokenKey ]
        Property [ <default> protected $_random ]
        Property [ <default> protected $_defaultHash ]
      }

      - Methods [22] {
        Method [ <internal:phalcon> public method setWorkFactor ] {

          - Parameters [1] {
            Parameter #0 [ <required> $workFactor ]
          }
        }

        Method [ <internal:phalcon> public method getWorkFactor ] {
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon> public method setRandomBytes ] {

          - Parameters [1] {
            Parameter #0 [ <required> $randomBytes ]
          }
        }

        Method [ <internal:phalcon> public method getRandomBytes ] {
        }

        Method [ <internal:phalcon> public method getRandom ] {
        }

        Method [ <internal:phalcon> public method getSaltBytes ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $numberBytes ]
          }
        }

        Method [ <internal:phalcon> public method hash ] {

          - Parameters [2] {
            Parameter #0 [ <required> $password ]
            Parameter #1 [ <optional> $workFactor ]
          }
        }

        Method [ <internal:phalcon> public method checkHash ] {

          - Parameters [3] {
            Parameter #0 [ <required> $password ]
            Parameter #1 [ <required> $passwordHash ]
            Parameter #2 [ <optional> $maxPassLength ]
          }
        }

        Method [ <internal:phalcon> public method isLegacyHash ] {

          - Parameters [1] {
            Parameter #0 [ <required> $passwordHash ]
          }
        }

        Method [ <internal:phalcon> public method getTokenKey ] {
        }

        Method [ <internal:phalcon> public method getToken ] {
        }

        Method [ <internal:phalcon> public method checkToken ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $tokenKey ]
            Parameter #1 [ <optional> $tokenValue ]
            Parameter #2 [ <optional> $destroyIfValid ]
          }
        }

        Method [ <internal:phalcon> public method getSessionToken ] {
        }

        Method [ <internal:phalcon> public method destroyToken ] {
        }

        Method [ <internal:phalcon> public method computeHmac ] {

          - Parameters [4] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $algo ]
            Parameter #3 [ <optional> $raw ]
          }
        }

        Method [ <internal:phalcon> public method setDefaultHash ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultHash ]
          }
        }

        Method [ <internal:phalcon> public method getDefaultHash ] {
        }

        Method [ <internal:phalcon> public method hasLibreSsl ] {
        }

        Method [ <internal:phalcon> public method getSslVersionNumber ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Security\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Security\Random ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:phalcon> public method bytes ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $len ]
          }
        }

        Method [ <internal:phalcon> public method hex ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $len ]
          }
        }

        Method [ <internal:phalcon> public method base58 ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $n ]
          }
        }

        Method [ <internal:phalcon> public method base64 ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $len ]
          }
        }

        Method [ <internal:phalcon> public method base64Safe ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $len ]
            Parameter #1 [ <optional> $padding ]
          }
        }

        Method [ <internal:phalcon> public method uuid ] {
        }

        Method [ <internal:phalcon> public method number ] {

          - Parameters [1] {
            Parameter #0 [ <required> $len ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Session\Adapter\Files extends Phalcon\Session\Adapter implements Phalcon\Session\AdapterInterface ] {

      - Constants [3] {
        Constant [ integer SESSION_ACTIVE ] { 2 }
        Constant [ integer SESSION_NONE ] { 1 }
        Constant [ integer SESSION_DISABLED ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $_uniqueId ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_options ]
      }

      - Methods [21] {
        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method start ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
            Parameter #2 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $removeData ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method status ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Session\Adapter\Libmemcached extends Phalcon\Session\Adapter implements Phalcon\Session\AdapterInterface ] {

      - Constants [3] {
        Constant [ integer SESSION_ACTIVE ] { 2 }
        Constant [ integer SESSION_NONE ] { 1 }
        Constant [ integer SESSION_DISABLED ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_uniqueId ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_libmemcached ]
        Property [ <default> protected $_lifetime ]
      }

      - Methods [28] {
        Method [ <internal:phalcon> public method getLibmemcached ] {
        }

        Method [ <internal:phalcon> public method getLifetime ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> public method open ] {
        }

        Method [ <internal:phalcon> public method close ] {
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sessionId ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method gc ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method start ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
            Parameter #2 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method status ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Session\Adapter\Memcache extends Phalcon\Session\Adapter implements Phalcon\Session\AdapterInterface ] {

      - Constants [3] {
        Constant [ integer SESSION_ACTIVE ] { 2 }
        Constant [ integer SESSION_NONE ] { 1 }
        Constant [ integer SESSION_DISABLED ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_uniqueId ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_memcache ]
        Property [ <default> protected $_lifetime ]
      }

      - Methods [28] {
        Method [ <internal:phalcon> public method getMemcache ] {
        }

        Method [ <internal:phalcon> public method getLifetime ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal:phalcon> public method open ] {
        }

        Method [ <internal:phalcon> public method close ] {
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sessionId ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method gc ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method start ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
            Parameter #2 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method status ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Session\Adapter\Redis extends Phalcon\Session\Adapter implements Phalcon\Session\AdapterInterface ] {

      - Constants [3] {
        Constant [ integer SESSION_ACTIVE ] { 2 }
        Constant [ integer SESSION_NONE ] { 1 }
        Constant [ integer SESSION_DISABLED ] { 0 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_uniqueId ]
        Property [ <default> protected $_started ]
        Property [ <default> protected $_options ]
        Property [ <default> protected $_redis ]
        Property [ <default> protected $_lifetime ]
      }

      - Methods [28] {
        Method [ <internal:phalcon> public method getRedis ] {
        }

        Method [ <internal:phalcon> public method getLifetime ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal:phalcon> public method open ] {
        }

        Method [ <internal:phalcon> public method close ] {
        }

        Method [ <internal:phalcon> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $sessionId ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method destroy ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $sessionId ]
          }
        }

        Method [ <internal:phalcon> public method gc ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method start ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getOptions ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getName ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method regenerateId ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $deleteOldSession ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $defaultValue ]
            Parameter #2 [ <optional> $remove ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method getId ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method setId ] {

          - Parameters [1] {
            Parameter #0 [ <required> $id ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, prototype Phalcon\Session\AdapterInterface> public method isStarted ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method status ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Session\Adapter, dtor> public method __destruct ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Session\Bag implements Phalcon\Di\InjectionAwareInterface, Phalcon\Session\BagInterface, IteratorAggregate, Traversable, ArrayAccess, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_name ]
        Property [ <default> protected $_data ]
        Property [ <default> protected $_initialized ]
        Property [ <default> protected $_session ]
      }

      - Methods [19] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method initialize ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method destroy ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method __set ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method has ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Session\BagInterface> public method __isset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon> public method remove ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon> public method __unset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> final public method count ] {
        }

        Method [ <internal:phalcon, prototype IteratorAggregate> final public method getIterator ] {
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $property ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> final public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $property ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Session\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Tag ] {

      - Constants [11] {
        Constant [ integer HTML32 ] { 1 }
        Constant [ integer HTML401_STRICT ] { 2 }
        Constant [ integer HTML401_TRANSITIONAL ] { 3 }
        Constant [ integer HTML401_FRAMESET ] { 4 }
        Constant [ integer HTML5 ] { 5 }
        Constant [ integer XHTML10_STRICT ] { 6 }
        Constant [ integer XHTML10_TRANSITIONAL ] { 7 }
        Constant [ integer XHTML10_FRAMESET ] { 8 }
        Constant [ integer XHTML11 ] { 9 }
        Constant [ integer XHTML20 ] { 10 }
        Constant [ integer XHTML5 ] { 11 }
      }

      - Static properties [11] {
        Property [ protected static $_displayValues ]
        Property [ protected static $_documentTitle ]
        Property [ protected static $_documentAppendTitle ]
        Property [ protected static $_documentPrependTitle ]
        Property [ protected static $_documentTitleSeparator ]
        Property [ protected static $_documentType ]
        Property [ protected static $_dependencyInjector ]
        Property [ protected static $_urlService ]
        Property [ protected static $_dispatcherService ]
        Property [ protected static $_escaperService ]
        Property [ protected static $_autoEscape ]
      }

      - Static methods [56] {
        Method [ <internal:phalcon> static public method getEscaper ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $params ]
          }
        }

        Method [ <internal:phalcon> static public method renderAttributes ] {

          - Parameters [2] {
            Parameter #0 [ <required> $code ]
            Parameter #1 [ <required> array $attributes ]
          }
        }

        Method [ <internal:phalcon> static public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon> static public method getDI ] {
        }

        Method [ <internal:phalcon> static public method getUrlService ] {
        }

        Method [ <internal:phalcon> static public method getEscaperService ] {
        }

        Method [ <internal:phalcon> static public method setAutoescape ] {

          - Parameters [1] {
            Parameter #0 [ <required> $autoescape ]
          }
        }

        Method [ <internal:phalcon> static public method setDefault ] {

          - Parameters [2] {
            Parameter #0 [ <required> $id ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> static public method setDefaults ] {

          - Parameters [2] {
            Parameter #0 [ <required> array $values ]
            Parameter #1 [ <optional> $merge ]
          }
        }

        Method [ <internal:phalcon> static public method displayTo ] {

          - Parameters [2] {
            Parameter #0 [ <required> $id ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon> static public method hasValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:phalcon> static public method getValue ] {

          - Parameters [2] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <optional> $params ]
          }
        }

        Method [ <internal:phalcon> static public method resetInput ] {
        }

        Method [ <internal:phalcon> static public method linkTo ] {

          - Parameters [3] {
            Parameter #0 [ <required> $parameters ]
            Parameter #1 [ <optional> $text ]
            Parameter #2 [ <optional> $local ]
          }
        }

        Method [ <internal:phalcon> final static protected method _inputField ] {

          - Parameters [3] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $parameters ]
            Parameter #2 [ <optional> $asValue ]
          }
        }

        Method [ <internal:phalcon> final static protected method _inputFieldChecked ] {

          - Parameters [2] {
            Parameter #0 [ <required> $type ]
            Parameter #1 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method colorField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method textField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method numericField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method rangeField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method emailField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method dateField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method dateTimeField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method dateTimeLocalField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method monthField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method timeField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method weekField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method passwordField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method hiddenField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method fileField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method searchField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method telField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method urlField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method checkField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method radioField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method imageInput ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method submitButton ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method selectStatic ] {

          - Parameters [2] {
            Parameter #0 [ <required> $parameters ]
            Parameter #1 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon> static public method select ] {

          - Parameters [2] {
            Parameter #0 [ <required> $parameters ]
            Parameter #1 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon> static public method textArea ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method form ] {

          - Parameters [1] {
            Parameter #0 [ <required> $parameters ]
          }
        }

        Method [ <internal:phalcon> static public method endForm ] {
        }

        Method [ <internal:phalcon> static public method setTitle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $title ]
          }
        }

        Method [ <internal:phalcon> static public method setTitleSeparator ] {

          - Parameters [1] {
            Parameter #0 [ <required> $titleSeparator ]
          }
        }

        Method [ <internal:phalcon> static public method appendTitle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $title ]
          }
        }

        Method [ <internal:phalcon> static public method prependTitle ] {

          - Parameters [1] {
            Parameter #0 [ <required> $title ]
          }
        }

        Method [ <internal:phalcon> static public method getTitle ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $tags ]
          }
        }

        Method [ <internal:phalcon> static public method getTitleSeparator ] {
        }

        Method [ <internal:phalcon> static public method stylesheetLink ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $parameters ]
            Parameter #1 [ <optional> $local ]
          }
        }

        Method [ <internal:phalcon> static public method javascriptInclude ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $parameters ]
            Parameter #1 [ <optional> $local ]
          }
        }

        Method [ <internal:phalcon> static public method image ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $parameters ]
            Parameter #1 [ <optional> $local ]
          }
        }

        Method [ <internal:phalcon> static public method friendlyTitle ] {

          - Parameters [4] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $separator ]
            Parameter #2 [ <optional> $lowercase ]
            Parameter #3 [ <optional> $replace ]
          }
        }

        Method [ <internal:phalcon> static public method setDocType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $doctype ]
          }
        }

        Method [ <internal:phalcon> static public method getDocType ] {
        }

        Method [ <internal:phalcon> static public method tagHtml ] {

          - Parameters [5] {
            Parameter #0 [ <required> $tagName ]
            Parameter #1 [ <optional> $parameters ]
            Parameter #2 [ <optional> $selfClose ]
            Parameter #3 [ <optional> $onlyStart ]
            Parameter #4 [ <optional> $useEol ]
          }
        }

        Method [ <internal:phalcon> static public method tagHtmlClose ] {

          - Parameters [2] {
            Parameter #0 [ <required> $tagName ]
            Parameter #1 [ <optional> $useEol ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Tag\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Tag\Select ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [3] {
        Method [ <internal:phalcon> static public method selectField ] {

          - Parameters [2] {
            Parameter #0 [ <required> $parameters ]
            Parameter #1 [ <optional> $data ]
          }
        }

        Method [ <internal:phalcon> static private method _optionsFromResultset ] {

          - Parameters [4] {
            Parameter #0 [ <required> $resultset ]
            Parameter #1 [ <required> $using ]
            Parameter #2 [ <required> $value ]
            Parameter #3 [ <required> $closeOption ]
          }
        }

        Method [ <internal:phalcon> static private method _optionsFromArray ] {

          - Parameters [3] {
            Parameter #0 [ <required> $data ]
            Parameter #1 [ <required> $value ]
            Parameter #2 [ <required> $closeOption ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Text ] {

      - Constants [5] {
        Constant [ integer RANDOM_ALNUM ] { 0 }
        Constant [ integer RANDOM_ALPHA ] { 1 }
        Constant [ integer RANDOM_HEXDEC ] { 2 }
        Constant [ integer RANDOM_NUMERIC ] { 3 }
        Constant [ integer RANDOM_NOZERO ] { 4 }
      }

      - Static properties [0] {
      }

      - Static methods [13] {
        Method [ <internal:phalcon> static public method camelize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $delimiter ]
          }
        }

        Method [ <internal:phalcon> static public method uncamelize ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $delimiter ]
          }
        }

        Method [ <internal:phalcon> static public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $separator ]
          }
        }

        Method [ <internal:phalcon> static public method random ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $type ]
            Parameter #1 [ <optional> $length ]
          }
        }

        Method [ <internal:phalcon> static public method startsWith ] {

          - Parameters [3] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <required> $start ]
            Parameter #2 [ <optional> $ignoreCase ]
          }
        }

        Method [ <internal:phalcon> static public method endsWith ] {

          - Parameters [3] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <required> $end ]
            Parameter #2 [ <optional> $ignoreCase ]
          }
        }

        Method [ <internal:phalcon> static public method lower ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $encoding ]
          }
        }

        Method [ <internal:phalcon> static public method upper ] {

          - Parameters [2] {
            Parameter #0 [ <required> $str ]
            Parameter #1 [ <optional> $encoding ]
          }
        }

        Method [ <internal:phalcon> static public method reduceSlashes ] {

          - Parameters [1] {
            Parameter #0 [ <required> $str ]
          }
        }

        Method [ <internal:phalcon> static public method concat ] {
        }

        Method [ <internal:phalcon> static public method dynamic ] {

          - Parameters [4] {
            Parameter #0 [ <required> $text ]
            Parameter #1 [ <optional> $leftDelimiter ]
            Parameter #2 [ <optional> $rightDelimiter ]
            Parameter #3 [ <optional> $separator ]
          }
        }

        Method [ <internal:phalcon> static public method underscore ] {

          - Parameters [1] {
            Parameter #0 [ <required> $text ]
          }
        }

        Method [ <internal:phalcon> static public method humanize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $text ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> abstract class Phalcon\Translate ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Adapter\Csv extends Phalcon\Translate\Adapter implements Phalcon\Translate\AdapterInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_interpolator ]
        Property [ <default> protected $_translate ]
      }

      - Methods [12] {
        Method [ <internal:phalcon, overwrites Phalcon\Translate\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> private method _load ] {

          - Parameters [4] {
            Parameter #0 [ <required> $file ]
            Parameter #1 [ <required> $length ]
            Parameter #2 [ <required> $delimiter ]
            Parameter #3 [ <required> $enclosure ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method query ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method setInterpolator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Translate\InterpolatorInterface $interpolator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype Phalcon\Translate\AdapterInterface> public method t ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method _ ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> protected method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Adapter\Gettext extends Phalcon\Translate\Adapter implements Phalcon\Translate\AdapterInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $_interpolator ]
        Property [ <default> protected $_directory ]
        Property [ <default> protected $_defaultDomain ]
        Property [ <default> protected $_locale ]
        Property [ <default> protected $_category ]
      }

      - Methods [23] {
        Method [ <internal:phalcon> public method getDirectory ] {
        }

        Method [ <internal:phalcon> public method getDefaultDomain ] {
        }

        Method [ <internal:phalcon> public method getLocale ] {
        }

        Method [ <internal:phalcon> public method getCategory ] {
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method query ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method nquery ] {

          - Parameters [5] {
            Parameter #0 [ <required> $msgid1 ]
            Parameter #1 [ <required> $msgid2 ]
            Parameter #2 [ <required> $count ]
            Parameter #3 [ <optional> $placeholders ]
            Parameter #4 [ <optional> $domain ]
          }
        }

        Method [ <internal:phalcon> public method setDomain ] {

          - Parameters [1] {
            Parameter #0 [ <required> $domain ]
          }
        }

        Method [ <internal:phalcon> public method resetDomain ] {
        }

        Method [ <internal:phalcon> public method setDefaultDomain ] {

          - Parameters [1] {
            Parameter #0 [ <required> $domain ]
          }
        }

        Method [ <internal:phalcon> public method setDirectory ] {

          - Parameters [1] {
            Parameter #0 [ <required> $directory ]
          }
        }

        Method [ <internal:phalcon> public method setLocale ] {

          - Parameters [2] {
            Parameter #0 [ <required> $category ]
            Parameter #1 [ <required> $locale ]
          }
        }

        Method [ <internal:phalcon> protected method prepareOptions ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon> protected method getOptionsDefault ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method setInterpolator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Translate\InterpolatorInterface $interpolator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype Phalcon\Translate\AdapterInterface> public method t ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method _ ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> protected method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Adapter\NativeArray extends Phalcon\Translate\Adapter implements Phalcon\Translate\AdapterInterface, ArrayAccess ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_interpolator ]
        Property [ <default> protected $_translate ]
      }

      - Methods [11] {
        Method [ <internal:phalcon, overwrites Phalcon\Translate\Adapter, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $options ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method query ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, overwrites Phalcon\Translate\AdapterInterface, prototype Phalcon\Translate\AdapterInterface> public method exists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method setInterpolator ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Translate\InterpolatorInterface $interpolator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype Phalcon\Translate\AdapterInterface> public method t ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> public method _ ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translateKey ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $translateKey ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Translate\Adapter> protected method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Interpolator\AssociativeArray implements Phalcon\Translate\InterpolatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Translate\InterpolatorInterface> public method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Translate\Interpolator\IndexedArray implements Phalcon\Translate\InterpolatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Translate\InterpolatorInterface> public method replacePlaceholders ] {

          - Parameters [2] {
            Parameter #0 [ <required> $translation ]
            Parameter #1 [ <optional> $placeholders ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation extends Phalcon\Di\Injectable implements Phalcon\Events\EventsAwareInterface, Phalcon\Di\InjectionAwareInterface, Phalcon\ValidationInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [11] {
        Property [ <default> protected $_dependencyInjector ]
        Property [ <default> protected $_eventsManager ]
        Property [ <default> protected $_data ]
        Property [ <default> protected $_entity ]
        Property [ <default> protected $_validators ]
        Property [ <default> protected $_combinedFieldsValidators ]
        Property [ <default> protected $_filters ]
        Property [ <default> protected $_messages ]
        Property [ <default> protected $_defaultMessages ]
        Property [ <default> protected $_labels ]
        Property [ <default> protected $_values ]
      }

      - Methods [25] {
        Method [ <internal:phalcon> public method setValidators ] {

          - Parameters [1] {
            Parameter #0 [ <required> $validators ]
          }
        }

        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $validators ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $data ]
            Parameter #1 [ <optional> $entity ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method add ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method rule ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method rules ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> array $validators ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method setFilters ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> $filters ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getFilters ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $field ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getValidators ] {
        }

        Method [ <internal:phalcon> public method setEntity ] {

          - Parameters [1] {
            Parameter #0 [ <required> $entity ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getEntity ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method setDefaultMessages ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $messages ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getDefaultMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getMessages ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method setLabels ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $labels ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getLabel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method bind ] {

          - Parameters [2] {
            Parameter #0 [ <required> $entity ]
            Parameter #1 [ <required> $data ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\ValidationInterface> public method getValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> protected method preChecking ] {

          - Parameters [2] {
            Parameter #0 [ <required> $field ]
            Parameter #1 [ <required> Phalcon\Validation\ValidatorInterface $validator ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method setDI ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\DiInterface $dependencyInjector ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Di\InjectionAwareInterface> public method getDI ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method setEventsManager ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Events\ManagerInterface $eventsManager ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable, prototype Phalcon\Events\EventsAwareInterface> public method getEventsManager ] {
        }

        Method [ <internal:phalcon, inherits Phalcon\Di\Injectable> public method __get ] {

          - Parameters [1] {
            Parameter #0 [ <required> $propertyName ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Exception extends Phalcon\Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Message implements Phalcon\Validation\MessageInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> array $message ]
          }
        }
      }

      - Properties [4] {
        Property [ <default> protected $_type ]
        Property [ <default> protected $_message ]
        Property [ <default> protected $_field ]
        Property [ <default> protected $_code ]
      }

      - Methods [10] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $message ]
            Parameter #1 [ <optional> $field ]
            Parameter #2 [ <optional> $type ]
            Parameter #3 [ <optional> $code ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method setType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $type ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method getType ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method setMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method getMessage ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method setField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method getField ] {
        }

        Method [ <internal:phalcon> public method setCode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $code ]
          }
        }

        Method [ <internal:phalcon> public method getCode ] {
        }

        Method [ <internal:phalcon, prototype Phalcon\Validation\MessageInterface> public method __toString ] {
        }
      }
    }

    Class [ <internal:phalcon> <iterateable> class Phalcon\Validation\Message\Group implements Countable, ArrayAccess, Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [1] {
        Method [ <internal:phalcon> static public method __set_state ] {

          - Parameters [1] {
            Parameter #0 [ <required> $group ]
          }
        }
      }

      - Properties [2] {
        Property [ <default> protected $_position ]
        Property [ <default> protected $_messages ]
      }

      - Methods [14] {
        Method [ <internal:phalcon, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $messages ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $message ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $index ]
          }
        }

        Method [ <internal:phalcon> public method appendMessage ] {

          - Parameters [1] {
            Parameter #0 [ <required> Phalcon\Validation\MessageInterface $message ]
          }
        }

        Method [ <internal:phalcon> public method appendMessages ] {

          - Parameters [1] {
            Parameter #0 [ <required> $messages ]
          }
        }

        Method [ <internal:phalcon> public method filter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fieldName ]
          }
        }

        Method [ <internal:phalcon, prototype Countable> public method count ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method rewind ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method current ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method key ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method next ] {
        }

        Method [ <internal:phalcon, prototype Iterator> public method valid ] {
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Alnum extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Alpha extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Between extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Confirmation extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> final protected method compare ] {

          - Parameters [2] {
            Parameter #0 [ <required> $a ]
            Parameter #1 [ <required> $b ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\CreditCard extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> private method verifyByLuhnAlgorithm ] {

          - Parameters [1] {
            Parameter #0 [ <required> $number ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Date extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> private method checkDate ] {

          - Parameters [2] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <required> $format ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Digit extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Email extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\ExclusionIn extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\File extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [7] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> public method isAllowEmpty ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Identical extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\InclusionIn extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Numericality extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\PresenceOf extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Regex extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\StringLength extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Uniqueness extends Phalcon\Validation\CombinedFieldsValidator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $_options ]
        Property [ <default> private $columnMap ]
      }

      - Methods [8] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> protected method isUniqueness ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon> protected method getColumnNameReal ] {

          - Parameters [2] {
            Parameter #0 [ <required> $record ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Validation\Validator\Url extends Phalcon\Validation\Validator implements Phalcon\Validation\ValidatorInterface ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $_options ]
      }

      - Methods [6] {
        Method [ <internal:phalcon, overwrites Phalcon\Validation\Validator, prototype Phalcon\Validation\Validator> public method validate ] {

          - Parameters [2] {
            Parameter #0 [ <required> Phalcon\Validation $validation ]
            Parameter #1 [ <required> $field ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> array or NULL $options ]
          }
        }

        Method [ <internal, deprecated:phalcon, inherits Phalcon\Validation\Validator> public method isSetOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method hasOption ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator, prototype Phalcon\Validation\ValidatorInterface> public method getOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $defaultValue ]
          }
        }

        Method [ <internal:phalcon, inherits Phalcon\Validation\Validator> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:phalcon> class Phalcon\Version ] {

      - Constants [5] {
        Constant [ integer VERSION_MAJOR ] { 0 }
        Constant [ integer VERSION_MEDIUM ] { 1 }
        Constant [ integer VERSION_MINOR ] { 2 }
        Constant [ integer VERSION_SPECIAL ] { 3 }
        Constant [ integer VERSION_SPECIAL_NUMBER ] { 4 }
      }

      - Static properties [0] {
      }

      - Static methods [5] {
        Method [ <internal:phalcon> static protected method _getVersion ] {
        }

        Method [ <internal:phalcon> final static protected method _getSpecial ] {

          - Parameters [1] {
            Parameter #0 [ <required> $special ]
          }
        }

        Method [ <internal:phalcon> static public method get ] {
        }

        Method [ <internal:phalcon> static public method getId ] {
        }

        Method [ <internal:phalcon> static public method getPart ] {

          - Parameters [1] {
            Parameter #0 [ <required> $part ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:phalcon> final class phalcon\0__closure ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> final public method __invoke ] {

          - Parameters [1] {
            Parameter #0 [ <required> $element ]
          }
        }
      }
    }

    Class [ <internal:phalcon> final class phalcon\1__closure ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:phalcon> final public method __invoke ] {

          - Parameters [1] {
            Parameter #0 [ <required> $element ]
          }
        }
      }
    }
  }
}

